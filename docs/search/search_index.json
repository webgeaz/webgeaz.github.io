{
    "docs": [
        {
            "location": "/", 
            "text": "SUFIA - Single Unified Framework for Internet Application\n\n\n\n\nSUFIA is a framework combining the best open source libraries, tools, application development best-practices and utilities\nin a unified and integrated environment. By using SUFIA you can develop applications for small to large enterprises.\n\n\nYour focus should be on developing your application's \nbusiness logic\n. Other common components (such as user management, roles, menus etc.),\ncommon functions (database access, connection pools, scheduler) are already built-in for your utilization.\n\n\nArchitecture\n\n\nSUFIA web application framework is a Java\n1\n based application which run on JVM. It uses MySQL database by default, but is able to support\nmajor databases. SUFIA follows standard web MVC architecture which is similar to most of the Java based web applications.\n\n\n\n\nBasic Concept\n\n\nApplications built on SUFIA will follow SUFIA conventions. These include access control, users, roles, menu and transaction. \nTransaction\n\nis the crux of the application. You are likely to spend most of the development time on building Transactions.\n\n\nAs a holistic platform, SUFIA includes all the tools and mechanisms needed to build an application. Starting from database management tools\nto creating tables, writing a specification for use-cases, generating CRUD (Create, Retrieve, Update, Delete) code, generating queries (data listing),\nwriting business logic (using scripting language), writing UI frontend (form builder, custom template) up to testing and deployment of\nthe application to production.\n\n\nUsers of SUFIA are divided into three exclusive categories. Each category has its own built-in roles and functions.\n\n\nUser Category\n\n\n\n\n\n\nSystem Management\n\n\nUsers under this category are SUFIA administrators.\n\n\n\n\n\n\nApplication Management\n\n\nUsers under this category are application developers. They include business analysts, programmers, testers and DBAs.\n\n\n\n\n\n\nEnd User\n\n\nUsers under this category are actual users of the application. They can have their own menus, roles, functions (based on either transaction, data or query).\nEnd users will be assigned to specific environments based on user mode.\n\n\n\n\n\n\nEnvironment\n\n\nSUFIA is built-in with two environments i.e. Development and Production. You can start SUFIA\nwith both environments (default) or with either development or production.\n\n\nSUFIA environment rely heavily on user category. SUFIA user will be assigned to the environment depending on\nthe user category.\n\n\nEach environment has its own database. With this, it is safe to run both environments side-by-side\nand you can have the production user using the application while at the same time the testing user\ncan test the application without the data being shared. The databases can be on the same server, or you\ncan have a dedicated server for every environment.\n\n\nWhere to go next?\n\n\n\n\nInstallation\n - Once you have purchased SUFIA, you can follow this guideline to install and configure SUFIA\n\n\n\n\nAfter successful installation, you can proceed with the usage guideline below:\n\n\n\n\nAdministration\n - SUFIA administration guide for system administrator\n\n\nDevelopment\n - SUFIA development guide for developer\n\n\nOperation\n - SUFIA operational guide for system operator\n\n\n\n\n\n\n\n\n\n\n\n\nOracle and Java are registered trademarks of Oracle and/or its affiliates. Other names may be trademarks of their respective owners", 
            "title": "Introduction"
        }, 
        {
            "location": "/#sufia-single-unified-framework-for-internet-application", 
            "text": "SUFIA is a framework combining the best open source libraries, tools, application development best-practices and utilities\nin a unified and integrated environment. By using SUFIA you can develop applications for small to large enterprises.  Your focus should be on developing your application's  business logic . Other common components (such as user management, roles, menus etc.),\ncommon functions (database access, connection pools, scheduler) are already built-in for your utilization.", 
            "title": "SUFIA - Single Unified Framework for Internet Application"
        }, 
        {
            "location": "/#architecture", 
            "text": "SUFIA web application framework is a Java 1  based application which run on JVM. It uses MySQL database by default, but is able to support\nmajor databases. SUFIA follows standard web MVC architecture which is similar to most of the Java based web applications.", 
            "title": "Architecture"
        }, 
        {
            "location": "/#basic-concept", 
            "text": "Applications built on SUFIA will follow SUFIA conventions. These include access control, users, roles, menu and transaction.  Transaction \nis the crux of the application. You are likely to spend most of the development time on building Transactions.  As a holistic platform, SUFIA includes all the tools and mechanisms needed to build an application. Starting from database management tools\nto creating tables, writing a specification for use-cases, generating CRUD (Create, Retrieve, Update, Delete) code, generating queries (data listing),\nwriting business logic (using scripting language), writing UI frontend (form builder, custom template) up to testing and deployment of\nthe application to production.  Users of SUFIA are divided into three exclusive categories. Each category has its own built-in roles and functions.", 
            "title": "Basic Concept"
        }, 
        {
            "location": "/#user-category", 
            "text": "System Management  Users under this category are SUFIA administrators.    Application Management  Users under this category are application developers. They include business analysts, programmers, testers and DBAs.    End User  Users under this category are actual users of the application. They can have their own menus, roles, functions (based on either transaction, data or query).\nEnd users will be assigned to specific environments based on user mode.", 
            "title": "User Category"
        }, 
        {
            "location": "/#environment", 
            "text": "SUFIA is built-in with two environments i.e. Development and Production. You can start SUFIA\nwith both environments (default) or with either development or production.  SUFIA environment rely heavily on user category. SUFIA user will be assigned to the environment depending on\nthe user category.  Each environment has its own database. With this, it is safe to run both environments side-by-side\nand you can have the production user using the application while at the same time the testing user\ncan test the application without the data being shared. The databases can be on the same server, or you\ncan have a dedicated server for every environment.", 
            "title": "Environment"
        }, 
        {
            "location": "/#where-to-go-next", 
            "text": "Installation  - Once you have purchased SUFIA, you can follow this guideline to install and configure SUFIA   After successful installation, you can proceed with the usage guideline below:   Administration  - SUFIA administration guide for system administrator  Development  - SUFIA development guide for developer  Operation  - SUFIA operational guide for system operator       Oracle and Java are registered trademarks of Oracle and/or its affiliates. Other names may be trademarks of their respective owners", 
            "title": "Where to go next?"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation Guide\n\n\nThere are two types of packaging for SUFIA, a standalone (default package) and a WAR file. Depending on your\nrequirement, you have to choose what suits you best.\n\n\nSUFIA Standalone package includes everything needed to run it as a server application, except the database.\nYou have to manually install your database (default supported database is MySQL / MariaDB).\n\n\nSUFIA can run on any OS that supports JVM, however currently the supported platforms are Linux and Windows only.\n\n\nInstallation of SUFIA Standalone Package\n\n\n\n\n\n\nInstall Java JDK and MySQL\n\n\nDepending on your operating system (OS), you need to download and install JDK and MySQL\n\n\n\n\nJDK (version 1.7+)\n\n\nMySQL (version 5.x)\n\n\n\n\n\n\nTip\n\n\nIf you're using Ubuntu, you can refer to these excellent guides:\n\n\n\n\nInstall Java with Apt-Get on Ubuntu\n\n\nInstall MySQL on Ubuntu\n\n\n\n\n\n\n\n\n\n\nUnpack (unzip) SUFIA standalone package in your preferred location.\n   The location of SUFIA package will be the value for \nSUFIA_HOME\n later.\n   \n$ \npwd\n\n/home/ubuntu\n$ unzip sufia-app.zip\n$ \ncd\n sufia-app\n$ \npwd\n\n/home/ubuntu/sufia-app\n\n\n   As the example above, our \nSUFIA_HOME\n value will be \n/home/ubuntu/sufia-app\n\n\n\n\n\n\nSetup MySQL database for SUFIA\n\n\n\n\n\n\nCreate 3 different users (with password)\n\nmysql\n \ncreate\n \nuser\n \nsufia_base_user\n \nidentified\n \nby\n \npassword\n;\n\n\nmysql\n \ncreate\n \nuser\n \nsufia_test_user\n \nidentified\n \nby\n \npassword\n;\n\n\nmysql\n \ncreate\n \nuser\n \nsufia_prod_user\n \nidentified\n \nby\n \npassword\n;\n\n\n\n\nChange the password to more secured phrase. You can use any name or password that you want, we are going\nto need these on the configuration file.\n\n\n\n\n\n\nCreate the databases and tables using script file provided.\n\n$ mysql -u root -p \n sufia-db.sql\n\n\n\n\n\n\n\nThe script will create 3 databases: \nsufia_base\n, \nsufia_test\n and \nsufia_prod\n. Grant privileges to these databases\nusing previously created user.\n\nmysql\n \ngrant\n \nall\n \nprivileges\n \non\n \nsufia_base\n.\n*\n \nto\n \nsufia_base_user\n;\n\n\nmysql\n \ngrant\n \nall\n \nprivileges\n \non\n \nsufia_test\n.\n*\n \nto\n \nsufia_test_user\n;\n\n\nmysql\n \ngrant\n \nall\n \nprivileges\n \non\n \nsufia_prod\n.\n*\n \nto\n \nsufia_prod_user\n;\n\n\nmysql\n \nflush\n \nprivileges\n;\n\n\n\n\n\n\n\n\n\n\n\n\nSet database credential for SUFIA:\n\n\n\n\nOpen context.xml file using editor.\n\n$ vim sufia-app/webapp/META-INF/context.xml\n\n\n\nChange the username and password accordingly.\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nContext\n \nantiJARLocking=\ntrue\n \npath=\n/\n\n    \nResource\n \nname=\njdbc/sufia_base\n \nauth=\nContainer\n\n        \ntype=\njavax.sql.DataSource\n\n        \nmaxActive=\n100\n \nmaxIdle=\n30\n \nmaxWait=\n10000\n\n        \nvalidationQuery=\nSELECT 1\n \ntestOnBorrow=\ntrue\n\n        \ntestWhileIdle=\ntrue\n\n\n        \nusername=\nsufia_base_user\n \npassword=\npassword\n\n\n        \ndriverClassName=\ncom.mysql.jdbc.Driver\n\n        \nurl=\njdbc:mysql://127.0.0.1:3306/sufia_base\n/\n\n    \nResource\n \nname=\njdbc/sufia_test\n \nauth=\nContainer\n\n        \ntype=\njavax.sql.DataSource\n\n        \nmaxActive=\n100\n \nmaxIdle=\n30\n \nmaxWait=\n10000\n\n        \nvalidationQuery=\nSELECT 1\n \ntestOnBorrow=\ntrue\n\n        \ntestWhileIdle=\ntrue\n\n\n        \nusername=\nsufia_test_user\n \npassword=\npassword\n\n\n        \ndriverClassName=\ncom.mysql.jdbc.Driver\n\n        \nurl=\njdbc:mysql://127.0.0.1:3306/sufia_test\n/\n\n    \nResource\n \nname=\njdbc/sufia_prod\n \nauth=\nContainer\n\n        \ntype=\njavax.sql.DataSource\n\n        \nmaxActive=\n100\n \nmaxIdle=\n30\n \nmaxWait=\n10000\n\n        \nvalidationQuery=\nSELECT 1\n \ntestOnBorrow=\ntrue\n\n        \ntestWhileIdle=\ntrue\n\n\n        \nusername=\nsufia_prod_user\n \npassword=\npassword\n\n\n        \ndriverClassName=\ncom.mysql.jdbc.Driver\n\n        \nurl=\njdbc:mysql://127.0.0.1:3306/sufia_prod\n/\n\n\n/Context\n\n\n\n\n\n\n\n\n\n\nUpdate configuration files for SUFIA_HOME location\n    \n$ vim sufia-app/webapp/WEB-INF/classes/sufia.properties\n\n\n    \nsufia.home \n=\n /home/ubuntu/sufia-app\n\n\n\n\n\nNote\n\n\nSUFIA can be set to start with DEVELOPMENT MODE or PRODUCTION MODE\n\n\nIf file \ndevelopment.properties\n is present, SUFIA will turn-on DEVELOPMENT MODE\n\n\nIf file \nproduction.properties\n is present, SUFIA will turn-on PRODUCTION MODE\n\n\n\n\n\n\n\n\nTest run SUFIA:\n    \n$ \nexport\n \nSUFIA_HOME\n=\n/home/pakcu/sufia-app\n$ chmod +x *.sh\n$ ./startup.sh\n\n\n    If everything goes well, you should see a tomcat.log file created in the home folder.\n    Check the log file and make sure the server is running successfully without any error.\n\n\nNow the server is running on default port (8080), go to your browser and open:\n\nhttp://localhost:8080\n. You should see the default SUFIA login page\n\n\n\n\n\n\nTip\n\n\nYou can now setup web server as proxy to SUFIA server e.g. nginx, apache\nYou also can setup SSL on the web server (offloading SSL from SUFIA server).\nRefer to these excellent articles:\n\n\n\n\nInstall Nginx on Ubuntu\n\n\nSecure Nginx with Let's Encrypt\n\n\nNginx Reverse Proxy\n\n\n\n\n\n\n\n\n\n\nInstall SUFIA as a service\n\n\nDepending on your OS, we provide script to install SUFIA as a service and make it auto start when you reboot the OS.\nRefer to script details on your platform.\n\n\n\n\n\n\nUpdate License Information\n\n\nFor first time login, only \nMASTER\n user is allowed to login. You will be given a default username and password for SUFIA master user. Use that for first time login.\n\n\nUpon successful login, the page will be directed to settings page. Copy the key and E-Mail it to info@webgeaz.com to request for your license key\n\n\n\nAs soon as you get your license key, update the license key field with given key and click \"\nValidate License\n\"\n\n\n\n\n\n\nNow your SUFIA application is ready. Proceed to \nAdministration\n section for setting up site information, users, roles and menus.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation-guide", 
            "text": "There are two types of packaging for SUFIA, a standalone (default package) and a WAR file. Depending on your\nrequirement, you have to choose what suits you best.  SUFIA Standalone package includes everything needed to run it as a server application, except the database.\nYou have to manually install your database (default supported database is MySQL / MariaDB).  SUFIA can run on any OS that supports JVM, however currently the supported platforms are Linux and Windows only.", 
            "title": "Installation Guide"
        }, 
        {
            "location": "/installation/#installation-of-sufia-standalone-package", 
            "text": "Install Java JDK and MySQL  Depending on your operating system (OS), you need to download and install JDK and MySQL   JDK (version 1.7+)  MySQL (version 5.x)    Tip  If you're using Ubuntu, you can refer to these excellent guides:   Install Java with Apt-Get on Ubuntu  Install MySQL on Ubuntu      Unpack (unzip) SUFIA standalone package in your preferred location.\n   The location of SUFIA package will be the value for  SUFIA_HOME  later.\n    $  pwd \n/home/ubuntu\n$ unzip sufia-app.zip\n$  cd  sufia-app\n$  pwd \n/home/ubuntu/sufia-app \n   As the example above, our  SUFIA_HOME  value will be  /home/ubuntu/sufia-app    Setup MySQL database for SUFIA    Create 3 different users (with password) mysql   create   user   sufia_base_user   identified   by   password ;  mysql   create   user   sufia_test_user   identified   by   password ;  mysql   create   user   sufia_prod_user   identified   by   password ;   Change the password to more secured phrase. You can use any name or password that you want, we are going\nto need these on the configuration file.    Create the databases and tables using script file provided. $ mysql -u root -p   sufia-db.sql    The script will create 3 databases:  sufia_base ,  sufia_test  and  sufia_prod . Grant privileges to these databases\nusing previously created user. mysql   grant   all   privileges   on   sufia_base . *   to   sufia_base_user ;  mysql   grant   all   privileges   on   sufia_test . *   to   sufia_test_user ;  mysql   grant   all   privileges   on   sufia_prod . *   to   sufia_prod_user ;  mysql   flush   privileges ;       Set database credential for SUFIA:   Open context.xml file using editor. $ vim sufia-app/webapp/META-INF/context.xml  Change the username and password accordingly. ?xml version= 1.0  encoding= UTF-8 ?  Context   antiJARLocking= true   path= / \n     Resource   name= jdbc/sufia_base   auth= Container \n         type= javax.sql.DataSource \n         maxActive= 100   maxIdle= 30   maxWait= 10000 \n         validationQuery= SELECT 1   testOnBorrow= true \n         testWhileIdle= true           username= sufia_base_user   password= password           driverClassName= com.mysql.jdbc.Driver \n         url= jdbc:mysql://127.0.0.1:3306/sufia_base / \n     Resource   name= jdbc/sufia_test   auth= Container \n         type= javax.sql.DataSource \n         maxActive= 100   maxIdle= 30   maxWait= 10000 \n         validationQuery= SELECT 1   testOnBorrow= true \n         testWhileIdle= true           username= sufia_test_user   password= password           driverClassName= com.mysql.jdbc.Driver \n         url= jdbc:mysql://127.0.0.1:3306/sufia_test / \n     Resource   name= jdbc/sufia_prod   auth= Container \n         type= javax.sql.DataSource \n         maxActive= 100   maxIdle= 30   maxWait= 10000 \n         validationQuery= SELECT 1   testOnBorrow= true \n         testWhileIdle= true           username= sufia_prod_user   password= password           driverClassName= com.mysql.jdbc.Driver \n         url= jdbc:mysql://127.0.0.1:3306/sufia_prod /  /Context      Update configuration files for SUFIA_HOME location\n     $ vim sufia-app/webapp/WEB-INF/classes/sufia.properties \n     sufia.home  =  /home/ubuntu/sufia-app   Note  SUFIA can be set to start with DEVELOPMENT MODE or PRODUCTION MODE  If file  development.properties  is present, SUFIA will turn-on DEVELOPMENT MODE  If file  production.properties  is present, SUFIA will turn-on PRODUCTION MODE     Test run SUFIA:\n     $  export   SUFIA_HOME = /home/pakcu/sufia-app\n$ chmod +x *.sh\n$ ./startup.sh \n    If everything goes well, you should see a tomcat.log file created in the home folder.\n    Check the log file and make sure the server is running successfully without any error.  Now the server is running on default port (8080), go to your browser and open: http://localhost:8080 . You should see the default SUFIA login page    Tip  You can now setup web server as proxy to SUFIA server e.g. nginx, apache\nYou also can setup SSL on the web server (offloading SSL from SUFIA server).\nRefer to these excellent articles:   Install Nginx on Ubuntu  Secure Nginx with Let's Encrypt  Nginx Reverse Proxy      Install SUFIA as a service  Depending on your OS, we provide script to install SUFIA as a service and make it auto start when you reboot the OS.\nRefer to script details on your platform.    Update License Information  For first time login, only  MASTER  user is allowed to login. You will be given a default username and password for SUFIA master user. Use that for first time login.  Upon successful login, the page will be directed to settings page. Copy the key and E-Mail it to info@webgeaz.com to request for your license key  As soon as you get your license key, update the license key field with given key and click \" Validate License \"    Now your SUFIA application is ready. Proceed to  Administration  section for setting up site information, users, roles and menus.", 
            "title": "Installation of SUFIA Standalone Package"
        }, 
        {
            "location": "/administrator/intro/", 
            "text": "SUFIA Administration\n\n\nSUFIA Administration modules include functionalities to administer SUFIA and the application built on SUFIA. \n\n\nSome functionalities are for application development (File Manager, Settings), while others are common functions that can be used by application build on SUFIA (and SUFIA itself).\n\n\nFunctionalities like user management, role management and menu management are common for most web application. You can use these functions as-is or modify them according to your application needs (SUFIA API). By using the ready-made functions, you can speed up your application development process. \n\n\nAdministration functions require users under the category System Management.", 
            "title": "Administration"
        }, 
        {
            "location": "/administrator/intro/#sufia-administration", 
            "text": "SUFIA Administration modules include functionalities to administer SUFIA and the application built on SUFIA.   Some functionalities are for application development (File Manager, Settings), while others are common functions that can be used by application build on SUFIA (and SUFIA itself).  Functionalities like user management, role management and menu management are common for most web application. You can use these functions as-is or modify them according to your application needs (SUFIA API). By using the ready-made functions, you can speed up your application development process.   Administration functions require users under the category System Management.", 
            "title": "SUFIA Administration"
        }, 
        {
            "location": "/administrator/settings/", 
            "text": "Settings\n\n\nSystem Settings\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\nSystem Name\n\n\nName of the system\n\n\nNone\n\n\n\n\n\n\nBase URL\n\n\nURL for E-Mail forgot password and user activation URL\n\n\nNone\n\n\n\n\n\n\nUpload Logo\n\n\nLogo for top banner. Only application if you used default SUFIA UI template. Preferred height is 270px x 10px using svg format\n\n\nNone\n\n\n\n\n\n\n\n\nAdvanced Settings\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\nPassword Expiry\n\n\nTo enable password expiry policy, set value of greater than 0. In days\n\n\n0\n\n\n\n\n\n\nPrevent Use of Same Password\n\n\nPrevent usage of same password. Possible values: true/false\n\n\nfalse\n\n\n\n\n\n\nPassword Strength\n\n\nForce password strength. Possible values: normal / strong\n\n\nnormal\n\n\n\n\n\n\nWrong Password Attempt\n\n\nNumber of tries before locking user account. 0 for unlimited\n\n\n10\n\n\n\n\n\n\nEnable Password Validity\n\n\nEnable password validity feature. Possible values: true/false\n\n\nfalse\n\n\n\n\n\n\n\n\nBackup \n Restore\n\n\nSUFIA comes with built-in backup and restore mechanism. This backup includes all SUFIA databases and administrator \n developer uploaded files (see \nFile Manager\n).\n\n\n\n\nInfo\n\n\nFor a mission critical production system, you may need to use an enterprise backup \n restore tools.\nSUFIA backup \n restore is just a basic tools with limited functionalities.\n\n\n\n\nBackup\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBackup Location\n\n\nLocation for backup files. This location must be on the local server and SUFIA process must have read / write access to that folder. If you need to use location outside of the server, you must make it available from local (mount nfs, shared drive etc)\n\n\n\n\n\n\nDB User\n\n\nDatabase user. The user must have access to all three SUFIA databases (sufia_base, sufia_test \n sufia_prod)\n\n\n\n\n\n\nDB Password\n\n\nDatabase user's password\n\n\n\n\n\n\nSchedule Backup\n\n\nIf enabled, SUFIA will periodically run backup process based on next settings\n\n\n\n\n\n\nPeriod\n\n\nSchedule period: either Monthly, Weekly or Daily. For Monthly the backup process will run on every last working day of the month. For Weekly backup process will run every Friday.\n\n\n\n\n\n\nTime\n\n\nTime to start backup process. Normally for production site we set value to after midnight (e.g. 1 AM) to avoid congestion on system.\n\n\n\n\n\n\n\n\nRestore\n\n\nTo restore SUFIA into a specific snapshot, select the backup files on the list, then click \"\nRestore\n\".\n\n\n\n\nDanger\n\n\nMake sure that you backup manually (databases \n sufia-app folder) before trying to restore, just in case anything happens during the restoration process.", 
            "title": "Settings"
        }, 
        {
            "location": "/administrator/settings/#settings", 
            "text": "", 
            "title": "Settings"
        }, 
        {
            "location": "/administrator/settings/#system-settings", 
            "text": "Field  Description  Default Value      System Name  Name of the system  None    Base URL  URL for E-Mail forgot password and user activation URL  None    Upload Logo  Logo for top banner. Only application if you used default SUFIA UI template. Preferred height is 270px x 10px using svg format  None", 
            "title": "System Settings"
        }, 
        {
            "location": "/administrator/settings/#advanced-settings", 
            "text": "Field  Description  Default Value      Password Expiry  To enable password expiry policy, set value of greater than 0. In days  0    Prevent Use of Same Password  Prevent usage of same password. Possible values: true/false  false    Password Strength  Force password strength. Possible values: normal / strong  normal    Wrong Password Attempt  Number of tries before locking user account. 0 for unlimited  10    Enable Password Validity  Enable password validity feature. Possible values: true/false  false", 
            "title": "Advanced Settings"
        }, 
        {
            "location": "/administrator/settings/#backup-restore", 
            "text": "SUFIA comes with built-in backup and restore mechanism. This backup includes all SUFIA databases and administrator   developer uploaded files (see  File Manager ).   Info  For a mission critical production system, you may need to use an enterprise backup   restore tools.\nSUFIA backup   restore is just a basic tools with limited functionalities.", 
            "title": "Backup &amp; Restore"
        }, 
        {
            "location": "/administrator/settings/#backup", 
            "text": "Field  Description      Backup Location  Location for backup files. This location must be on the local server and SUFIA process must have read / write access to that folder. If you need to use location outside of the server, you must make it available from local (mount nfs, shared drive etc)    DB User  Database user. The user must have access to all three SUFIA databases (sufia_base, sufia_test   sufia_prod)    DB Password  Database user's password    Schedule Backup  If enabled, SUFIA will periodically run backup process based on next settings    Period  Schedule period: either Monthly, Weekly or Daily. For Monthly the backup process will run on every last working day of the month. For Weekly backup process will run every Friday.    Time  Time to start backup process. Normally for production site we set value to after midnight (e.g. 1 AM) to avoid congestion on system.", 
            "title": "Backup"
        }, 
        {
            "location": "/administrator/settings/#restore", 
            "text": "To restore SUFIA into a specific snapshot, select the backup files on the list, then click \" Restore \".   Danger  Make sure that you backup manually (databases   sufia-app folder) before trying to restore, just in case anything happens during the restoration process.", 
            "title": "Restore"
        }, 
        {
            "location": "/administrator/menu/", 
            "text": "Menu Management\n\n\nSUFIA menu management system is dynamic. You can add new menu, edit or delete existing menu. Every menu can be assigned with a role. By default, the menu is accessible by all. If you assigned a role to a menu, only users with the specified role can access it.\n\n\nMenu can be assigned with only one role. If the menu needs to be accessed by multiple types of users, each type of users need to have that particular role (through menu set).\n\n\nMenu Set\n\n\nMenu Set is a collection of Menu Items. It assembles Menu Items into a tree structure for easy navigation. Menu Set supports up to 3 level of menus.\n\n\nMenu Set is an important part of SUFIA application. Every user must be assigned with a Menu Set. Menu Set will determine what the user will see after successful login (after filtered by \nACL\n).\n\n\nTo create a new Menu Set, click on \"\nCreate New Menu Set\n\". You can also click on \"\nCopy Menu Set\n\" to create a Menu Set based on an existing one.\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMenu Set Name\n\n\n\n\n\n\nDashboard\n\n\nSelect Menu Item that will appear on first page after login (or click on the banner). This Menu Item will become a \"dashboard\" for the user (Optional)\n\n\n\n\n\n\n\n\n\n\nFirst Level Menu must start with a separator. You can click on the \"\nAdd Separator\n\" to add new separator. Separator is like a category of menu. It will act as the parent of groups of Menu Items.\n\n\nSecord Level Menu can be Menu Item or sub-separator. You can click on \"\nAdd Item\n\" to add Menu Item or \"\nAdd Sub-Separator\n\" to create sub-separator. Sub-separator can contains child Menu Items.\n\n\nThird Level Menu is only for Menu Item.\n\n\nSeq No\n\n\nUse Seq No to change the order of menu appearance. Menu will be sorted based on Seq No.\n\n\nMenu Item\n\n\nMenu Item is the actual menu. It contains all the details of the menu including name, url and role. To create a new Menu, click on the \"\nCreate Menu Item\n\"\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMenu ID\n\n\nID for menu. Can accept alphanumeric value.\n\n\n\n\n\n\nMenu Name\n\n\nMenu Name will appear at the menu list\n\n\n\n\n\n\nMenu Type\n\n\nSystem Program\nUser Program\nTransaction\nReport\nQuery\nData Express\n\n\n\n\n\n\nProgram Name\n\n\nOnly applicable if Menu Type is System Program or User Program. This typically a servlet name, jsp or any valid URL\n\n\n\n\n\n\nGroup\n\n\nApplicable to Menu Type Transaction, Report, Query or Data Express\n\n\n\n\n\n\nCode\n\n\nApplicable to Menu Type Transaction, Report, Query or Data Express\n\n\n\n\n\n\nRole\n\n\nRole for this menu\n\n\n\n\n\n\nSecurity Level\n\n\nRole Level (from 1 to 10)\n\n\n\n\n\n\nCheck System Enable\n\n\nIf checked, this menu will run even if system is disabled. See \nOperator Console\n\n\n\n\n\n\n\n\n* All fields are required", 
            "title": "Menu Management"
        }, 
        {
            "location": "/administrator/menu/#menu-management", 
            "text": "SUFIA menu management system is dynamic. You can add new menu, edit or delete existing menu. Every menu can be assigned with a role. By default, the menu is accessible by all. If you assigned a role to a menu, only users with the specified role can access it.  Menu can be assigned with only one role. If the menu needs to be accessed by multiple types of users, each type of users need to have that particular role (through menu set).", 
            "title": "Menu Management"
        }, 
        {
            "location": "/administrator/menu/#menu-set", 
            "text": "Menu Set is a collection of Menu Items. It assembles Menu Items into a tree structure for easy navigation. Menu Set supports up to 3 level of menus.  Menu Set is an important part of SUFIA application. Every user must be assigned with a Menu Set. Menu Set will determine what the user will see after successful login (after filtered by  ACL ).  To create a new Menu Set, click on \" Create New Menu Set \". You can also click on \" Copy Menu Set \" to create a Menu Set based on an existing one.     Field  Description      Name  Menu Set Name    Dashboard  Select Menu Item that will appear on first page after login (or click on the banner). This Menu Item will become a \"dashboard\" for the user (Optional)      First Level Menu must start with a separator. You can click on the \" Add Separator \" to add new separator. Separator is like a category of menu. It will act as the parent of groups of Menu Items.  Secord Level Menu can be Menu Item or sub-separator. You can click on \" Add Item \" to add Menu Item or \" Add Sub-Separator \" to create sub-separator. Sub-separator can contains child Menu Items.  Third Level Menu is only for Menu Item.", 
            "title": "Menu Set"
        }, 
        {
            "location": "/administrator/menu/#seq-no", 
            "text": "Use Seq No to change the order of menu appearance. Menu will be sorted based on Seq No.", 
            "title": "Seq No"
        }, 
        {
            "location": "/administrator/menu/#menu-item", 
            "text": "Menu Item is the actual menu. It contains all the details of the menu including name, url and role. To create a new Menu, click on the \" Create Menu Item \"     Field  Description      Menu ID  ID for menu. Can accept alphanumeric value.    Menu Name  Menu Name will appear at the menu list    Menu Type  System Program User Program Transaction Report Query Data Express    Program Name  Only applicable if Menu Type is System Program or User Program. This typically a servlet name, jsp or any valid URL    Group  Applicable to Menu Type Transaction, Report, Query or Data Express    Code  Applicable to Menu Type Transaction, Report, Query or Data Express    Role  Role for this menu    Security Level  Role Level (from 1 to 10)    Check System Enable  If checked, this menu will run even if system is disabled. See  Operator Console     * All fields are required", 
            "title": "Menu Item"
        }, 
        {
            "location": "/administrator/user/", 
            "text": "User Management\n\n\nUser is the core component of SUFIA. SUFIA concept of access control and dual environment depends on the settings of User, Menu and Role / Level. These 3 components control how the user access and use SUFIA.\n\n\nEvery user accessing SUFIA must have a User record (except for \nPublic\n Transaction). An application built on top of SUFIA can have its own user table but it must be tied to SUFIA User (see \nCustomize User\n for details). \n\n\nOnly User with active status can login to the system. By default a new User status is In-active. Upon clicking the activation link, the User status will be activated.\n\n\nSUFIA administrator can create new user, edit user, delete user, change user password (Reset Password) and activate / deactivate user. \n\n\nCreate New\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nExtra\n\n\n\n\n\n\n\n\n\n\nLogin ID\n\n\nLogin ID for User\n\n\nMandatory\n\n\n\n\n\n\nE-Mail\n\n\nE-Mail address for user. Must be a valid E-Mail address because SUFIA will E-Mail the auto generated password and activation link\n\n\nMandatory\n\n\n\n\n\n\nName\n\n\nName for User\n\n\nMandatory\n\n\n\n\n\n\nSurname\n\n\nSurname for User\n\n\nOptional\n\n\n\n\n\n\nDate of Birth\n\n\nDate of Birth\n\n\nOptional\n\n\n\n\n\n\nPhone\n\n\nPhone number\n\n\nOptional\n\n\n\n\n\n\nCorp Type\n\n\nEither \nINTERNAL\n, \nPARTNER\n or \nCUSTOMER\n\n\nOptional. This value can be used to further categorize users\n\n\n\n\n\n\nCorp Code\n\n\n20 characters to further categorize users\n\n\nOptional. This value can be used as Company / Department\n\n\n\n\n\n\nSub Corp Code\n\n\n20 characters to further categorize users\n\n\nOptional. This value can be used as Department / Unit\n\n\n\n\n\n\nDesignation\n\n\nUser designation\n\n\nOptional\n\n\n\n\n\n\nAccess Level\n\n\nAccess Level for User from 1-10. Works together with Role. Given the same Role, you can further distinguish the level (e.g. Role Clerk with Level 1 for counter and Level 2 for supervisor)\n\n\nMandatory\n\n\n\n\n\n\nCategory\n\n\nSUFIA User Category. This category is tied with User Mode. For category: \n1. SYSTEM MANAGEMENT - Only Mode PRODUCTION \n2. APPLICATION MANAGEMENT - Only Mode TESTING \n3. END USER - Can choose between TESTING and PRODUCTION mode\n\n\nMandatory\n\n\n\n\n\n\nUser Type\n\n\nEither \nHUMAN\n or \nVIRTUAL\n\n\nVIRTUAL user is for integration, batch or remote access. Can't login from SUFIA web application\n\n\n\n\n\n\nUser Mode\n\n\nUser Mode for user, either \n1. TESTING \n2. PRODUCTION\n\n\nDefault database for TESTING is \nsufia_test\n and for PRODUCTION is \nsufia_prod\n\n\n\n\n\n\nRole Set\n\n\nRole Set for User. See \nRole\n for details\n\n\nMandatory\n\n\n\n\n\n\nMenu Set\n\n\nMenu Set for User. See \nManu Management\n for details\n\n\nMandatory\n\n\n\n\n\n\nMobile Menu Set\n\n\nMenu Set for SUFIA mobile apps\n\n\nOptional\n\n\n\n\n\n\nShare Group\n\n\nShare Group for sharing documents. See \nFile Manager\n\n\nOptional\n\n\n\n\n\n\n\n\nClone User\n\n\nCreate New User with same details as selected user.\n\n\nExport User\n\n\nExport selected users as CSV file.\n\n\nImport User\n\n\nImport Users into SUFIA from CSV file. The format must follow Export User CSV file.", 
            "title": "User Management"
        }, 
        {
            "location": "/administrator/user/#user-management", 
            "text": "User is the core component of SUFIA. SUFIA concept of access control and dual environment depends on the settings of User, Menu and Role / Level. These 3 components control how the user access and use SUFIA.  Every user accessing SUFIA must have a User record (except for  Public  Transaction). An application built on top of SUFIA can have its own user table but it must be tied to SUFIA User (see  Customize User  for details).   Only User with active status can login to the system. By default a new User status is In-active. Upon clicking the activation link, the User status will be activated.  SUFIA administrator can create new user, edit user, delete user, change user password (Reset Password) and activate / deactivate user.", 
            "title": "User Management"
        }, 
        {
            "location": "/administrator/user/#create-new", 
            "text": "Field  Description  Extra      Login ID  Login ID for User  Mandatory    E-Mail  E-Mail address for user. Must be a valid E-Mail address because SUFIA will E-Mail the auto generated password and activation link  Mandatory    Name  Name for User  Mandatory    Surname  Surname for User  Optional    Date of Birth  Date of Birth  Optional    Phone  Phone number  Optional    Corp Type  Either  INTERNAL ,  PARTNER  or  CUSTOMER  Optional. This value can be used to further categorize users    Corp Code  20 characters to further categorize users  Optional. This value can be used as Company / Department    Sub Corp Code  20 characters to further categorize users  Optional. This value can be used as Department / Unit    Designation  User designation  Optional    Access Level  Access Level for User from 1-10. Works together with Role. Given the same Role, you can further distinguish the level (e.g. Role Clerk with Level 1 for counter and Level 2 for supervisor)  Mandatory    Category  SUFIA User Category. This category is tied with User Mode. For category:  1. SYSTEM MANAGEMENT - Only Mode PRODUCTION  2. APPLICATION MANAGEMENT - Only Mode TESTING  3. END USER - Can choose between TESTING and PRODUCTION mode  Mandatory    User Type  Either  HUMAN  or  VIRTUAL  VIRTUAL user is for integration, batch or remote access. Can't login from SUFIA web application    User Mode  User Mode for user, either  1. TESTING  2. PRODUCTION  Default database for TESTING is  sufia_test  and for PRODUCTION is  sufia_prod    Role Set  Role Set for User. See  Role  for details  Mandatory    Menu Set  Menu Set for User. See  Manu Management  for details  Mandatory    Mobile Menu Set  Menu Set for SUFIA mobile apps  Optional    Share Group  Share Group for sharing documents. See  File Manager  Optional", 
            "title": "Create New"
        }, 
        {
            "location": "/administrator/user/#clone-user", 
            "text": "Create New User with same details as selected user.", 
            "title": "Clone User"
        }, 
        {
            "location": "/administrator/user/#export-user", 
            "text": "Export selected users as CSV file.", 
            "title": "Export User"
        }, 
        {
            "location": "/administrator/user/#import-user", 
            "text": "Import Users into SUFIA from CSV file. The format must follow Export User CSV file.", 
            "title": "Import User"
        }, 
        {
            "location": "/administrator/role/", 
            "text": "Role Management\n\n\nRole is an important part of any web application. SUFIA comes built-in with Role Management system. Application built on top of SUFIA can just use the existing Role Management. SUFIA Roles is an independent solution, it is not integrated with JEE Security Roles.\n\n\nRole Set\n\n\nSimilar to Menu Set concept, Role Set is a collection of role(s). Every user will be assigned with one Role Set. If one user has more than one Role, we can group all the roles inside one Role Set and assign the Role Set to the user.\n\n\nTo create a new Role Set click on \"\nCreate New Role Set\n\".\n\n\nRole\n\n\nSUFIA comes with predefined roles. Some of the functionalities of SUFIA embedded into a particular role. For example, only users with role \nPROD\n are able to push Transaction into Production mode. These roles cannot be deleted.\n\n\n\n\nAPPADMIN\n        \n\n\nCODE\n\n\nDBADMIN\n\n\nDEVELOPER\n\n\nDTEST\n\n\nMASTER\n\n\nPROD\n\n\nSECADMIN\n\n\nSPEC\n\n\nSYSADMIN\n\n\nUTEST\n\n\n\n\nTo add a new Role, click on \"\nCreate Role\n\"", 
            "title": "Role Management"
        }, 
        {
            "location": "/administrator/role/#role-management", 
            "text": "Role is an important part of any web application. SUFIA comes built-in with Role Management system. Application built on top of SUFIA can just use the existing Role Management. SUFIA Roles is an independent solution, it is not integrated with JEE Security Roles.", 
            "title": "Role Management"
        }, 
        {
            "location": "/administrator/role/#role-set", 
            "text": "Similar to Menu Set concept, Role Set is a collection of role(s). Every user will be assigned with one Role Set. If one user has more than one Role, we can group all the roles inside one Role Set and assign the Role Set to the user.  To create a new Role Set click on \" Create New Role Set \".", 
            "title": "Role Set"
        }, 
        {
            "location": "/administrator/role/#role", 
            "text": "SUFIA comes with predefined roles. Some of the functionalities of SUFIA embedded into a particular role. For example, only users with role  PROD  are able to push Transaction into Production mode. These roles cannot be deleted.   APPADMIN           CODE  DBADMIN  DEVELOPER  DTEST  MASTER  PROD  SECADMIN  SPEC  SYSADMIN  UTEST   To add a new Role, click on \" Create Role \"", 
            "title": "Role"
        }, 
        {
            "location": "/administrator/acl/", 
            "text": "Access Control List (ACL)\n\n\nACL List\n\n\nFor a more fine-grained access control, apart from the control mechanism from Menu's role and level, you can set a specific Role and Level for every Transaction, Query and Data (TQD). This will make sure that only users with specified Role and Level are able to access it.\n\n\nThis configuration is optional but for certain circumstances it is a must (especially for critical \n confidential TQD). \n\n\nThe rules for checking are first it will compare the role of the User with role of the TQD. If they match, it will check the Level of User with the Level of TQD. If it is equal or greater than the Level of TQD, access will be granted.\n\n\nTo create a new ACL click on \"\nAdd New\n\" and select the Transaction, Role and Level.\n\n\nThis function sometimes can be assigned to Developer since it is highly dependent on application design.\n\n\nPublic Access\n\n\nTransaction can be set as public. If enabled, SUFIA ACL filter will not check for user authentication \n authorization for the particular Transaction.\n\n\nThis is useful for homepage, enquiry page \n general info.", 
            "title": "Access Control"
        }, 
        {
            "location": "/administrator/acl/#access-control-list-acl", 
            "text": "", 
            "title": "Access Control List (ACL)"
        }, 
        {
            "location": "/administrator/acl/#acl-list", 
            "text": "For a more fine-grained access control, apart from the control mechanism from Menu's role and level, you can set a specific Role and Level for every Transaction, Query and Data (TQD). This will make sure that only users with specified Role and Level are able to access it.  This configuration is optional but for certain circumstances it is a must (especially for critical   confidential TQD).   The rules for checking are first it will compare the role of the User with role of the TQD. If they match, it will check the Level of User with the Level of TQD. If it is equal or greater than the Level of TQD, access will be granted.  To create a new ACL click on \" Add New \" and select the Transaction, Role and Level.  This function sometimes can be assigned to Developer since it is highly dependent on application design.", 
            "title": "ACL List"
        }, 
        {
            "location": "/administrator/acl/#public-access", 
            "text": "Transaction can be set as public. If enabled, SUFIA ACL filter will not check for user authentication   authorization for the particular Transaction.  This is useful for homepage, enquiry page   general info.", 
            "title": "Public Access"
        }, 
        {
            "location": "/administrator/file-manager/", 
            "text": "File Manager\n\n\nFile Manager is a utility tool to extend the functionality of SUFIA, add additional asset files and a simple file storage \n collaboration.\n\n\nSUFIA Administrator and Developer can upload, delete files based on File Type. \n\n\n\n\nPYTHON\n\n\n\n\nUse this File Type to upload python files (Jython). By using this, Developer has the flexibility to add customized codes. To execute the python file, just create a new Menu Item with type \nUser Program\n and put the file name at the Program Name field.\n\n\nRefer to \nUser Program\n for more details.\n\n\nFile uploaded location: \nsufia-app/webapp/WEB-INF/python\n\n\n\n\nGROOVY\n\n\n\n\nUse this File Type to upload groovy files. By using this, Developer has the flexibility to add customized codes. To execute the groovy file, just create a new Menu Item with type \nUser Program\n and put the file name at the Program Name field.\n\n\nThe difference between groovy file and python file is that groovy is using GroovyServlet. Refer to \nUser Program\n for more details.\n\n\nFile uploaded location: \nsufia-app/webapp/WEB-INF/groovy\n\n\n\n\nPAGE\n\n\n\n\nUse this File Type to upload static HTML files. HTML file name must be in the form of \n.html or \n.htm.\n\n\nBy convention, if you upload file named \nindex.html\n it will become the main page. This is useful if you want to override default login page.\n\n\nFile uploaded location: \nsufia-app/webapp/WEB-INF/usr_pgm/PAGE\n\n\n\n\nLIBRARY\n\n\n\n\nUse this File Type to add new library (\nJAR\n file) to SUFIA. This is useful if you want to add or extends any functionality to SUFIA.\n\n\nSUFIA comes with a number of JAR files, some of which are utility libraries which may be useful for your application development. Developer are free to use all these libraries. However, if certain functionalities that you want are not available, you can add your own Java code (package it as JAR) - or any other 3\nrd\n party library - and add it to SUFIA.\n\n\nJAR file uploaded will be prefixes with \nusr__\n.\n\n\nFile uploaded location: \nsufia-app/webapp/WEB-INF/lib\n\n\n\n\nIMAGES\n\n\n\n\nUse this File Type to add image files. This file can be linked directly on Transaction's Form or Output.\n\n\nFile uploaded location: \nsufia-app/webapp/usr_img\n\n\n\n\nCSS\n\n\n\n\nUse this File Type to add asset files (CSS or Javascript). This file can be linked directly on Transaction's Form or Output.\n\n\nCurrently, there are two ways to add an asset file to your application. You can either link directly from CDN, or upload it here and link locally from SUFIA server.\n\n\nFile uploaded location: \nsufia-app/webapp/usr_css\n\n\n\n\nDATA_LOADER\n\n\n\n\nThis is the location for Data Loader files. Refer to \nData Loader\n for more details.", 
            "title": "File Manager"
        }, 
        {
            "location": "/administrator/file-manager/#file-manager", 
            "text": "File Manager is a utility tool to extend the functionality of SUFIA, add additional asset files and a simple file storage   collaboration.  SUFIA Administrator and Developer can upload, delete files based on File Type.    PYTHON   Use this File Type to upload python files (Jython). By using this, Developer has the flexibility to add customized codes. To execute the python file, just create a new Menu Item with type  User Program  and put the file name at the Program Name field.  Refer to  User Program  for more details.  File uploaded location:  sufia-app/webapp/WEB-INF/python   GROOVY   Use this File Type to upload groovy files. By using this, Developer has the flexibility to add customized codes. To execute the groovy file, just create a new Menu Item with type  User Program  and put the file name at the Program Name field.  The difference between groovy file and python file is that groovy is using GroovyServlet. Refer to  User Program  for more details.  File uploaded location:  sufia-app/webapp/WEB-INF/groovy   PAGE   Use this File Type to upload static HTML files. HTML file name must be in the form of  .html or  .htm.  By convention, if you upload file named  index.html  it will become the main page. This is useful if you want to override default login page.  File uploaded location:  sufia-app/webapp/WEB-INF/usr_pgm/PAGE   LIBRARY   Use this File Type to add new library ( JAR  file) to SUFIA. This is useful if you want to add or extends any functionality to SUFIA.  SUFIA comes with a number of JAR files, some of which are utility libraries which may be useful for your application development. Developer are free to use all these libraries. However, if certain functionalities that you want are not available, you can add your own Java code (package it as JAR) - or any other 3 rd  party library - and add it to SUFIA.  JAR file uploaded will be prefixes with  usr__ .  File uploaded location:  sufia-app/webapp/WEB-INF/lib   IMAGES   Use this File Type to add image files. This file can be linked directly on Transaction's Form or Output.  File uploaded location:  sufia-app/webapp/usr_img   CSS   Use this File Type to add asset files (CSS or Javascript). This file can be linked directly on Transaction's Form or Output.  Currently, there are two ways to add an asset file to your application. You can either link directly from CDN, or upload it here and link locally from SUFIA server.  File uploaded location:  sufia-app/webapp/usr_css   DATA_LOADER   This is the location for Data Loader files. Refer to  Data Loader  for more details.", 
            "title": "File Manager"
        }, 
        {
            "location": "/developer/intro/", 
            "text": "Introduction to Development\n\n\nSUFIA was built as a framework to ease the web application development process. There are three main components for application development:\n\n\n\n\nData\n - a CRUD (Create, Retrieve, Update, Delete) generator\n\n\nQuery\n - a record listing generator\n\n\nTransaction\n - full-scale application creator\n\n\n\n\nFor a quick and simple \"record management\" application, using Data and Query are sufficient. Since all the codes are generated, basically zero coding is required.\n\n\nHowever, for most applications, the requirements are not simple, thus requiring the Developer to have more control on the preparation of the view, validation, back end processing and the flow of the program. For this, Transaction is the answer.\n\n\nSo most of the time, Development time is spent on Transaction, and Data and Query act as useful quick additions, especially when dealing with simple CRUD operation like for reference tables.\n\n\nThere are two approaches in application development using SUFIA. First to use everything SUFIA has to offer, including user, role, menu, access control etc. and extends it with application specific requirement. Second, is to build everything and just use SUFIA as a platform. SUFIA supports both approaches as well as a hybrid approach between the two. Note that sometimes we use the term \"\napplication\n\" interchangeably because SUFIA itself \nis\n an application.\n\n\nGroup and Code\n\n\nBefore you start developing an application, you must establish a Group. A Group is like a module, where you can put together Transactions, Data, Queries. This will make your application structured and modular for easy maintenance.\n\n\nApplications can be categorized into logical groups, based on user requirements or nature of business. As an example, a HR application can have a group of HR Admin, Employee and Supervisor.\n\n\nEvery Transaction, Query or Data must have a code. A combination of group and code will be formed as a unique ID and URL. Everything inside SUFIA will work according to this Group and Code.\n\n\nSoftware Development Lifecycle (SDLC)\n\n\n\n\nSUFIA support traditional and \n\"agile-like\"\n software development methodology. Transaction Deployment Module provides functionality from writing specification, coding, testing until deployment. This feature works together with SUFIA's pre-defined Role.\n\n\nDevelopment Methodology\n\n\nSUFIA works best with bottom-up approach. It means we start with database design (ER Diagram). While we are creating\nour tables, SUFIA at the same time will auto-generate Model class for every table.\n\n\nThen we start designing our application based on the functionality and how the functions linked logically to complete\na process flow.\n\n\nAfter that, we can implement every function using the best suited tools, either Transaction, Data or Query.\n\n\nSUFIA's Transaction is discrete by design, which means we can implement the functions in parallel and each is sufficient by itself.\nThis is in line with \"Single Responsibility Principle\" where the Transaction can be tested in isolation and if anything happens to it, it will not affect another Transaction.", 
            "title": "Development"
        }, 
        {
            "location": "/developer/intro/#introduction-to-development", 
            "text": "SUFIA was built as a framework to ease the web application development process. There are three main components for application development:   Data  - a CRUD (Create, Retrieve, Update, Delete) generator  Query  - a record listing generator  Transaction  - full-scale application creator   For a quick and simple \"record management\" application, using Data and Query are sufficient. Since all the codes are generated, basically zero coding is required.  However, for most applications, the requirements are not simple, thus requiring the Developer to have more control on the preparation of the view, validation, back end processing and the flow of the program. For this, Transaction is the answer.  So most of the time, Development time is spent on Transaction, and Data and Query act as useful quick additions, especially when dealing with simple CRUD operation like for reference tables.  There are two approaches in application development using SUFIA. First to use everything SUFIA has to offer, including user, role, menu, access control etc. and extends it with application specific requirement. Second, is to build everything and just use SUFIA as a platform. SUFIA supports both approaches as well as a hybrid approach between the two. Note that sometimes we use the term \" application \" interchangeably because SUFIA itself  is  an application.", 
            "title": "Introduction to Development"
        }, 
        {
            "location": "/developer/intro/#group-and-code", 
            "text": "Before you start developing an application, you must establish a Group. A Group is like a module, where you can put together Transactions, Data, Queries. This will make your application structured and modular for easy maintenance.  Applications can be categorized into logical groups, based on user requirements or nature of business. As an example, a HR application can have a group of HR Admin, Employee and Supervisor.  Every Transaction, Query or Data must have a code. A combination of group and code will be formed as a unique ID and URL. Everything inside SUFIA will work according to this Group and Code.", 
            "title": "Group and Code"
        }, 
        {
            "location": "/developer/intro/#software-development-lifecycle-sdlc", 
            "text": "SUFIA support traditional and  \"agile-like\"  software development methodology. Transaction Deployment Module provides functionality from writing specification, coding, testing until deployment. This feature works together with SUFIA's pre-defined Role.", 
            "title": "Software Development Lifecycle (SDLC)"
        }, 
        {
            "location": "/developer/intro/#development-methodology", 
            "text": "SUFIA works best with bottom-up approach. It means we start with database design (ER Diagram). While we are creating\nour tables, SUFIA at the same time will auto-generate Model class for every table.  Then we start designing our application based on the functionality and how the functions linked logically to complete\na process flow.  After that, we can implement every function using the best suited tools, either Transaction, Data or Query.  SUFIA's Transaction is discrete by design, which means we can implement the functions in parallel and each is sufficient by itself.\nThis is in line with \"Single Responsibility Principle\" where the Transaction can be tested in isolation and if anything happens to it, it will not affect another Transaction.", 
            "title": "Development Methodology"
        }, 
        {
            "location": "/developer/database/", 
            "text": "Database Management\n\n\nDatabase Management provides functions to manipulate the database. You can view table structure, table data, create new table, modify existing table and delete tables. You can also generate CRUD functions (Data \n Query) for table.\n\n\nCreate Table\n\n\nSUFIA provides a utility to create tables similar to any Database Manager tools. The setup is quite standard and straight forward, however certain aspects have been customized to suit SUFIA usage. \n\n\n\n\n\n\nData Type - This is as standard SUFIA data type that is used in Transaction, Data and Query. Refer the \nconversion table\n.\n\n\n\n\n\n\nBLOB - This is a type for storage of file, images, etc. uploaded. It will create 3 columns:\u200b\n\n\n\n\nColumn to store the bytes\n\n\nColumn to store file name\n\n\nColumn to store file type\n\n\n\n\nExample:\n If column name is \"resume\", 3 columns will be created:  \nresume\n, \nresume_fn\n and \nresume_ft\n \n\n\n\n\n\n\n\n\n\n\nSUFIA Convention\n\n\nEvery table must have a primary key column named \nid\n. A Model class representing\nthe table will be generated with class name same with table name (ORM)\ne.g. table \nperson\n will have a correspondent class \nPerson\n\n\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nTable Name\n\n\nName of the table (max 64 characters)\n\n\nhr_employee\n\n\n\n\n\n\nComment (Table)\n\n\nUseful description for table\n\n\nEmployee Personal Record\n\n\n\n\n\n\nField\n\n\nColumn Name (max 64 characters)\n\n\nstaff_no\n\n\n\n\n\n\nType\n\n\nData Type (Refer Below for type conversion)\n\n\nTEXT\n\n\n\n\n\n\nLength\n\n\nLength of data in integer (only applicable to type TEXT)\n\n\n20\n\n\n\n\n\n\nNull\n\n\nColumn can accept NULL value or not\n\n\nNOT NULL\n\n\n\n\n\n\nDefault\n\n\nDefault value (if NULL value inserted)\n\n\n\n\n\n\n\n\nAuto Inc\n\n\nColumn is auto increment or not (only applicable to type NUMBER and key PRIMARY)\n\n\n\n\n\n\n\n\nKey\n\n\nColumn is either PRIMARY (primary key), UNIQUE (unique index), INDEX (normal index) or NONE (normal column)\n\n\n\n\n\n\n\n\nComment\n\n\nUseful description of column\n\n\nStaff No\n\n\n\n\n\n\n\n\n\n\nBest Practice\n\n\nUse prefix for table name for easy maintenance. Normally the group name is a good\ncandidate for prefix name e.g. prefix HR Group's table with \nhr_\n\n\n\n\nSUFIA build-in Data Type Conversion Table\n\n\n\n\n\n\n\n\nSUFIA Type\n\n\nMySQL Type\n\n\nJava Type\n\n\n\n\n\n\n\n\n\n\nTEXT\n\n\nVARCHAR(length)\n \nlength as defined\n \nif length \n 9999 Type \nTEXT\n will be used\n\n\nString\n\n\n\n\n\n\nNUMBER\n\n\nINTEGER\n\n\nInteger\n\n\n\n\n\n\nDECIMAL\n\n\nDECIMAL(18,5)\n\n\nBigDecimal\n\n\n\n\n\n\nDATETIME\n\n\nDATETIME\n\n\nDate\n\n\n\n\n\n\nDATE\n\n\nDATE\n\n\nDate\n\n\n\n\n\n\nTIME\n\n\nTIME\n\n\nDate\n\n\n\n\n\n\nCURRENCY\n\n\nDECIMAL(18,2)\n\n\nBigDecimal\n\n\n\n\n\n\nTRUE_FALSE\n\n\nBIT\n\n\nBoolean\n\n\n\n\n\n\nBLOB\n\n\nMEDIUMBLOB\n\n\nbyte[]\n\n\n\n\n\n\nLONGTEXT\n\n\nMEDIUMTEXT\n\n\nString\n\n\n\n\n\n\n\n\nCreate View\n\n\nTo create view select table and column for view. If you select more than one table, SUFIA will figure out how to join the tables based on the foreign key relationship. So, make sure the foreign key is defined properly before joining two tables on view.\n\n\nYou can also verify the sql code generated to create the view. If needed you can modify it to suit your requirement.\n\n\nGenerate CRUD\n\n\nTo Generate CRUD functions, click on the \"Generate CRUD\" link as below:\n\n\n\n\nAfter filling in the Title, Group and Page Template (Optional), it will generate a Query, Create Data, Edit Data and Delete Data functions.\n\n\n\n\nAd-hoc query\n\n\nFor ad-hoc query, click on \"Database Query\" and you can use any valid sql queries. This function only works at DEVELOPMENT database.\n\n\nModel\n\n\nEvery table and view will be generated to Model classes. These classes can be used on Transaction and Data. More details and examples on Model will be covered in Transaction section.", 
            "title": "Database"
        }, 
        {
            "location": "/developer/database/#database-management", 
            "text": "Database Management provides functions to manipulate the database. You can view table structure, table data, create new table, modify existing table and delete tables. You can also generate CRUD functions (Data   Query) for table.", 
            "title": "Database Management"
        }, 
        {
            "location": "/developer/database/#create-table", 
            "text": "SUFIA provides a utility to create tables similar to any Database Manager tools. The setup is quite standard and straight forward, however certain aspects have been customized to suit SUFIA usage.     Data Type - This is as standard SUFIA data type that is used in Transaction, Data and Query. Refer the  conversion table .    BLOB - This is a type for storage of file, images, etc. uploaded. It will create 3 columns:\u200b   Column to store the bytes  Column to store file name  Column to store file type   Example:  If column name is \"resume\", 3 columns will be created:   resume ,  resume_fn  and  resume_ft        SUFIA Convention  Every table must have a primary key column named  id . A Model class representing\nthe table will be generated with class name same with table name (ORM)\ne.g. table  person  will have a correspondent class  Person      Field  Description  Example      Table Name  Name of the table (max 64 characters)  hr_employee    Comment (Table)  Useful description for table  Employee Personal Record    Field  Column Name (max 64 characters)  staff_no    Type  Data Type (Refer Below for type conversion)  TEXT    Length  Length of data in integer (only applicable to type TEXT)  20    Null  Column can accept NULL value or not  NOT NULL    Default  Default value (if NULL value inserted)     Auto Inc  Column is auto increment or not (only applicable to type NUMBER and key PRIMARY)     Key  Column is either PRIMARY (primary key), UNIQUE (unique index), INDEX (normal index) or NONE (normal column)     Comment  Useful description of column  Staff No      Best Practice  Use prefix for table name for easy maintenance. Normally the group name is a good\ncandidate for prefix name e.g. prefix HR Group's table with  hr_", 
            "title": "Create Table"
        }, 
        {
            "location": "/developer/database/#sufia-build-in-data-type-conversion-table", 
            "text": "SUFIA Type  MySQL Type  Java Type      TEXT  VARCHAR(length)   length as defined   if length   9999 Type  TEXT  will be used  String    NUMBER  INTEGER  Integer    DECIMAL  DECIMAL(18,5)  BigDecimal    DATETIME  DATETIME  Date    DATE  DATE  Date    TIME  TIME  Date    CURRENCY  DECIMAL(18,2)  BigDecimal    TRUE_FALSE  BIT  Boolean    BLOB  MEDIUMBLOB  byte[]    LONGTEXT  MEDIUMTEXT  String", 
            "title": "SUFIA build-in Data Type Conversion Table"
        }, 
        {
            "location": "/developer/database/#create-view", 
            "text": "To create view select table and column for view. If you select more than one table, SUFIA will figure out how to join the tables based on the foreign key relationship. So, make sure the foreign key is defined properly before joining two tables on view.  You can also verify the sql code generated to create the view. If needed you can modify it to suit your requirement.", 
            "title": "Create View"
        }, 
        {
            "location": "/developer/database/#generate-crud", 
            "text": "To Generate CRUD functions, click on the \"Generate CRUD\" link as below:   After filling in the Title, Group and Page Template (Optional), it will generate a Query, Create Data, Edit Data and Delete Data functions.", 
            "title": "Generate CRUD"
        }, 
        {
            "location": "/developer/database/#ad-hoc-query", 
            "text": "For ad-hoc query, click on \"Database Query\" and you can use any valid sql queries. This function only works at DEVELOPMENT database.", 
            "title": "Ad-hoc query"
        }, 
        {
            "location": "/developer/database/#model", 
            "text": "Every table and view will be generated to Model classes. These classes can be used on Transaction and Data. More details and examples on Model will be covered in Transaction section.", 
            "title": "Model"
        }, 
        {
            "location": "/developer/data/", 
            "text": "Data Maintenance - A CRUD Generator\n\n\nData Maintenance is a Create, Retrieve, Update, and Delete (CRUD) Generator. Data works on database table only. You just need to select a table, the operation for that table and define columns required.\n\n\nOnly one action is allowed for one Data Maintenance . Therefore, if you want the whole CRUD functionality, you have to create four Data Maintenances. The reason for this is to allow you to segregate the permission for different Roles. For instance, maybe certain Role can \nCREATE\n or \nDELETE\n the record.\n\n\nTo create a new Data Maintenance click on \nCreate New Data Maintenance\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nGroup\n\n\nGroup\n\n\n\n\n\n\nCode\n\n\nCode\n\n\n\n\n\n\nName\n\n\nName for the Data Maintenance. Used as menu and page title.\n\n\n\n\n\n\nPage Layout\n\n\nPage Layout\n for Data Maintenance (Optional)\n\n\n\n\n\n\nAction\n\n\nAction for the Data Maintenance. Possible action is \nCREATE\n, \nUPDATE\n, \nDELETE\n, and \nINQUIRY\n\n\n\n\n\n\nSelect table\n\n\nSelect the table\n\n\n\n\n\n\n\n\nAfter selecting the table, click on button \n\n\nFor every column, tick the checkbox if you want to include the column in the action (default all columns selected).\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nExtra\n\n\n\n\n\n\n\n\n\n\nLabel\n\n\nLabel for column\n\n\nOptional\n\n\n\n\n\n\nR\n\n\nRead-Only. If selected, the column is not editable\n\n\nRequired\n\n\n\n\n\n\nU\n\n\nUpdate. If selected, the column is editable\n\n\nRequired\n\n\n\n\n\n\nSize\n\n\nSize of the input. Refer to Bootstrap column. [1-12]\n\n\nOptional\n\n\n\n\n\n\nNewline?\n\n\nIf clicked (default), the row starts on new line\n\n\nOptional\n\n\n\n\n\n\nReference\n\n\nLookup from \nReference Manager\n. If selected the field is a \nselect\n box populated with labels and values from Reference Manager\n\n\nOptional\n\n\n\n\n\n\nTable\n\n\nLookup from database table. If selected the tag is \nselect\n box populated with data from the table\n\n\nOptional\n\n\n\n\n\n\nLabel\n\n\nThe lookup table column whose record becoming a \noption\n's label\n\n\nOptional\n\n\n\n\n\n\nValue\n\n\nThe lookup table column whose record becoming a \noption\n's value\n\n\nOptional\n\n\n\n\n\n\nCSS Class\n\n\nAdditional CSS class\n\n\nOptional\n\n\n\n\n\n\nDefault Value\n\n\nProvide default value for column. To use system variables (e.g. for logged in user, date etc), use \n${\nsysdate\n}\n format. Refer to \nSystem Variables\n for more possible values.\n\n\nOptional\n\n\n\n\n\n\n\n\nAdvanced Feature\n\n\nTBD", 
            "title": "Data"
        }, 
        {
            "location": "/developer/data/#data-maintenance-a-crud-generator", 
            "text": "Data Maintenance is a Create, Retrieve, Update, and Delete (CRUD) Generator. Data works on database table only. You just need to select a table, the operation for that table and define columns required.  Only one action is allowed for one Data Maintenance . Therefore, if you want the whole CRUD functionality, you have to create four Data Maintenances. The reason for this is to allow you to segregate the permission for different Roles. For instance, maybe certain Role can  CREATE  or  DELETE  the record.  To create a new Data Maintenance click on  Create New Data Maintenance     Field  Description      Group  Group    Code  Code    Name  Name for the Data Maintenance. Used as menu and page title.    Page Layout  Page Layout  for Data Maintenance (Optional)    Action  Action for the Data Maintenance. Possible action is  CREATE ,  UPDATE ,  DELETE , and  INQUIRY    Select table  Select the table     After selecting the table, click on button   For every column, tick the checkbox if you want to include the column in the action (default all columns selected).     Field  Description  Extra      Label  Label for column  Optional    R  Read-Only. If selected, the column is not editable  Required    U  Update. If selected, the column is editable  Required    Size  Size of the input. Refer to Bootstrap column. [1-12]  Optional    Newline?  If clicked (default), the row starts on new line  Optional    Reference  Lookup from  Reference Manager . If selected the field is a  select  box populated with labels and values from Reference Manager  Optional    Table  Lookup from database table. If selected the tag is  select  box populated with data from the table  Optional    Label  The lookup table column whose record becoming a  option 's label  Optional    Value  The lookup table column whose record becoming a  option 's value  Optional    CSS Class  Additional CSS class  Optional    Default Value  Provide default value for column. To use system variables (e.g. for logged in user, date etc), use  ${ sysdate }  format. Refer to  System Variables  for more possible values.  Optional", 
            "title": "Data Maintenance - A CRUD Generator"
        }, 
        {
            "location": "/developer/data/#advanced-feature", 
            "text": "TBD", 
            "title": "Advanced Feature"
        }, 
        {
            "location": "/developer/query/", 
            "text": "Query Maker\n\n\nQuery Maker is a tool to generate a record listing page. Record listing page is a common use case in application development. Normally before user performs any action, the application lists the records. User then can search, and filter the record required. From there, User can select any action that they want to perform.\n\n\nQuery Maker works on database table as well as view. If you have any specific listing from multiple tables, you can create a table view first and use it with Query Maker.\n\n\nTo create a new Query, click on \nCreate New Query\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nGroup\n\n\nGroup\n\n\n\n\n\n\nCode\n\n\nCode\n\n\n\n\n\n\nName\n\n\nName for the Query. Used as menu and page title.\n\n\n\n\n\n\nPage Layout\n\n\nPage Layout\n for Data Maintenance (Optional)\n\n\n\n\n\n\nTable / View\n\n\nSelect the table or view\n\n\n\n\n\n\nSelectable Output List\n\n\nIf clicked, a checkbox will appear for every rows for selection\n\n\n\n\n\n\nShow Select Criteria\n\n\nIf clicked, the selection criteria (search box), will always appear\n\n\n\n\n\n\n\n\nAfter selecting the table, click on button \n\n\nFor every column, tick the checkbox if you want to include the column in the action (default all columns selected).\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nExtra\n\n\n\n\n\n\n\n\n\n\nLabel\n\n\nLabel for the column\n\n\nOptional\n\n\n\n\n\n\nFilter?\n\n\nIf clicked, column appear on selection criteria\n\n\nOptional\n\n\n\n\n\n\nRange?\n\n\nIf clicked, column is a range. Works with \nINTEGER\n and \nDATE\n column only\n\n\nOptional\n\n\n\n\n\n\nShow?\n\n\nShow or hide the column\n\n\nOptional\n\n\n\n\n\n\nDefault Value\n\n\nDefault value for column. Must include symbol. Only works with \nFilter?\n enabled. \nFor example, if you want to list records for staff with salary more than 5,000.00, you can use \n 5000\n at salary column\n\n\nOptional\n\n\n\n\n\n\nReference\n\n\nLookup value from \nReference Manager\n\n\nOptional\n\n\n\n\n\n\nTable\n\n\nLookup value from database table\n\n\nOptional\n\n\n\n\n\n\nLabel\n\n\nThe lookup table column whose record becoming a label\n\n\nOptional\n\n\n\n\n\n\nValue\n\n\nThe lookup table column whose record becoming a value\n\n\nOptional\n\n\n\n\n\n\nCSS Class\n\n\nAdditional CSS class\n\n\nOptional\n\n\n\n\n\n\n\n\nRecord Action\n\n\nYou can add action (Transaction, Data, or Query) for every record (row). For example, you may want to add a \nView Details\n button which link to a Transaction that display more details of the record.\n\n\n\n\nCommon Action\n\n\nCommon Action works with selected records (rows). If you click the \"Selectable Output List\" above, you can select each row(s) that you want and send it to selected Transaction for processing.\n\n\n\n\nLinks\n\n\nYou can add links at the bottom of the page. This is useful if you have an action (Transaction, Query of another Page) that is related to the records but not at individual (row) level. Links works with Menu.\n\n\nFor example, in a listing of Staff, you may want to add a link to Add New Staff.\n\n\n\n\nAdvanced Feature\n\n\nTBD", 
            "title": "Query"
        }, 
        {
            "location": "/developer/query/#query-maker", 
            "text": "Query Maker is a tool to generate a record listing page. Record listing page is a common use case in application development. Normally before user performs any action, the application lists the records. User then can search, and filter the record required. From there, User can select any action that they want to perform.  Query Maker works on database table as well as view. If you have any specific listing from multiple tables, you can create a table view first and use it with Query Maker.  To create a new Query, click on  Create New Query     Field  Description      Group  Group    Code  Code    Name  Name for the Query. Used as menu and page title.    Page Layout  Page Layout  for Data Maintenance (Optional)    Table / View  Select the table or view    Selectable Output List  If clicked, a checkbox will appear for every rows for selection    Show Select Criteria  If clicked, the selection criteria (search box), will always appear     After selecting the table, click on button   For every column, tick the checkbox if you want to include the column in the action (default all columns selected).     Field  Description  Extra      Label  Label for the column  Optional    Filter?  If clicked, column appear on selection criteria  Optional    Range?  If clicked, column is a range. Works with  INTEGER  and  DATE  column only  Optional    Show?  Show or hide the column  Optional    Default Value  Default value for column. Must include symbol. Only works with  Filter?  enabled.  For example, if you want to list records for staff with salary more than 5,000.00, you can use   5000  at salary column  Optional    Reference  Lookup value from  Reference Manager  Optional    Table  Lookup value from database table  Optional    Label  The lookup table column whose record becoming a label  Optional    Value  The lookup table column whose record becoming a value  Optional    CSS Class  Additional CSS class  Optional", 
            "title": "Query Maker"
        }, 
        {
            "location": "/developer/query/#record-action", 
            "text": "You can add action (Transaction, Data, or Query) for every record (row). For example, you may want to add a  View Details  button which link to a Transaction that display more details of the record.", 
            "title": "Record Action"
        }, 
        {
            "location": "/developer/query/#common-action", 
            "text": "Common Action works with selected records (rows). If you click the \"Selectable Output List\" above, you can select each row(s) that you want and send it to selected Transaction for processing.", 
            "title": "Common Action"
        }, 
        {
            "location": "/developer/query/#links", 
            "text": "You can add links at the bottom of the page. This is useful if you have an action (Transaction, Query of another Page) that is related to the records but not at individual (row) level. Links works with Menu.  For example, in a listing of Staff, you may want to add a link to Add New Staff.", 
            "title": "Links"
        }, 
        {
            "location": "/developer/query/#advanced-feature", 
            "text": "TBD", 
            "title": "Advanced Feature"
        }, 
        {
            "location": "/developer/transaction/", 
            "text": "Transaction\n\n\nIntroduction\n\n\nTransaction is the core of SUFIA. This is where you spend most of the development time. Unlike Data and Query, Transaction is more open and flexible. You can customize every component starting from initialization until output.\n\n\nSUFIA provides two places to write your business logic; at the Pre-Processor and Post-Processor. Currently, SUFIA supports Python, Groovy and JavaScript. Python is our language of choice (\nfirst-class citizen\n) and as you can see throughout this documentation, most of the examples are written in Python.\n\n\nThe output of Transaction is HTML. SUFIA use \nHandlebars\n (an extension to the Mustache templating language) to generate the HTML. And since the output is open, you also include JavaScript, CSS or any other language supported by the browser.\n\n\nTransaction Flow\n\n\n\n\nThe flow of transaction:\n\n\n\n\nPre-Processor - Form Template (or Form Builder)\n: Upon opening Transaction page.\n\n\nPost-Processor - Output\n: Upon submission of Transaction form.\n\n\n\n\nPre-processor receives the request parameter, executes the business process (pre-validation, record lookups, initialization, and etc.) and passes the data attributes through \noutput\n variables.\n\n\nFor Transaction display page you can choose between Form Template (free format) or Form Builder (UI generator). If you write code in the Form Template editor, display page shows Form Template. Otherwise, it uses Form Builder.\n\n\nPost-processor receives the request parameter, executes the business process (post-validation, data storage, services, and etc.) and passes the data attributes through \noutput\n variables to Output HTML. Sometimes - depending on the requirements - you just need to \nredirect\n back to the Form Template or another listing page (Transaction or Query).\n\n\nSee \nVariables\n section for more details.\n\n\nTransaction can be invoked through several ways:\n\n\n\n\n\n\nDirect Invocation (Normal Flow)\n - From URL. If the user clicks a URL from a menu or link, or type it at the browser's address bar, first it invokes the pre-processor and return the Form Template (or Form Builder) as a HTML Output. This HTML form shall have a submission button to the post-processor. If the user clicks on the submission button, it invokes the Transaction's Post-Processor and return Output page. The HTML form must explicitly add additional parameter \ninvoke\n to the action.\n\nform\n \nmethod\n=\npost\n \naction\n=\n/t/HR/staff?invoke\n\n  \nbutton\n \nname\n=\nd_action\n \nvalue\n=\nsave\nSave\n/\nbutton\n\n\n/\nform\n\n\n\n\n\n\n\n\nAJAX POST\n - Transaction can be invoked from an AJAX call. If you use GET method, it invokes the Pre-Processor and if you use the POST method, it invokes the Post-Processor. The \noutput\n content is returned to the calling function as JSON.\n  For POST method, you need additional parameter \nremote\n.\n\n$\n.\npost\n(\n/t/HR/staff?remote\n,\n \n{\nd_action\n:\nget_staffs\n},\n \nfunction\n(\ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\ndata\n);\n\n\n},\n \njson\n);\n\n\n\n\n\n\n\n\nRedirection\n\n\nInstead of following the normal flow, Transaction also support redirection. Using reserved-word \ngo_to\n you can direct the response to another URL or downloading a file (see \nUpload File\n).\n\n\nVersioning\n\n\nTransaction is stored by version. By default, version start with 1. You can increase the version from time to time as you see fit. Normally, we increase the version if the changes we made are major and should the code not work, we want to revert to the old working state.\n\n\nYou can label each version with a more descriptive word. Versioning works in a similar manner to SCM software (git, svn), but not quite as extensive. It provides basic functionality just enough for SUFIA usage.\n\n\nVersion also play a vital role in \nTransaction Deployment\n. The stage of Transaction is according to version. You can have one version in PROD and another version in CODE.\n\n\nURL\n\n\nThere is 2 ways to write Transaction URL:\n\n\n\n\nUsing SEO friendly URL:\n\n\n\n\n/t/\ngroup\n/\ncode\n\n\n\n\nUsing parameter:\n\n\n\n\ntpform?groupCode=\ngroup\ncode=\ncode\n\n\nStateless\n\n\nSUFIA Transaction is \"stateless\". There is \nno\n direct way to access HTTP session. Therefore, you need to code your Transaction with Stateless design.  The only session value provided to the attribute is \nuser\n object.\n\n\nComponents\n\n\n\n\nTransaction Properties\n\n\nEvery Transaction must have a Group and Code. The combination of Group and Code must be unique. If you did not specify a Code, SUFIA auto generates the Code. Group and Code can accept alphanumeric; based on the nature of the application, you can decide whether to use numeric or alphabetical code.\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nGroup\n\n\nGroup Code\n\n\n\n\n\n\nCode\n\n\nTransaction Code\n\n\n\n\n\n\nName\n\n\nTransaction Name\n\n\n\n\n\n\nPage Layout\n\n\nBy default Transaction uses SUFIA default template. Optionally, you can specify a different layout for the Transaction. See more details on \nPage Layout\n.\n\n\n\n\n\n\nSave\n\n\nSave Transaction\n\n\n\n\n\n\nSave as New Version\n\n\nSave Transaction and increase version number\n\n\n\n\n\n\nAuto Save\n\n\nIf clicked, Transaction will be auto-saved every 5 seconds\n\n\n\n\n\n\n\n\nSpecification\n\n\nUse this editor to write specification for the Transaction. It can be in the form of Use Case, process flow, or any other text-based explanation.\n\n\nPre-Transaction\n\n\nUse this editor to write logic before Transaction page is displayed. To access request parameter, you have to use \nrequest\n variable. To pass information (attribute) from Pre-Transaction to Form Template use \noutput\n variable.\n\n\nExample:\n\n\nif\n \nrequest\n.\ngetParameter\n(\nid\n):\n\n  \nstaff\n \n=\n \nHr_staff\n.\nfindById\n(\nrequest\n.\ngetParameter\n(\nid\n))\n\n  \noutput\n[\nstaff\n]\n \n=\n \nstaff\n\n\n\n\n\nSee \nVariables\n section for built-in variables.\n\n\nForm Template\n\n\nUse this editor to write HTML codes. To display dynamic values, you can use Handlebars language. You can mix JavaScript like normal HTML files.\n\n\nFor more advanced use cases, you can create a Single Page Application (SPA), using front-end JavaScript framework like Angular, Backbone, and others.\n\n\nFor examples, you can explore the \nHow-To\n section.\n\n\nForm Builder\n\n\nForm Builder provides a function to create form fields (HTML input). You can quickly construct a Form using Form Builder.\n\n\nTo add new field, click on the \"\nAdd Field\n\" button. Provide the details required as below:\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nLabel\n\n\nText label for field\n\n\n\n\n\n\n\n\nType\n\n\nSUFIA Type. See \nconversion table\n below\n\n\n\n\n\n\n\n\nRequired\n\n\nIf checked, validation checks for value\n\n\n\n\n\n\n\n\nMax\n\n\nInput \nmaxlength\n attribute. For maximum length\n\n\n\n\n\n\n\n\nVariable name\n\n\nVariable name for field. Variable name with input value available as variables to the Post-Processor (Required)\n\n\n\n\n\n\n\n\nHelp text\n\n\nInput help text. Displayed below the input\n\n\n\n\n\n\n\n\nDefault value\n\n\nDefault value of the input\n\n\n\n\n\n\n\n\nReference Data\n\n\nLookup from Reference Manager. If selected, the tag is \nselect\n populated with labels and values from Reference Manager\n\n\nRefer to \nReference Manager\n\n\n\n\n\n\nCSS classes\n\n\nOptional  css class for input\n\n\n\n\n\n\n\n\nColspan\n\n\nSize of the input. Refer to Bootstrap column\n\n\n1 to 12\n\n\n\n\n\n\nClear row\n\n\nIf clicked, input starts on new row\n\n\n\n\n\n\n\n\nCustom widget\n\n\nAdvanced feature to override the tag of the input\n\n\n\n\n\n\n\n\nLookup table\n\n\nLookup from database table. If selected, the tag is \nselect\n populated with data from the table\n\n\n\n\n\n\n\n\n\n\nSUFIA Data Type\n\n\n\n\n\n\n\n\nSUFIA Type\n\n\nHTML Tag\n\n\nJava Type\n\n\n\n\n\n\n\n\n\n\nText\n\n\ninput type=\ntext\n ...\n\n\nString\n\n\n\n\n\n\nText - Numeric\n\n\ninput type=\ntext\n pattern=\n[0-9]*\n ...\n\n\nInteger\n\n\n\n\n\n\nText - Alphabetic\n\n\ninput type=\ntext\n pattern=\n[A-Za-z]*\n ...\n\n\nString\n\n\n\n\n\n\nText - Alphanumeric\n\n\ninput type=\ntext\n pattern=\n[A-Za-z0-9]*\n ...\n\n\nString\n\n\n\n\n\n\nNumber\n\n\ninput type=\ntext\n pattern=\n[\\-0-9]*\n ...\n\n\nInteger\n\n\n\n\n\n\nDecimal\n\n\ninput type=\ntext\n pattern=\n^(?:\\d{0,13}\\.\\d{1,5}|\\d{0,13})$\n ...\n\n\nBigDecimal\n\n\n\n\n\n\nDatetime\n\n\ninput type=\ntext\n ...\n - datepicker\n\n\nDate\n\n\n\n\n\n\nDatetime - Date only\n\n\ninput type=\ntext\n ...\n - datepicker\n\n\nDate\n\n\n\n\n\n\nDatetime - Time only\n\n\ninput type=\ntext\n ...\n - timepicker\n\n\nDate\n\n\n\n\n\n\nCurrency\n\n\ninput type=\ntext\n pattern=\n^(?:\\d{0,13}\\.\\d{1,2}|\\d{0,13})$\n ...\n\n\nBigDecimal\n\n\n\n\n\n\nTrue False\n\n\ninput type=\ncheckbox\n ...\n\n\nBoolean\n\n\n\n\n\n\nBlob\n\n\ninput type=\nfile\n name=\nattachments[0]\n ...\n\n\nbyte[]\n\n\n\n\n\n\n\n\nPost-Processor\n\n\nUse this editor to write your business logic. You can use all the classes available in the Java Standard Library and from the external library (JARs) that are incorporated with SUFIA. You can also add your own JAR using \nFile Manager\n.\n\n\nAmong the useful classes is Guava library, Model classes, Apache Commons, and openpdf for report creation. You can find more examples on how to use existing libraries at the How-To section.\n\n\nTo pass information (attribute) from Post-Processor to Output Page use \noutput\n variable.\n\n\nIf the Transaction is being called using POST method from remote (AJAX / REST), the \noutput\n variable becomes JSON data response.\n\n\nModel\n\n\nAs previously mentioned, SUFIA generates Model class for every table \n view. The Model class is generated by ORM called \nActiveJDBC\n.\n\n\nActiveJDBC Model class provides methods to interact with database. Refer to ActiveJDBC documentation for more details, especially \nModel\n class API.\n\n\nVariables\n\n\nAll not null parameter value(s) are available as variables. If the value is more than one, the variable type is Array. If the value is null (no value inserted), it will not be available as a variable. For optional input, it is very important to check if value is null before using the variable.\n\n\nExample:\n\n\ndf\n \n=\n \nSimpleDateFormat\n(\ndd/MM/yyyy\n)\n\n\nif\n \nrequest\n.\ngetParameter\n(\ndob\n):\n\n  \nstaff\n.\nset\n(\ndob\n,\n \ndf\n.\nparse\n(\ndob\n))\n\n\n\n\n\n\n\nNote\n\n\nSUFIA v1 use prefix \ntxvar-\n for parameter name. For backward compatibility, this style is still supported.\n\n\n\n\nSee \nVariables\n section for additional build-in variables.\n\n\nSpecial handling for file input (attachment)\n:\n\n\nTo upload file, you need to add field at the Form Builder with the type Blob, even if you are using Form Template. The input file name must be in the format of \nattachments[0]\n. If you specify more than one Blob field, increase the index number for the following input (e.g. \nattachments[1]\n, \nattachments[2]\n, \nattachments[3]\n).\n\n\nPost-Processor creates 3 variables for every Blob input field. For example, if the variable name is \nfile1\n, variables created are \nfile1\n, \nfile_fn\n and \nfile_ft\n. No variables created if no file is selected for upload.\n\n\nExample:\n\n\nif\n \nfile1\n:\n\n  \nhr_staff_attachment\n \n=\n \nHr_staff_attachment\n()\n\n  \nhr_staff_attachment\n.\nset\n(\nstaff_id\n,\n \nstaff_id\n)\n\n  \nhr_staff_attachment\n.\nset\n(\nattachment\n,\n \nfile1\n)\n\n  \nhr_staff_attachment\n.\nset\n(\nattachment_fn\n,\n \nfile1_fn\n)\n\n  \nhr_staff_attachment\n.\nset\n(\nattachment_ft\n,\n \nfile1_ft\n)\n\n  \nhr_staff_attachment\n.\nsaveIt\n()\n\n\n\n\n\nSee \nUpload / Download How-To\n for more details.\n\n\nOutput\n\n\nIf there is no redirect command or remote call (AJAX), Post-Processor returns Output Page. Attributes from \noutput\n available as a context to Handlebars template. You can use the values to populate data to your output page.\n\n\nExample:\n\n\n{{\n#if\n \nsuccess\n}}\n\n  \np\nRecord Saved Successfully. \na\n \nhref\n=\n#\nClick here\n/\na\n to continue.\n/\np\n\n\n{{\nelse\n}}\n\n  \np\nRecord Not Saved. Please check your data and try again\n/\np\n\n\n{{\n/if\n}}\n\n\n\n\n\nTransaction Deployment\n\n\n\n\nThis is where the SDLC of SUFIA happens. SUFIA transaction's version is being classified into buckets. Every bucket represents a stage. Once you have completed the process at this particular stage you can move the Transaction into the next bucket. Upon entering the bucket, depending on the type of bucket, several actions happen at the backend.\n\n\nBucket is set to specific role depending on the activity. For example, SPEC bucket requires the user to have the Role \nSPEC\n. Only user with role \nPROD\n can move the Transaction to PROD bucket.\n\n\nTransaction Deployment Module works best if your organization has a specific personnel for every role. A development group that consists of Business Analyst, Developer, Tester and DevOps is a good candidate for this setup.\n\n\nFor a small organization which has only one developer to do everything, there is a shortcut method to bypass the stages. The developer user needs to have Role of \nDEVELOPER\n and \nPROD\n. The developer can move the Transaction from CODE bucket direct to PROD bucket.\n\n\nTransaction's version can be moved forward (advance to next stage) or backward (revert to previous stage).\n\n\nTransaction Editor\n\n\nTransaction Editor is SUFIA built-in IDE-like editor. The editor is implemented using ace editor. You can learn more about the shortcut, tips \n trick by reading the ace editor documentation.\n\n\nApart from the standard Snippets, SUFIA adds its own Snippets to help increase developer productivity.\n\n\nAll the Transactions are listed on the left side menu. You can search a Transaction using the search box. To open a Transaction, just click on the Transaction Name.\n\n\nGenerate Codes\n\n\nTo generate codes for INSERT data to database, click on the \n button. Drag the model name into the editor and view the generated code at the editor.\n\n\n\n\n*\n If you're using auto increment id at the database, there is no need to set the value id. Line 2 can be safely removed\n\n\nCommand-line client\n\n\nSometimes developers are more comfortable with their own editor (vim, atom, sublime). SUFIA provides a mechanism to interface to Transaction Module through SUFIA's Developer Command-Line Client. The command-line client works in a similar manner to \"\ngit\n concept\" where you have to \npull\n the Transaction from the server, make changes and \npush\n it back to the server.\n\n\nTo use SUFIA Command-Line Client, download the package and unzip it to your local folder. You can set the folder to the \nPATH\n environment if you want it to be accessible from any directory. You can invoke the client using command \nsufia\n.\n\n\nCommand\n\n\n\n\nset\n - Set the SUFIA properties. You need to run this command for the first time only (or when the details of SUFIA server changes).\n\n\n\n\nUsage\n:\n \nsufia\n \nset\n \n[-\nhost\n \nurl\n]\n \n[-\nuser\n \nlogin\n]\n \n[-\npassword\n]\n\n\n\n-\nhost\n     \nThe\n \nurl\n \nof\n \nSUFIA\n \nserver\n\n\n-\nuser\n     \nDeveloper\n \nlogin\n \nid\n\n\n-\npassword\n \nDeveloper\n \npassword\n.\n \nIf\n \nyou\n \ndon\nt\n \nprovide\n \nthe\n \npassword\n,\n\n          \nthis\n \ncommand\n \nwill\n \nask\n \nthe\n \npassword\n \ninteractively\n\n\n\nExample\n:\n\n\nsufia\n \nset\n \n-\nhost\n \nhttps\n://\ndemo\n.\nsufia\n.\nonline\n \n-\nuser\n \ndeveloper\n \n-\npassword\n\n\n\n\n\n\n\npull\n - Download the Transaction from server to local directory\n\n\n\n\nUsage\n:\n \nsufia\n \npull\n \n(--\nall\n \n|\n \n-\ng\n \ngroup\n \n-\nc\n \ncode\n)\n\n\n\n--\nall\n         \nPull\n \nall\n \nTransaction\n\n\n-\ng\n            \nTransaction\n \nGroup\n\n\n-\nc\n            \nTransaction\n \nCode\n\n\n\nExample\n:\n\n\nsufia\n \npull\n \n--\nall\n\n\nsufia\n \npull\n \n-\ng\n \nHR\n \n-\nc\n \nstaff\n\n\n\n\n\n\n\npush\n - Post Transaction changes to the server\n\n\n\n\nUsage\n:\n \nsufia\n \npush\n \n-\ng\n \ngroup\n \n-\nc\n \ncode\n \n[-\nv\n \nlabel\n \n-\nvc\n \ncomment\n]\n\n\n\n-\ng\n        \nTransaction\n \nGroup\n\n\n-\nc\n        \nTransaction\n \nCode\n\n\n-\nv\n        \nVersion\n \nLabel\n.\n \nUse\n \nthis\n \nif\n \nyou\n \nwant\n \nto\n \nsave\n \nas\n \nnew\n \nversion\n\n\n-\nvc\n       \nVersion\n \nComment\n.\n \nThe\n \ndescription\n \nof\n \nnew\n \nversion\n\n\n\nExample\n:\n\n\nsufia\n \npush\n \n-\ng\n \nHR\n \n-\nc\n \nstaff\n\n\nsufia\n \npush\n \n-\ng\n \nHR\n \n-\nc\n \nstaff\n \n-\nv\n \nfix bugs #101\n \n-\nvc\n \nfix issues with staff no\n\n\n\n\n\nREST Call (REST Web service)\n\n\nTDB.\n\n\nRefer to \nAJAX\n How-To for examples.", 
            "title": "Transaction"
        }, 
        {
            "location": "/developer/transaction/#transaction", 
            "text": "", 
            "title": "Transaction"
        }, 
        {
            "location": "/developer/transaction/#introduction", 
            "text": "Transaction is the core of SUFIA. This is where you spend most of the development time. Unlike Data and Query, Transaction is more open and flexible. You can customize every component starting from initialization until output.  SUFIA provides two places to write your business logic; at the Pre-Processor and Post-Processor. Currently, SUFIA supports Python, Groovy and JavaScript. Python is our language of choice ( first-class citizen ) and as you can see throughout this documentation, most of the examples are written in Python.  The output of Transaction is HTML. SUFIA use  Handlebars  (an extension to the Mustache templating language) to generate the HTML. And since the output is open, you also include JavaScript, CSS or any other language supported by the browser.", 
            "title": "Introduction"
        }, 
        {
            "location": "/developer/transaction/#transaction-flow", 
            "text": "The flow of transaction:   Pre-Processor - Form Template (or Form Builder) : Upon opening Transaction page.  Post-Processor - Output : Upon submission of Transaction form.   Pre-processor receives the request parameter, executes the business process (pre-validation, record lookups, initialization, and etc.) and passes the data attributes through  output  variables.  For Transaction display page you can choose between Form Template (free format) or Form Builder (UI generator). If you write code in the Form Template editor, display page shows Form Template. Otherwise, it uses Form Builder.  Post-processor receives the request parameter, executes the business process (post-validation, data storage, services, and etc.) and passes the data attributes through  output  variables to Output HTML. Sometimes - depending on the requirements - you just need to  redirect  back to the Form Template or another listing page (Transaction or Query).  See  Variables  section for more details.  Transaction can be invoked through several ways:    Direct Invocation (Normal Flow)  - From URL. If the user clicks a URL from a menu or link, or type it at the browser's address bar, first it invokes the pre-processor and return the Form Template (or Form Builder) as a HTML Output. This HTML form shall have a submission button to the post-processor. If the user clicks on the submission button, it invokes the Transaction's Post-Processor and return Output page. The HTML form must explicitly add additional parameter  invoke  to the action. form   method = post   action = /t/HR/staff?invoke \n   button   name = d_action   value = save Save / button  / form     AJAX POST  - Transaction can be invoked from an AJAX call. If you use GET method, it invokes the Pre-Processor and if you use the POST method, it invokes the Post-Processor. The  output  content is returned to the calling function as JSON.\n  For POST method, you need additional parameter  remote . $ . post ( /t/HR/staff?remote ,   { d_action : get_staffs },   function ( data )   { \n   console . log ( data );  },   json );", 
            "title": "Transaction Flow"
        }, 
        {
            "location": "/developer/transaction/#redirection", 
            "text": "Instead of following the normal flow, Transaction also support redirection. Using reserved-word  go_to  you can direct the response to another URL or downloading a file (see  Upload File ).", 
            "title": "Redirection"
        }, 
        {
            "location": "/developer/transaction/#versioning", 
            "text": "Transaction is stored by version. By default, version start with 1. You can increase the version from time to time as you see fit. Normally, we increase the version if the changes we made are major and should the code not work, we want to revert to the old working state.  You can label each version with a more descriptive word. Versioning works in a similar manner to SCM software (git, svn), but not quite as extensive. It provides basic functionality just enough for SUFIA usage.  Version also play a vital role in  Transaction Deployment . The stage of Transaction is according to version. You can have one version in PROD and another version in CODE.", 
            "title": "Versioning"
        }, 
        {
            "location": "/developer/transaction/#url", 
            "text": "There is 2 ways to write Transaction URL:   Using SEO friendly URL:   /t/ group / code   Using parameter:   tpform?groupCode= group code= code", 
            "title": "URL"
        }, 
        {
            "location": "/developer/transaction/#stateless", 
            "text": "SUFIA Transaction is \"stateless\". There is  no  direct way to access HTTP session. Therefore, you need to code your Transaction with Stateless design.  The only session value provided to the attribute is  user  object.", 
            "title": "Stateless"
        }, 
        {
            "location": "/developer/transaction/#components", 
            "text": "", 
            "title": "Components"
        }, 
        {
            "location": "/developer/transaction/#transaction-properties", 
            "text": "Every Transaction must have a Group and Code. The combination of Group and Code must be unique. If you did not specify a Code, SUFIA auto generates the Code. Group and Code can accept alphanumeric; based on the nature of the application, you can decide whether to use numeric or alphabetical code.     Field  Description      Group  Group Code    Code  Transaction Code    Name  Transaction Name    Page Layout  By default Transaction uses SUFIA default template. Optionally, you can specify a different layout for the Transaction. See more details on  Page Layout .    Save  Save Transaction    Save as New Version  Save Transaction and increase version number    Auto Save  If clicked, Transaction will be auto-saved every 5 seconds", 
            "title": "Transaction Properties"
        }, 
        {
            "location": "/developer/transaction/#specification", 
            "text": "Use this editor to write specification for the Transaction. It can be in the form of Use Case, process flow, or any other text-based explanation.", 
            "title": "Specification"
        }, 
        {
            "location": "/developer/transaction/#pre-transaction", 
            "text": "Use this editor to write logic before Transaction page is displayed. To access request parameter, you have to use  request  variable. To pass information (attribute) from Pre-Transaction to Form Template use  output  variable.  Example:  if   request . getParameter ( id ): \n   staff   =   Hr_staff . findById ( request . getParameter ( id )) \n   output [ staff ]   =   staff   See  Variables  section for built-in variables.", 
            "title": "Pre-Transaction"
        }, 
        {
            "location": "/developer/transaction/#form-template", 
            "text": "Use this editor to write HTML codes. To display dynamic values, you can use Handlebars language. You can mix JavaScript like normal HTML files.  For more advanced use cases, you can create a Single Page Application (SPA), using front-end JavaScript framework like Angular, Backbone, and others.  For examples, you can explore the  How-To  section.", 
            "title": "Form Template"
        }, 
        {
            "location": "/developer/transaction/#form-builder", 
            "text": "Form Builder provides a function to create form fields (HTML input). You can quickly construct a Form using Form Builder.  To add new field, click on the \" Add Field \" button. Provide the details required as below:     Field  Description  Example      Label  Text label for field     Type  SUFIA Type. See  conversion table  below     Required  If checked, validation checks for value     Max  Input  maxlength  attribute. For maximum length     Variable name  Variable name for field. Variable name with input value available as variables to the Post-Processor (Required)     Help text  Input help text. Displayed below the input     Default value  Default value of the input     Reference Data  Lookup from Reference Manager. If selected, the tag is  select  populated with labels and values from Reference Manager  Refer to  Reference Manager    CSS classes  Optional  css class for input     Colspan  Size of the input. Refer to Bootstrap column  1 to 12    Clear row  If clicked, input starts on new row     Custom widget  Advanced feature to override the tag of the input     Lookup table  Lookup from database table. If selected, the tag is  select  populated with data from the table", 
            "title": "Form Builder"
        }, 
        {
            "location": "/developer/transaction/#sufia-data-type", 
            "text": "SUFIA Type  HTML Tag  Java Type      Text  input type= text  ...  String    Text - Numeric  input type= text  pattern= [0-9]*  ...  Integer    Text - Alphabetic  input type= text  pattern= [A-Za-z]*  ...  String    Text - Alphanumeric  input type= text  pattern= [A-Za-z0-9]*  ...  String    Number  input type= text  pattern= [\\-0-9]*  ...  Integer    Decimal  input type= text  pattern= ^(?:\\d{0,13}\\.\\d{1,5}|\\d{0,13})$  ...  BigDecimal    Datetime  input type= text  ...  - datepicker  Date    Datetime - Date only  input type= text  ...  - datepicker  Date    Datetime - Time only  input type= text  ...  - timepicker  Date    Currency  input type= text  pattern= ^(?:\\d{0,13}\\.\\d{1,2}|\\d{0,13})$  ...  BigDecimal    True False  input type= checkbox  ...  Boolean    Blob  input type= file  name= attachments[0]  ...  byte[]", 
            "title": "SUFIA Data Type"
        }, 
        {
            "location": "/developer/transaction/#post-processor", 
            "text": "Use this editor to write your business logic. You can use all the classes available in the Java Standard Library and from the external library (JARs) that are incorporated with SUFIA. You can also add your own JAR using  File Manager .  Among the useful classes is Guava library, Model classes, Apache Commons, and openpdf for report creation. You can find more examples on how to use existing libraries at the How-To section.  To pass information (attribute) from Post-Processor to Output Page use  output  variable.  If the Transaction is being called using POST method from remote (AJAX / REST), the  output  variable becomes JSON data response.", 
            "title": "Post-Processor"
        }, 
        {
            "location": "/developer/transaction/#model", 
            "text": "As previously mentioned, SUFIA generates Model class for every table   view. The Model class is generated by ORM called  ActiveJDBC .  ActiveJDBC Model class provides methods to interact with database. Refer to ActiveJDBC documentation for more details, especially  Model  class API.", 
            "title": "Model"
        }, 
        {
            "location": "/developer/transaction/#variables", 
            "text": "All not null parameter value(s) are available as variables. If the value is more than one, the variable type is Array. If the value is null (no value inserted), it will not be available as a variable. For optional input, it is very important to check if value is null before using the variable.  Example:  df   =   SimpleDateFormat ( dd/MM/yyyy )  if   request . getParameter ( dob ): \n   staff . set ( dob ,   df . parse ( dob ))    Note  SUFIA v1 use prefix  txvar-  for parameter name. For backward compatibility, this style is still supported.   See  Variables  section for additional build-in variables.  Special handling for file input (attachment) :  To upload file, you need to add field at the Form Builder with the type Blob, even if you are using Form Template. The input file name must be in the format of  attachments[0] . If you specify more than one Blob field, increase the index number for the following input (e.g.  attachments[1] ,  attachments[2] ,  attachments[3] ).  Post-Processor creates 3 variables for every Blob input field. For example, if the variable name is  file1 , variables created are  file1 ,  file_fn  and  file_ft . No variables created if no file is selected for upload.  Example:  if   file1 : \n   hr_staff_attachment   =   Hr_staff_attachment () \n   hr_staff_attachment . set ( staff_id ,   staff_id ) \n   hr_staff_attachment . set ( attachment ,   file1 ) \n   hr_staff_attachment . set ( attachment_fn ,   file1_fn ) \n   hr_staff_attachment . set ( attachment_ft ,   file1_ft ) \n   hr_staff_attachment . saveIt ()   See  Upload / Download How-To  for more details.", 
            "title": "Variables"
        }, 
        {
            "location": "/developer/transaction/#output", 
            "text": "If there is no redirect command or remote call (AJAX), Post-Processor returns Output Page. Attributes from  output  available as a context to Handlebars template. You can use the values to populate data to your output page.  Example:  {{ #if   success }} \n   p Record Saved Successfully.  a   href = # Click here / a  to continue. / p  {{ else }} \n   p Record Not Saved. Please check your data and try again / p  {{ /if }}", 
            "title": "Output"
        }, 
        {
            "location": "/developer/transaction/#transaction-deployment", 
            "text": "This is where the SDLC of SUFIA happens. SUFIA transaction's version is being classified into buckets. Every bucket represents a stage. Once you have completed the process at this particular stage you can move the Transaction into the next bucket. Upon entering the bucket, depending on the type of bucket, several actions happen at the backend.  Bucket is set to specific role depending on the activity. For example, SPEC bucket requires the user to have the Role  SPEC . Only user with role  PROD  can move the Transaction to PROD bucket.  Transaction Deployment Module works best if your organization has a specific personnel for every role. A development group that consists of Business Analyst, Developer, Tester and DevOps is a good candidate for this setup.  For a small organization which has only one developer to do everything, there is a shortcut method to bypass the stages. The developer user needs to have Role of  DEVELOPER  and  PROD . The developer can move the Transaction from CODE bucket direct to PROD bucket.  Transaction's version can be moved forward (advance to next stage) or backward (revert to previous stage).", 
            "title": "Transaction Deployment"
        }, 
        {
            "location": "/developer/transaction/#transaction-editor", 
            "text": "Transaction Editor is SUFIA built-in IDE-like editor. The editor is implemented using ace editor. You can learn more about the shortcut, tips   trick by reading the ace editor documentation.  Apart from the standard Snippets, SUFIA adds its own Snippets to help increase developer productivity.  All the Transactions are listed on the left side menu. You can search a Transaction using the search box. To open a Transaction, just click on the Transaction Name.", 
            "title": "Transaction Editor"
        }, 
        {
            "location": "/developer/transaction/#generate-codes", 
            "text": "To generate codes for INSERT data to database, click on the   button. Drag the model name into the editor and view the generated code at the editor.   *  If you're using auto increment id at the database, there is no need to set the value id. Line 2 can be safely removed", 
            "title": "Generate Codes"
        }, 
        {
            "location": "/developer/transaction/#command-line-client", 
            "text": "Sometimes developers are more comfortable with their own editor (vim, atom, sublime). SUFIA provides a mechanism to interface to Transaction Module through SUFIA's Developer Command-Line Client. The command-line client works in a similar manner to \" git  concept\" where you have to  pull  the Transaction from the server, make changes and  push  it back to the server.  To use SUFIA Command-Line Client, download the package and unzip it to your local folder. You can set the folder to the  PATH  environment if you want it to be accessible from any directory. You can invoke the client using command  sufia .", 
            "title": "Command-line client"
        }, 
        {
            "location": "/developer/transaction/#command", 
            "text": "set  - Set the SUFIA properties. You need to run this command for the first time only (or when the details of SUFIA server changes).   Usage :   sufia   set   [- host   url ]   [- user   login ]   [- password ]  - host       The   url   of   SUFIA   server  - user       Developer   login   id  - password   Developer   password .   If   you   don t   provide   the   password , \n           this   command   will   ask   the   password   interactively  Example :  sufia   set   - host   https :// demo . sufia . online   - user   developer   - password    pull  - Download the Transaction from server to local directory   Usage :   sufia   pull   (-- all   |   - g   group   - c   code )  -- all           Pull   all   Transaction  - g              Transaction   Group  - c              Transaction   Code  Example :  sufia   pull   -- all  sufia   pull   - g   HR   - c   staff    push  - Post Transaction changes to the server   Usage :   sufia   push   - g   group   - c   code   [- v   label   - vc   comment ]  - g          Transaction   Group  - c          Transaction   Code  - v          Version   Label .   Use   this   if   you   want   to   save   as   new   version  - vc         Version   Comment .   The   description   of   new   version  Example :  sufia   push   - g   HR   - c   staff  sufia   push   - g   HR   - c   staff   - v   fix bugs #101   - vc   fix issues with staff no", 
            "title": "Command"
        }, 
        {
            "location": "/developer/transaction/#rest-call-rest-web-service", 
            "text": "TDB.  Refer to  AJAX  How-To for examples.", 
            "title": "REST Call (REST Web service)"
        }, 
        {
            "location": "/developer/services/", 
            "text": "Services - SUFIA API\n\n\nSUFIA provides API in order to access the internal classes of SUFIA. This is useful if you\nneed to use or override the default behavior of certain aspects of SUFIA e.g. login process, user creation etc. \n\n\nSUFIA API can be invoked using the \nSUFIA pre-defined variables\n: \nservice\n\n\nUserService\n\n\npackage sufia\n\n\nClass UserService\n\n\nThis class provides methods to access SUFIA's User Profile information. You can search for user profile, create or update user information.\n\n\nMethod Summary\n\n\n\n\npublic\n \nUser\n \nfindById\n(\nInteger\n \nid\n)\n\n\n\n\nParameters:\n\n\n\n\nid\n - Id of user\n\n\n\n\nReturns:\n\n\n\n\n\n\nUser\n class\n\n\n\n\n\n\npublic\n \nUser\n \nfindByLoginId\n(\nString\n \nloginId\n)\n\n\n\n\npublic\n \nUser\n \nfindByEmail\n(\nString\n \nemail\n)\n\n\npublic\n \nList\nUser\n \nfindByRole\n(\nInteger\n \nroleId\n)\n\n\npublic\n \nList\nUser\n \nfindAll\n()\n\n\npublic\n \nUser\n \nregister\n(\nUser\n \nuser\n,\n \nList\nInteger\n \nroleIds\n,\n \nInteger\n \nmenuSetId\n,\n \nString\n \nscope\n,\n \nboolean\n \nsendEmail\n)\n\n\npublic\n \nUser\n \nupdate\n(\nUser\n \nuser\n,\n \nList\nInteger\n \nroleIds\n,\n \nInteger\n \nmenuSetId\n)\n\n\npublic\n \nboolean\n \ndelete\n(\nUser\n \nuser\n)\n\n\npublic\n \nboolean\n \nactivate\n(\nUser\n \nuser\n)\n\n\npublic\n \nboolean\n \nchangePassword\n(\nUser\n \nuser\n,\n \nString\n \npassword\n)\n\n\n\n\nUser\n\n\npackage sufia\n\n\nClass User\n\n\nSUFIA User class for use in Transaction\n\n\nMethod Summary\n\n\n\n\npublic\n \nInteger\n \ngetId\n()\n\n\npublic\n \nvoid\n \nset\n(\nString\n \nfield\n,\n \nObject\n \nvalue\n)\n\n\npublic\n \nObject\n \nget\n(\nString\n \nfield\n)\n\n\n\n\nMailService\n\n\npackage sufia\n\n\nClass MailService\n\n\nThis class provides access to mail services.\n\n\nMethod Summary\n\n\n\n\npublic\n \nvoid\n \nsend\n(\nString\n \nfrom\n,\n \nString\n[]\n \nto\n,\n \nString\n[]\n \ncc\n,\n \nString\n[]\n \nbcc\n,\n \nString\n \ntitle\n,\n \nString\n \nmessage\n,\n \nString\n[]\n \nattachments\n,\n \nboolean\n \nisHtml\n)\n\n\n\n\nParameters:\n\n\n\n\nfrom\n - email address of the sender\n\n\nto\n - array of email addresses for recipient\n\n\ncc\n - array of email addresses for cc\n\n\nbcc\n - array of email addresses for bcc\n\n\ntitle\n - subject for email\n\n\nmessage\n - content of email\n\n\nattachments\n - array of attachments file path\n\n\nisHtml\n - true if content is in HTML format or false (plain text)", 
            "title": "Services"
        }, 
        {
            "location": "/developer/services/#services-sufia-api", 
            "text": "SUFIA provides API in order to access the internal classes of SUFIA. This is useful if you\nneed to use or override the default behavior of certain aspects of SUFIA e.g. login process, user creation etc.   SUFIA API can be invoked using the  SUFIA pre-defined variables :  service", 
            "title": "Services - SUFIA API"
        }, 
        {
            "location": "/developer/services/#userservice", 
            "text": "package sufia  Class UserService  This class provides methods to access SUFIA's User Profile information. You can search for user profile, create or update user information.  Method Summary   public   User   findById ( Integer   id )   Parameters:   id  - Id of user   Returns:    User  class    public   User   findByLoginId ( String   loginId )   public   User   findByEmail ( String   email )  public   List User   findByRole ( Integer   roleId )  public   List User   findAll ()  public   User   register ( User   user ,   List Integer   roleIds ,   Integer   menuSetId ,   String   scope ,   boolean   sendEmail )  public   User   update ( User   user ,   List Integer   roleIds ,   Integer   menuSetId )  public   boolean   delete ( User   user )  public   boolean   activate ( User   user )  public   boolean   changePassword ( User   user ,   String   password )", 
            "title": "UserService"
        }, 
        {
            "location": "/developer/services/#user", 
            "text": "package sufia  Class User  SUFIA User class for use in Transaction  Method Summary   public   Integer   getId ()  public   void   set ( String   field ,   Object   value )  public   Object   get ( String   field )", 
            "title": "User"
        }, 
        {
            "location": "/developer/services/#mailservice", 
            "text": "package sufia  Class MailService  This class provides access to mail services.  Method Summary   public   void   send ( String   from ,   String []   to ,   String []   cc ,   String []   bcc ,   String   title ,   String   message ,   String []   attachments ,   boolean   isHtml )   Parameters:   from  - email address of the sender  to  - array of email addresses for recipient  cc  - array of email addresses for cc  bcc  - array of email addresses for bcc  title  - subject for email  message  - content of email  attachments  - array of attachments file path  isHtml  - true if content is in HTML format or false (plain text)", 
            "title": "MailService"
        }, 
        {
            "location": "/developer/variables/", 
            "text": "SUFIA pre-defined variables\n\n\nSUFIA provides a number of pre-defined variables (\nReserved Words\n) inside the transaction codes.\nThese variables include the core classes of SUFIA, utility and helper classes.\n\n\n\n\nWarning\n\n\nBe careful not to override the variables! If you define a variable inside\nthe codes using the same name, it will override the original variable.\nThis applies to pre-defined variables, keyword and built-in functions\nused by Jython also (e.g. \nmap\n)\n\n\n\n\nList of SUFIA pre-defined variables\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nScope\n\n\nUsage Example\n\n\n\n\n\n\n\n\n\n\nservice\n\n\nHelper class to get SUFIA services. Refer to \nServices\n for more details\n\n\nPre,Backend\n\n\nuserService = service.get(\nUserService\n)\n\n\n\n\n\n\ndataSource\n\n\nInstance of \njavax.sql.DataSource\n to get connection from database\n\n\nPre,Backend\n\n\n\n\n\n\n\n\noutput\n\n\nOutput context based on \njava.util.Map\n. All the attributes set in this context will be available to UI\n\n\nPre,Backend\n\n\noutput[\nname\n] = user.getFullName()\n\n\n\n\n\n\nkey\n\n\nid\n value of the current table (model)\n\n\nPre,Backend, Output\n\n\nperson = Person.findById(key)\n\n\n\n\n\n\nuser\n\n\nSUFIA User object. Refer to SUFIA API for details.\n\n\nPre,Backend, Output\n\n\nuser.getId()\n\n\n\n\n\n\nrequest\n\n\nHTTP request parameter object based on \njava.util.Map\n. A wrapper for \nrequest.getParameterMap()\n\n\nPre,Backend\n\n\nrequest.getParameter(\ninput\n)\n\n\n\n\n\n\nwebCtx\n\n\nStripes \nActionBeanContext\n. This can be used to get the internals of Servlet API (e.g. request, response)\n\n\nPre,Backend, Output\n\n\nwebCtx.getRequest()\n\n\n\n\n\n\nctxPath\n\n\nContext path for SUFIA application. Value of \nrequest.getContextPath()\n\n\nPre,Backend, Output\n\n\na href=\n{{\nctxPath\n}}\n\n\n\n\n\n\ngo_to\n\n\nTo redirect into particular page. It accepts URL and \nResolution\n object\n\n\nPre,Backend\n\n\ngo_to = \n%s/t/my/app\n % ctxPath\n\n\n\n\n\n\nerrors\n\n\nErrors object of type \njava.util.List\n. The attribute will be available to UI\n\n\nPre\n\n\n\n\n\n\n\n\n\n\nIn addition to the pre-defined variables, all parameters from a request are also being exposed to backend as variables.", 
            "title": "Variables"
        }, 
        {
            "location": "/developer/variables/#sufia-pre-defined-variables", 
            "text": "SUFIA provides a number of pre-defined variables ( Reserved Words ) inside the transaction codes.\nThese variables include the core classes of SUFIA, utility and helper classes.   Warning  Be careful not to override the variables! If you define a variable inside\nthe codes using the same name, it will override the original variable.\nThis applies to pre-defined variables, keyword and built-in functions\nused by Jython also (e.g.  map )", 
            "title": "SUFIA pre-defined variables"
        }, 
        {
            "location": "/developer/variables/#list-of-sufia-pre-defined-variables", 
            "text": "Variable  Description  Scope  Usage Example      service  Helper class to get SUFIA services. Refer to  Services  for more details  Pre,Backend  userService = service.get( UserService )    dataSource  Instance of  javax.sql.DataSource  to get connection from database  Pre,Backend     output  Output context based on  java.util.Map . All the attributes set in this context will be available to UI  Pre,Backend  output[ name ] = user.getFullName()    key  id  value of the current table (model)  Pre,Backend, Output  person = Person.findById(key)    user  SUFIA User object. Refer to SUFIA API for details.  Pre,Backend, Output  user.getId()    request  HTTP request parameter object based on  java.util.Map . A wrapper for  request.getParameterMap()  Pre,Backend  request.getParameter( input )    webCtx  Stripes  ActionBeanContext . This can be used to get the internals of Servlet API (e.g. request, response)  Pre,Backend, Output  webCtx.getRequest()    ctxPath  Context path for SUFIA application. Value of  request.getContextPath()  Pre,Backend, Output  a href= {{ ctxPath }}    go_to  To redirect into particular page. It accepts URL and  Resolution  object  Pre,Backend  go_to =  %s/t/my/app  % ctxPath    errors  Errors object of type  java.util.List . The attribute will be available to UI  Pre      In addition to the pre-defined variables, all parameters from a request are also being exposed to backend as variables.", 
            "title": "List of SUFIA pre-defined variables"
        }, 
        {
            "location": "/developer/page-layout/", 
            "text": "Page Layout\n\n\nSUFIA is using \nBootstrap\n's based \nPatternfly\n UI Framework. By default, an application built on SUFIA is using the same infrastructure for user interface. However, SUFIA provides a mechanism to change the application user interface.\n\n\nSUFIA page layout is a basic \"admin dashboard\" model with top banner, side navigator and content area.\n\n\n\n\nUnder default layout, your Transaction, Data and Query will occupy the content area and make use of the existing top banner and side navigator.\n\n\nPage Layout provides a way to define your own templates for page decoration. You can use existing components (bootstrap, jquery, etc) with different layouts, or change the stack altogether (using a different framework / your own UI).\n\n\nYou can create multiple layouts for different purposes as required by your application. For instance, you can have a completely blank page (Transaction take the whole screen), with only top banner and body content, or any other combinations based on your creativity.\n\n\nCreate New\n\n\nTo create a new Page Layout click on the \"Create New Template\" button.\n\n\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nName\n\n\nPage Layout Name\n\n\n\n\n\n\nBlank Screen\n\n\nCheck for total blank screen i.e. you need to specify everything\nOtherwise basic assets will be loaded (bootstrap, jquery, dataTables, datepicker, select2)\n\n\n\n\n\n\nEditor\n\n\nHTML codes\n\n\n\n\n\n\n\n\nSpecial Placeholder\n\n\n\n\n\n\n\n\nKeyword\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n{{\nhead\n}}\n\n\nPlaceholder for HTML's head section. Usually for  \nhead\n tag\n\n\n\n\n\n\n{{\ntitle\n}}\n\n\nPlaceholder for title. Usually for \ntitle\n tag\n\n\n\n\n\n\n{{\nmeta\n}}\n\n\nPlaceholder for HTML's \nmeta\n tag. Usually under head section\n\n\n\n\n\n\n{{\nbody\n}}\n\n\nPlaceholder for body content. Place it at the place where the content should be. Usually for \nbody\n tag. This placeholder is required\n\n\n\n\n\n\n\n\nExample\n\n\nSimple blank screen:\n\nhtml\n\n    \nhead\n\n        \ntitle\n{{\ntitle\n}}\n/\ntitle\n\n        \n{{\nhead\n}}\n\n    \n/\nhead\n\n    \nbody\n\n        \n{{\nbody\n}}\n\n    \n/\nbody\n\n\n/\nhtml", 
            "title": "Page Layout"
        }, 
        {
            "location": "/developer/page-layout/#page-layout", 
            "text": "SUFIA is using  Bootstrap 's based  Patternfly  UI Framework. By default, an application built on SUFIA is using the same infrastructure for user interface. However, SUFIA provides a mechanism to change the application user interface.  SUFIA page layout is a basic \"admin dashboard\" model with top banner, side navigator and content area.   Under default layout, your Transaction, Data and Query will occupy the content area and make use of the existing top banner and side navigator.  Page Layout provides a way to define your own templates for page decoration. You can use existing components (bootstrap, jquery, etc) with different layouts, or change the stack altogether (using a different framework / your own UI).  You can create multiple layouts for different purposes as required by your application. For instance, you can have a completely blank page (Transaction take the whole screen), with only top banner and body content, or any other combinations based on your creativity.", 
            "title": "Page Layout"
        }, 
        {
            "location": "/developer/page-layout/#create-new", 
            "text": "To create a new Page Layout click on the \"Create New Template\" button.      Field  Description      Name  Page Layout Name    Blank Screen  Check for total blank screen i.e. you need to specify everything Otherwise basic assets will be loaded (bootstrap, jquery, dataTables, datepicker, select2)    Editor  HTML codes", 
            "title": "Create New"
        }, 
        {
            "location": "/developer/page-layout/#special-placeholder", 
            "text": "Keyword  Description      {{ head }}  Placeholder for HTML's head section. Usually for   head  tag    {{ title }}  Placeholder for title. Usually for  title  tag    {{ meta }}  Placeholder for HTML's  meta  tag. Usually under head section    {{ body }}  Placeholder for body content. Place it at the place where the content should be. Usually for  body  tag. This placeholder is required", 
            "title": "Special Placeholder"
        }, 
        {
            "location": "/developer/page-layout/#example", 
            "text": "Simple blank screen: html \n     head \n         title {{ title }} / title \n         {{ head }} \n     / head \n     body \n         {{ body }} \n     / body  / html", 
            "title": "Example"
        }, 
        {
            "location": "/developer/helper/", 
            "text": "Handlebars Helper\n\n\nSUFIA additional helper for Handlebars. You may need to refer to Handlebars \ndocumentation\n to understand the concept.\n\n\nValue Lookup\n\n\nSometimes you want to display the name / description of a particular id. For instance, consider\nyou have a table \nhr_department_staff\n with column \nstaff_id\n, which is a foreign key to table \nhr_staff\n.\nWhile iterating the \nhr_department_staff\n records, you may want to display the staff name instead of the staff_id.\n\n\nUsage:\n\n\n{{\nref_lookup\n \nref_id\n \ntable\n=\ntableName\n \nlabel\n=\nname\n \nvalue\n=\nid\n}}\n\n\n\n\n\nExample:\n\n\nul\n\n    \n{{\n#each\n \nstaffs\n}}\n\n        \nli\n{{\nref_lookup\n \nstaff_id\n \ntable\n=\nhr_staff\n \nvalue\n=\nid\n \nlabel\n=\nname\n}}\n/\nli\n\n    \n{{\n/each\n}}\n\n\n/\nul\n\n\n\n\nHTML format\n\n\nTransform newline to \nbr\n and make valid URL clickable.\n\n\nUsage:\n\n\n{{\nhtml\n \ncontext\n}}\n\n\n\n\n\nExample:\n\n\np\n{{\nhtml\n \ncontent\n}}\n/\np\n\n\n\n\nGenerate HTML \nselect\n tag\n\n\nGenerate HTML \nselect\n tag with data from database table. This helper support parent-child selector\n(e.g. Country \n State)\n\n\nUsage:\n\n\n{{\nselect\n \nmodels\n?\n \nselected\n=\ncontext\n?\n \ntable\n=\ntableName\n?\n \nfilter\n=\ntype=1\n?\n \nid\n=\nid\n?\n \nname\n=\nname\n?\n \nclass\n=\nclass\n?\n \nchildIds\n=\n?\n \nparent\n=\n?\n \nlabel\n=\nname\n \nvalue\n=\nid\n}}\n\n\n\n\n\nExample:\n\n\n{{\nselect\n \ntable\n=\nhr_staff\n}}\n\n\n\n\nExample for parent-child:\n\n\nParent:\n\n\n{{\nselect\n \ntable\n=\nref_country\n \nname\n=\ncountry\n \nid\n=\ns_country_id\n \nchildIds\n=\ns_state_id\n}}\n\n\n\nChild:\n\n\n{{\nselect\n \ntable\n=\nref_state\n \nname\n=\nstate\n \nid\n=\ns_state_id\n \nparent\n=\ncountry_id\n \nparentId\n=\ns_country_id\n}}\n\n\n\n\n\nGenerate HTML \ninput\n,\ntextarea\n tag\n\n\nInput tag helper to cater for read-only value. If \nview\n is \ntrue\n input is automatically disabled.\n\n\nUsage:\n\n\n{{\nin\nput\n \nvalue\n?\n \n...\n}}\n\n\n{{\ntextarea\n \nvalue\n?\n \n...\n}}\n\n\n\n\n\nExample:\n\n\n{{\nin\nput\n \nstaff.name\n \nclass\n=\nform-control\n \nname\n=\nname\n \nmaxlength\n=\n150\n \nview\n=\nview_only\n}}\n\n\n\n\nDate Formatting\n\n\nDefault formatting of date to \ndd/MM/yyyy\n\n\nUsage:\n\n\n{{\ndateFormat\n \ncontext\n \npattern\n?\n}}\n\n\n\n\n\nExample:\n\n\np\n{{\ndateFormat\n \ntoday\n}}\n/\np\n\n\n\n\nContains Helper\n\n\nCheck if the value exists in the given context. Works with array or list\n\n\nUsage:\n\n\n{{\n#in\n \ncontext\n \nvalue\n}}\n...\n{{\n/in\n}}\n\n\n\n\n\nExample:\n\n\n{{\n#in\n \nadmins\n \nstaff_id\n}}\n\n    \np\nThis user is an Administrator\n/\np\n\n\n{{\n/in\n}}\n\n\n\n\nEquals \n Not Helper\n\n\nCheck if the value is equal or not equal.\n\n\nUsage:\n\n\n{{\n#eq\n \nvalue1\n \nvalue2\n}}\n..\n{{\n/eq\n}}\n\n\n{{\n#not\n \nvalue1\n \nvalue2\n}}\n..\n{{\n/not\n}}\n\n\n\n\n\nExample:\n\n\n{{\n#eq\n \nstaff.sex\n \n1\n}}\n\n    Male\n\n{{\nelse\n}}\n\n    Female\n\n{{\n/eq\n}}\n\n\n\n\nLength, Size\n\n\nGet the length of list, arrays\n\n\nUsage:\n\n\n{{\nlength\n \ncontext\n}}\n\n\n\n\n\nExample:\n\n\np\nTotal users: \n{{\nlength\n \nusers\n}}\n/\np\n\n\n\n\nChecked value\n\n\nHelper to output \nchecked\n based on context (can be list or string) and value.\n\n\nUsage:\n\n\n{{\nchecked\n \ncontext\n \nvalue\n=\nvalue\n \nchecked\n=\nselected\n?\n}}\n\n\n\n\n\nExample:\n\n\nTBD", 
            "title": "Helper"
        }, 
        {
            "location": "/developer/helper/#handlebars-helper", 
            "text": "SUFIA additional helper for Handlebars. You may need to refer to Handlebars  documentation  to understand the concept.", 
            "title": "Handlebars Helper"
        }, 
        {
            "location": "/developer/helper/#value-lookup", 
            "text": "Sometimes you want to display the name / description of a particular id. For instance, consider\nyou have a table  hr_department_staff  with column  staff_id , which is a foreign key to table  hr_staff .\nWhile iterating the  hr_department_staff  records, you may want to display the staff name instead of the staff_id.  Usage:  {{ ref_lookup   ref_id   table = tableName   label = name   value = id }}   Example:  ul \n     {{ #each   staffs }} \n         li {{ ref_lookup   staff_id   table = hr_staff   value = id   label = name }} / li \n     {{ /each }}  / ul", 
            "title": "Value Lookup"
        }, 
        {
            "location": "/developer/helper/#html-format", 
            "text": "Transform newline to  br  and make valid URL clickable.  Usage:  {{ html   context }}   Example:  p {{ html   content }} / p", 
            "title": "HTML format"
        }, 
        {
            "location": "/developer/helper/#generate-html-select-tag", 
            "text": "Generate HTML  select  tag with data from database table. This helper support parent-child selector\n(e.g. Country   State)  Usage:  {{ select   models ?   selected = context ?   table = tableName ?   filter = type=1 ?   id = id ?   name = name ?   class = class ?   childIds = ?   parent = ?   label = name   value = id }}   Example:  {{ select   table = hr_staff }}   Example for parent-child:  Parent:  {{ select   table = ref_country   name = country   id = s_country_id   childIds = s_state_id }}  Child:  {{ select   table = ref_state   name = state   id = s_state_id   parent = country_id   parentId = s_country_id }}", 
            "title": "Generate HTML &lt;select&gt; tag"
        }, 
        {
            "location": "/developer/helper/#generate-html-inputtextarea-tag", 
            "text": "Input tag helper to cater for read-only value. If  view  is  true  input is automatically disabled.  Usage:  {{ in put   value ?   ... }}  {{ textarea   value ?   ... }}   Example:  {{ in put   staff.name   class = form-control   name = name   maxlength = 150   view = view_only }}", 
            "title": "Generate HTML &lt;input&gt;,&lt;textarea&gt; tag"
        }, 
        {
            "location": "/developer/helper/#date-formatting", 
            "text": "Default formatting of date to  dd/MM/yyyy  Usage:  {{ dateFormat   context   pattern ? }}   Example:  p {{ dateFormat   today }} / p", 
            "title": "Date Formatting"
        }, 
        {
            "location": "/developer/helper/#contains-helper", 
            "text": "Check if the value exists in the given context. Works with array or list  Usage:  {{ #in   context   value }} ... {{ /in }}   Example:  {{ #in   admins   staff_id }} \n     p This user is an Administrator / p  {{ /in }}", 
            "title": "Contains Helper"
        }, 
        {
            "location": "/developer/helper/#equals-not-helper", 
            "text": "Check if the value is equal or not equal.  Usage:  {{ #eq   value1   value2 }} .. {{ /eq }}  {{ #not   value1   value2 }} .. {{ /not }}   Example:  {{ #eq   staff.sex   1 }} \n    Male {{ else }} \n    Female {{ /eq }}", 
            "title": "Equals &amp; Not Helper"
        }, 
        {
            "location": "/developer/helper/#length-size", 
            "text": "Get the length of list, arrays  Usage:  {{ length   context }}   Example:  p Total users:  {{ length   users }} / p", 
            "title": "Length, Size"
        }, 
        {
            "location": "/developer/helper/#checked-value", 
            "text": "Helper to output  checked  based on context (can be list or string) and value.  Usage:  {{ checked   context   value = value   checked = selected ? }}   Example:  TBD", 
            "title": "Checked value"
        }, 
        {
            "location": "/developer/utility-class/", 
            "text": "Utility\n\n\nData Loader\n\n\nData Loader is a utility for loading data into your existing database's table. Source for data must be in CSV format.\n\n\nTo load data you need to upload the CSV file. Then you need to map the data into the target table and match the source column into the target column. Click \"Submit\" after you are satisfied with the mapping and the loading process will start on the background. You will be notified when the process is completed.\n\n\nOne-step Data Loader\n\n\nOne-step Data Loader (OSDL) is similar to Data Loader with additional features like auto creation of database table. For a source CSV that has a column header, everything will be generated for you based on the source. OSDL also allows you to generate CRUD (Data with Query) for the newly generated table.\n\n\nOverall OSDL is more convenient compared to Data Loader. Always prefer OSDL whenever possible.\n\n\nUtility classes\n\n\nSUFIA has utility classes (JAVA) that you can utilize to help on your application development. On top of that SUFIA is also pre-installed with well known JAVA utility libraries such as Apache Commons, Google Guava and others. All these are available at your disposal.\n\n\nUtils\n\n\npackage sufia\n\n\nClass Utils\n\n\nMethod Summary\n\n\n\n\npublic\n \nDate\n \nparseDate\n(\nString\n \ndate\n)\n\n\n\n\nParameters:\n\n\n\n\ndate\n - date String with default format \"dd/MM/yyyy\"\n\n\n\n\nReturns:\n\n\n\n\n\n\njava.util.Date\n class\n\n\n\n\n\n\npublic\n \nString\n \nformatDate\n(\nDate\n \ndate\n)\n\n\n\n\npublic\n \nstatic\n \nDate\n \nparseDateTime\n(\nString\n \ndateStr\n)\n\n\npublic\n \nstatic\n \nString\n \nformatDateTime\n(\nDate\n \ndate\n)\n\n\npublic\n \nstatic\n \nDate\n \nparseTime\n(\nString\n \ndateStr\n)\n\n\npublic\n \nstatic\n \nString\n \nformatTime\n(\nDate\n \ndate\n)\n\n\npublic\n \nstatic\n \nNumber\n \nparseDecimal\n(\nString\n \nstr\n)\n\n\npublic\n \nstatic\n \nString\n \nformatDecimal\n(\ndouble\n \ndecimal\n)\n\n\npublic\n \nstatic\n \ndouble\n \nparseDouble\n(\nString\n \nstr\n)\n\n\npublic\n \nstatic\n \nString\n \ncapitalize\n(\nString\n \ncolumn\n)\n\n\npublic\n \nstatic\n \nString\n \ndecapitalize\n(\nString\n \ncolumn\n)\n\n\npublic\n \nstatic\n \nint\n \ncountFileLines\n(\nFile\n \nfile\n)\n\n\n\n\nRefer to How-To section for more examples.\n\n\nApplication Log\n\n\nYou can view server's log using menu \"System Log Viewer\".\n\n\n\n\nTo debug your Transaction, you can use the \nprint\n statement. It will appear on the system log. You can specify how many lines from the log that you want to view and you can filter the words to mark your own debugging statement.\n\n\nReference Manager\n\n\nReference Manager is a simple utility for key-value records. It is useful to reduce the number of reference tables. For example, the common reference like sex, race, religion can be stored using Reference Manager.\n\n\nSUFIA Transaction, Data and Query recognizes Reference Manager and can link to it automatically.\n\n\nThe drawback of Reference Manager is that you cannot use it with your SQL query (normally for joins). You need to keep this in mind when you are designing your application. \n\n\nManage Language (i18n)\n\n\nSUFIA provides support for Internationalization (i18n) out of the box. This feature uses Java Internationalization feature (through \nResourceBundle\n). You can add language that your application supports and provide translations for the language.\n\n\n\n\nTo refer to the key from your Transaction, you can use i18n helper:\n\n\n{{\ni18n\n \napp.address\n}}\n\n\nFor Data and Query, you can use the key to replace the label.\n\n\nSystem Variables\n\n\nSystem Variables is a general placeholder for system-wide variables (\nConstants\n). It is a convenient way to declare variables that can be referred from Transaction. \n\n\nYou can reduce the repetitive work of changing variables should the application change. This is useful for example if you develop an application that for multiple clients (3\nrd\n party provider).\n\n\n\n\nBuild-in variables includes:\n\n\n\n\n\n\n\n\nPlaceholder\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nsystem.name\n\n\nSUFIA System Name\n\n\nRefer \nSettings\n\n\n\n\n\n\nuser.name\n\n\nLogged In User name\n\n\nDeveloper\n\n\n\n\n\n\nuser.id\n\n\nLogged In User ID\n\n\n10001\n\n\n\n\n\n\nsysdate\n\n\nDate\n\n\n30/1/2017\n\n\n\n\n\n\nsystime\n\n\nTime\n\n\n10:00 AM\n\n\n\n\n\n\nsysdatetime\n\n\nDate \n Time\n\n\n30/01/2017 10:00 AM\n\n\n\n\n\n\nctxPath\n\n\nContext Path\n\n\n\"\" or \"/sufia\"", 
            "title": "Utility"
        }, 
        {
            "location": "/developer/utility-class/#utility", 
            "text": "", 
            "title": "Utility"
        }, 
        {
            "location": "/developer/utility-class/#data-loader", 
            "text": "Data Loader is a utility for loading data into your existing database's table. Source for data must be in CSV format.  To load data you need to upload the CSV file. Then you need to map the data into the target table and match the source column into the target column. Click \"Submit\" after you are satisfied with the mapping and the loading process will start on the background. You will be notified when the process is completed.", 
            "title": "Data Loader"
        }, 
        {
            "location": "/developer/utility-class/#one-step-data-loader", 
            "text": "One-step Data Loader (OSDL) is similar to Data Loader with additional features like auto creation of database table. For a source CSV that has a column header, everything will be generated for you based on the source. OSDL also allows you to generate CRUD (Data with Query) for the newly generated table.  Overall OSDL is more convenient compared to Data Loader. Always prefer OSDL whenever possible.", 
            "title": "One-step Data Loader"
        }, 
        {
            "location": "/developer/utility-class/#utility-classes", 
            "text": "SUFIA has utility classes (JAVA) that you can utilize to help on your application development. On top of that SUFIA is also pre-installed with well known JAVA utility libraries such as Apache Commons, Google Guava and others. All these are available at your disposal.", 
            "title": "Utility classes"
        }, 
        {
            "location": "/developer/utility-class/#utils", 
            "text": "package sufia  Class Utils  Method Summary   public   Date   parseDate ( String   date )   Parameters:   date  - date String with default format \"dd/MM/yyyy\"   Returns:    java.util.Date  class    public   String   formatDate ( Date   date )   public   static   Date   parseDateTime ( String   dateStr )  public   static   String   formatDateTime ( Date   date )  public   static   Date   parseTime ( String   dateStr )  public   static   String   formatTime ( Date   date )  public   static   Number   parseDecimal ( String   str )  public   static   String   formatDecimal ( double   decimal )  public   static   double   parseDouble ( String   str )  public   static   String   capitalize ( String   column )  public   static   String   decapitalize ( String   column )  public   static   int   countFileLines ( File   file )   Refer to How-To section for more examples.", 
            "title": "Utils"
        }, 
        {
            "location": "/developer/utility-class/#application-log", 
            "text": "You can view server's log using menu \"System Log Viewer\".   To debug your Transaction, you can use the  print  statement. It will appear on the system log. You can specify how many lines from the log that you want to view and you can filter the words to mark your own debugging statement.", 
            "title": "Application Log"
        }, 
        {
            "location": "/developer/utility-class/#reference-manager", 
            "text": "Reference Manager is a simple utility for key-value records. It is useful to reduce the number of reference tables. For example, the common reference like sex, race, religion can be stored using Reference Manager.  SUFIA Transaction, Data and Query recognizes Reference Manager and can link to it automatically.  The drawback of Reference Manager is that you cannot use it with your SQL query (normally for joins). You need to keep this in mind when you are designing your application.", 
            "title": "Reference Manager"
        }, 
        {
            "location": "/developer/utility-class/#manage-language-i18n", 
            "text": "SUFIA provides support for Internationalization (i18n) out of the box. This feature uses Java Internationalization feature (through  ResourceBundle ). You can add language that your application supports and provide translations for the language.   To refer to the key from your Transaction, you can use i18n helper:  {{ i18n   app.address }}  For Data and Query, you can use the key to replace the label.", 
            "title": "Manage Language (i18n)"
        }, 
        {
            "location": "/developer/utility-class/#system-variables", 
            "text": "System Variables is a general placeholder for system-wide variables ( Constants ). It is a convenient way to declare variables that can be referred from Transaction.   You can reduce the repetitive work of changing variables should the application change. This is useful for example if you develop an application that for multiple clients (3 rd  party provider).   Build-in variables includes:     Placeholder  Description  Example      system.name  SUFIA System Name  Refer  Settings    user.name  Logged In User name  Developer    user.id  Logged In User ID  10001    sysdate  Date  30/1/2017    systime  Time  10:00 AM    sysdatetime  Date   Time  30/01/2017 10:00 AM    ctxPath  Context Path  \"\" or \"/sufia\"", 
            "title": "System Variables"
        }, 
        {
            "location": "/developer/batch/", 
            "text": "Scheduler (Batch Process)\n\n\nBatch Process is a tool to executing tasks in the background. The task can be a one time task or a task that need to run periodically.\n\n\nFor a periodically run task, SUFIA provides a function to set the frequency. You can set when to run the task for the first time and when to repeat the task. The task can be repeated every \nminute\n, \nhour\n, \nday\n, \nweek\n or \nmonth\n. For more advanced usage, you can use \ncron\n expression to schedule the task.\n\n\nSUFIA Batch Process is based on Quartz Scheduler. Scheduler task is written using Transaction Post-Processor.\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nName\n\n\nBatch Name\n\n\n\n\n\n\nTransaction\n\n\nSelect Transaction that performing the task\n\n\n\n\n\n\nScheduled Date\n\n\nDate to start the task first time\n\n\n\n\n\n\nScheduled Time\n\n\nTime to start the task first time\n\n\n\n\n\n\nRepeat\n\n\nWhen to repeat the task\n\n\n\n\n\n\nRun At\n\n\nTarget environment. Either \nTEST\n (Development) or \nPROD\n (Production)\n\n\n\n\n\n\nCron Expression\n\n\nIf you provide cron expression, it will override the Scheduled Date, Time and Repeat settings.\ne.g. To repeat task every 5 minutes use: \"0 0/5 * \n * ?\"*\n\n\n\n\n\n\n\n\n\n\nTo create a new task, create \"\nCreate New Batch\n\".\n\n\nAfter creating the task, you need to click \"\nStart\n\" button to start the task. You can also stop the task or delete it.\n\n\nTo check or debug the task, you can check the \napplication log\n.", 
            "title": "Scheduler"
        }, 
        {
            "location": "/developer/batch/#scheduler-batch-process", 
            "text": "Batch Process is a tool to executing tasks in the background. The task can be a one time task or a task that need to run periodically.  For a periodically run task, SUFIA provides a function to set the frequency. You can set when to run the task for the first time and when to repeat the task. The task can be repeated every  minute ,  hour ,  day ,  week  or  month . For more advanced usage, you can use  cron  expression to schedule the task.  SUFIA Batch Process is based on Quartz Scheduler. Scheduler task is written using Transaction Post-Processor.     Field  Description      Name  Batch Name    Transaction  Select Transaction that performing the task    Scheduled Date  Date to start the task first time    Scheduled Time  Time to start the task first time    Repeat  When to repeat the task    Run At  Target environment. Either  TEST  (Development) or  PROD  (Production)    Cron Expression  If you provide cron expression, it will override the Scheduled Date, Time and Repeat settings. e.g. To repeat task every 5 minutes use: \"0 0/5 *   * ?\"*      To create a new task, create \" Create New Batch \".  After creating the task, you need to click \" Start \" button to start the task. You can also stop the task or delete it.  To check or debug the task, you can check the  application log .", 
            "title": "Scheduler (Batch Process)"
        }, 
        {
            "location": "/developer/how-to/action-pattern/", 
            "text": "Action Pattern\n\n\nSUFIA is a flexible framework that allows you to build your application in your own style. SUFIA only dictates certain conventions and the rest is open for you to design your application.\n\n\nDespite the flexibilities, sometimes it can become quite challenging for developers who are relatively new in web application development to adapt to SUFIA methodologies.\n\n\nFor JAVA developers who are familiar with action based frameworks (i.e. Struts, Stripes, Spring MVC, etc), one common pattern that is available in the \"method based action\". Using this approach, you will design the application based on the Action classes and separate the process based on methods inside the Action class.\n\n\nTo implement the same pattern in SUFIA is quite simple, you need to design your Transaction using these styles:\n\n\nForm Template\n\n\nform\n \nclass\n=\nform-horizontal\n \n    \naction\n=\n{{ctxPath}}/t/HR/report?invoke\n \n    \nmethod\n=\npost\n\n  \ndiv\n \nclass\n=\nform-group\n\n      \nlabel\n \nclass\n=\ncontrol-label col-sm-2\nTitle\n/\nlabel\n\n      \ndiv\n \nclass\n=\ncol-sm-8\n\n          \ninput\n \ntype\n=\ntext\n \nname\n=\ntitle\n \nclass\n=\nform-control\n\n      \n/\ndiv\n\n  \n/\ndiv\n\n  \ndiv\n \nclass\n=\nform-group\n\n      \nlabel\n \nclass\n=\ncontrol-label col-sm-2\nApplicant\n/\nlabel\n\n      \ndiv\n \nclass\n=\ncol-sm-8\n\n          \ntextarea\n \nname\n=\napplicant\n \nclass\n=\nform-control\n \nrows\n=\n2\n\n          \n/\ntextarea\n\n      \n/\ndiv\n\n  \n/\ndiv\n\n  \ndiv\n \nclass\n=\nform-group\n\n      \nlabel\n \nclass\n=\ncontrol-label col-sm-2\nDescription\n/\nlabel\n\n      \ndiv\n \nclass\n=\ncol-sm-8\n\n          \ntextarea\n \nname\n=\ndescription\n \nclass\n=\nform-control\n \nrows\n=\n2\n\n          \n/\ntextarea\n\n      \n/\ndiv\n\n  \n/\ndiv\n\n  \ndiv\n \nclass\n=\nform-group\n\n      \ndiv\n \nclass\n=\ncol-sm-8 col-sm-offset-2\n\n          \nbutton\n \ntype\n=\nsubmit\n \nname\n=\nd_action\n \nvalue\n=\nsave_report\n \n            \nclass\n=\nbtn btn-primary\n\n              Save\n          \n/\nbutton\n\n      \n/\ndiv\n\n  \n/\ndiv\n\n\n/\nform\n\n\n\n\n\nPost-Processor\n\n\nimport\n \nReport\n\n\n\nif\n \nd_action\n \n==\n \nsave_report\n:\n\n    \n#do processing...\n\n\n\nif\n \nd_action\n \n==\n \ndelete_report\n:\n\n    \n#another action...\n\n\n\n\n\nBy using this simple scheme, you can keep your code clean and easy to navigate.", 
            "title": "Action Pattern"
        }, 
        {
            "location": "/developer/how-to/action-pattern/#action-pattern", 
            "text": "SUFIA is a flexible framework that allows you to build your application in your own style. SUFIA only dictates certain conventions and the rest is open for you to design your application.  Despite the flexibilities, sometimes it can become quite challenging for developers who are relatively new in web application development to adapt to SUFIA methodologies.  For JAVA developers who are familiar with action based frameworks (i.e. Struts, Stripes, Spring MVC, etc), one common pattern that is available in the \"method based action\". Using this approach, you will design the application based on the Action classes and separate the process based on methods inside the Action class.  To implement the same pattern in SUFIA is quite simple, you need to design your Transaction using these styles:  Form Template  form   class = form-horizontal  \n     action = {{ctxPath}}/t/HR/report?invoke  \n     method = post \n   div   class = form-group \n       label   class = control-label col-sm-2 Title / label \n       div   class = col-sm-8 \n           input   type = text   name = title   class = form-control \n       / div \n   / div \n   div   class = form-group \n       label   class = control-label col-sm-2 Applicant / label \n       div   class = col-sm-8 \n           textarea   name = applicant   class = form-control   rows = 2 \n           / textarea \n       / div \n   / div \n   div   class = form-group \n       label   class = control-label col-sm-2 Description / label \n       div   class = col-sm-8 \n           textarea   name = description   class = form-control   rows = 2 \n           / textarea \n       / div \n   / div \n   div   class = form-group \n       div   class = col-sm-8 col-sm-offset-2 \n           button   type = submit   name = d_action   value = save_report  \n             class = btn btn-primary \n              Save\n           / button \n       / div \n   / div  / form   Post-Processor  import   Report  if   d_action   ==   save_report : \n     #do processing...  if   d_action   ==   delete_report : \n     #another action...   By using this simple scheme, you can keep your code clean and easy to navigate.", 
            "title": "Action Pattern"
        }, 
        {
            "location": "/developer/how-to/ajax/", 
            "text": "AJAX\n\n\nTransaction can be invoked from an AJAX call. To create a Transaction that responds to an AJAX call, just use the \noutput\n variable to return the data to AJAX function. \n\n\nTo invoke Transaction using AJAX, you need to use POST method.\n\n\n(Form Template)\n\n\nfunction\n \nget_user\n()\n \n{\n\n  \n$\n.\npost\n(\n/t/HR/ajax?remote\n,\n \n{\nd_action\n:\nget_user\n},\n \nfunction\n(\ndata\n)\n \n{\n\n    \nconsole\n.\nlog\n(\ndata\n.\nbody\n.\nperson_list\n);\n\n  \n});\n\n\n}\n\n\n\n\n\n(Post-Processor)\n\n\nif\n \nd_action\n \n==\n \nget_user\n:\n\n    \nperson_list\n \n=\n \nPerson\n.\nfindAll\n()\n\n    \noutput\n[\nperson_list\n]\n \n=\n \nperson_list", 
            "title": "AJAX"
        }, 
        {
            "location": "/developer/how-to/ajax/#ajax", 
            "text": "Transaction can be invoked from an AJAX call. To create a Transaction that responds to an AJAX call, just use the  output  variable to return the data to AJAX function.   To invoke Transaction using AJAX, you need to use POST method.  (Form Template)  function   get_user ()   { \n   $ . post ( /t/HR/ajax?remote ,   { d_action : get_user },   function ( data )   { \n     console . log ( data . body . person_list ); \n   });  }   (Post-Processor)  if   d_action   ==   get_user : \n     person_list   =   Person . findAll () \n     output [ person_list ]   =   person_list", 
            "title": "AJAX"
        }, 
        {
            "location": "/developer/how-to/generate-pdf/", 
            "text": "Generate PDF\n\n\nThere are several ways to generate PDF using JAVA, but most (if not all) of the methods will eventually use iText at the background.\n\n\nSUFIA is pre-installed with OpenPDF and can be used to create your PDF.\n\n\nOne common method that is supported is by using flying saucer library (XHTML renderer):\n\n\n\n\nCreate your document using Transaction. Use the Form Template to provide your own xhtml document.\n\n\nUsing another Transaction, you can call the document Transaction to generate the PDF content.\n\n\n\n\nExample:\n\n\n1. Transaction /HR/receipt\n (Fom Template)\n\n\nhtml\n\n  \nhead\n\n    \ntitle\nOfficial Receipt\n/\ntitle\n\n  \n/\nhead\n\n  \nbody\n\n    \ntable\n\n      \ntbody\n\n        \ntr\ntd\nReceipt No\n/\ntd\ntd\n{{receipt_no}}\n/\ntd\n/\ntr\n\n        \ntr\ntd\nAmount\n/\ntd\ntd\n{{amount}}\n/\ntd\n/\ntr\n\n      \n/\ntbody\n\n    \n/\ntable\n\n  \n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n2. Transaction /HR/print\n (Pre-Processor)\n\n\nfrom\n \njava.io\n \nimport\n \nFile\n,\nFileInputStream\n,\nFileOutputStream\n\n\nfrom\n \norg.xhtmlrenderer.pdf\n \nimport\n \nToPDF\n\n\nfrom\n \nnet.sourceforge.stripes.action\n \nimport\n \nStreamingResolution\n\n\n\nreq\n \n=\n \nwebCtx\n.\ngetRequest\n()\n\n\n\nuri\n \n=\n \nhttp://127.0.0.1:8080/t/HR/receipt?id=123\n\n\n\ntempFile\n \n=\n \nFile\n.\ncreateTempFile\n(\nform\n,\n \n.pdf\n)\n\n\nToPDF\n.\ncreatePDF\n(\nurl\n,\n \ntempFile\n.\ngetPath\n())\n\n\n\n#download the document\n\n\ngo_to\n \n=\n \nStreamingResolution\n(\napplication/pdf\n,\n \nFileInputStream\n(\ntempFile\n))", 
            "title": "Generate PDF"
        }, 
        {
            "location": "/developer/how-to/generate-pdf/#generate-pdf", 
            "text": "There are several ways to generate PDF using JAVA, but most (if not all) of the methods will eventually use iText at the background.  SUFIA is pre-installed with OpenPDF and can be used to create your PDF.  One common method that is supported is by using flying saucer library (XHTML renderer):   Create your document using Transaction. Use the Form Template to provide your own xhtml document.  Using another Transaction, you can call the document Transaction to generate the PDF content.   Example:  1. Transaction /HR/receipt  (Fom Template)  html \n   head \n     title Official Receipt / title \n   / head \n   body \n     table \n       tbody \n         tr td Receipt No / td td {{receipt_no}} / td / tr \n         tr td Amount / td td {{amount}} / td / tr \n       / tbody \n     / table \n   / body  / html   2. Transaction /HR/print  (Pre-Processor)  from   java.io   import   File , FileInputStream , FileOutputStream  from   org.xhtmlrenderer.pdf   import   ToPDF  from   net.sourceforge.stripes.action   import   StreamingResolution  req   =   webCtx . getRequest ()  uri   =   http://127.0.0.1:8080/t/HR/receipt?id=123  tempFile   =   File . createTempFile ( form ,   .pdf )  ToPDF . createPDF ( url ,   tempFile . getPath ())  #download the document  go_to   =   StreamingResolution ( application/pdf ,   FileInputStream ( tempFile ))", 
            "title": "Generate PDF"
        }, 
        {
            "location": "/developer/how-to/upload-file/", 
            "text": "Upload / Download\n\n\nUpload\n\n\nTo make a Transaction support upload file, you need to create a field using Form Builder with the type \nBLOB\n. Give the variable name for the field.\n\n\nIn your Form Template, add input type file with name \nattachments[0]\n.\n\n\n\n\nWarning\n\n\nThis feature is using conventions, you must follow the guideline in order to make it work.\n\n\n\n\nAt the Post-Processor, you can just use the variable name to save the uploaded file. SUFIA will generate another 2 fields automatically for file name and file type:\n\n\nFor variable name \nfile_upload\n \n \n\n\n\n\n\n\nfile_upload\n - byte array (content of file)\n\n\n\n\n\n\nfile_upload_fn\n - file name\n\n\n\n\nfile_upload_ft\n - file type\n\n\n\n\nExample\n (Form Template)\n\n\nform\n \naction\n=\n/t/HR/report?invoke\n \nmethod\n=\npost\n \nenctype\n=\nmultipart/form-data\n\n    \ndiv\n \nclass\n=\nform-group\n\n        \ninput\n \ntype\n=\nfile\n \nname\n=\nattachments[0]\n\n        \nbutton\n \ntype\n=\nsubmit\n \nname\n=\nd_action\n \nvalue\n=\nupload\n\n          Upload\n        \n/\nbutton\n\n    \n/\ndiv\n\n\n/\nform\n\n\n\n\n\n(Form Builder)\n\n\n\n\n(Post-Processor)\n\n\nimport\n \nReport_attc\n\n\n\nif\n \nd_action\n \n==\n \nupload\n:\n\n    \nif\n \nfile_upload\n:\n\n        \nreport_attc\n \n=\n \nReport_attc\n()\n\n        \nreport_attc\n.\nset\n(\nfile\n,\n \nfile_upload\n)\n\n        \nreport_attc\n.\nset\n(\nfile_fn\n,\n \nfile_upload_fn\n)\n\n        \nreport_attc\n.\nset\n(\nfile_ft\n,\n \nfile_upload_ft\n)\n\n        \nreport_attc\n.\nsaveIt\n()\n\n\n\n\n\nDownload\n\n\nTo download a file, you either can use StreamingResolution (refer \nhere\n) or use the build in helper servlet:\n\n\nimg\n \nsrc\n=\n/bl?tn=report_attc\ncn=file\nk=1\n/\n\n\n\n\n\n\n\ntn\n - table name\n\n\ncn\n - column name\n\n\nk\n - row id (key)\n\n\nil\n - \ninline\n (e.g. \nil=1\n for \ninline\n)", 
            "title": "Upload / Download"
        }, 
        {
            "location": "/developer/how-to/upload-file/#upload-download", 
            "text": "", 
            "title": "Upload / Download"
        }, 
        {
            "location": "/developer/how-to/upload-file/#upload", 
            "text": "To make a Transaction support upload file, you need to create a field using Form Builder with the type  BLOB . Give the variable name for the field.  In your Form Template, add input type file with name  attachments[0] .   Warning  This feature is using conventions, you must follow the guideline in order to make it work.   At the Post-Processor, you can just use the variable name to save the uploaded file. SUFIA will generate another 2 fields automatically for file name and file type:  For variable name  file_upload        file_upload  - byte array (content of file)    file_upload_fn  - file name   file_upload_ft  - file type   Example  (Form Template)  form   action = /t/HR/report?invoke   method = post   enctype = multipart/form-data \n     div   class = form-group \n         input   type = file   name = attachments[0] \n         button   type = submit   name = d_action   value = upload \n          Upload\n         / button \n     / div  / form   (Form Builder)   (Post-Processor)  import   Report_attc  if   d_action   ==   upload : \n     if   file_upload : \n         report_attc   =   Report_attc () \n         report_attc . set ( file ,   file_upload ) \n         report_attc . set ( file_fn ,   file_upload_fn ) \n         report_attc . set ( file_ft ,   file_upload_ft ) \n         report_attc . saveIt ()", 
            "title": "Upload"
        }, 
        {
            "location": "/developer/how-to/upload-file/#download", 
            "text": "To download a file, you either can use StreamingResolution (refer  here ) or use the build in helper servlet:  img   src = /bl?tn=report_attc cn=file k=1 /    tn  - table name  cn  - column name  k  - row id (key)  il  -  inline  (e.g.  il=1  for  inline )", 
            "title": "Download"
        }, 
        {
            "location": "/developer/how-to/send-mail/", 
            "text": "Send Mail\n\n\nSUFIA provides built in service class for sending mail. To use it, simply use:\n\n\n#send email\n\n\nmail_from\n \n=\n \ndonotreply@sufia.online\n\n\nmail_to\n \n=\n \nsufi@sufia.online\n\n\nsubject\n \n=\n \nNotification\n\n\ncontent\n \n=\n \nThis is a notification\n\n\nservice\n.\nget\n(\nMailService\n)\n.\nsend\n(\nmail_from\n,\n \nmail_to\n,\n \n[],\n \n[],\n \nsubject\n,\n \ncontent\n,\n \n[],\n \nTrue\n)\n\n\n\n\n\nRefer to \nMailService", 
            "title": "Send E-Mail"
        }, 
        {
            "location": "/developer/how-to/send-mail/#send-mail", 
            "text": "SUFIA provides built in service class for sending mail. To use it, simply use:  #send email  mail_from   =   donotreply@sufia.online  mail_to   =   sufi@sufia.online  subject   =   Notification  content   =   This is a notification  service . get ( MailService ) . send ( mail_from ,   mail_to ,   [],   [],   subject ,   content ,   [],   True )   Refer to  MailService", 
            "title": "Send Mail"
        }, 
        {
            "location": "/developer/how-to/customize-user/", 
            "text": "Customization of User Management and Login Process\n\n\nCustom User\n\n\nSometimes, there is a need to have your own implementation of user profiles. Especially if there is a need for\nmore details which default SUFIA User does not provide.\n\n\nThere are two approaches to achieve this, one is by implementing the whole set of User lifecycle. This means you\nneed to create your own user, menu, role etc. based on the requirement. This is quite straight forward.\n\n\nHowever, if you still want to make use of SUFIA built-in User, Role, Menu functions you need to interact with \nSUFIA API\n.\nIn order to link it back to SUFIA User table, you need to use \nUserService\n.\n\n\nExample:\n\n\nConsider we created our own user table like the one below:\n\nmy_user\n\n\n-------\n\nid\nlogin_id\nuser_id\nname\nemail\ncreated_date\n\n\n\nBackend Code:\n\nimport\n \nMy_user\n\n\nfrom\n \njava.util\n \nimport\n \nDate\n\n\nfrom\n \nsufia\n \nimport\n \nUser\n\n\n\ntoday\n \n=\n \nDate\n()\n\n\n\nuserService\n \n=\n \nservice\n.\nget\n(\nUserService\n)\n\n\nroleService\n \n=\n \nservice\n.\nget\n(\nRoleService\n)\n\n\nmenuService\n \n=\n \nservice\n.\nget\n(\nMenuService\n)\n\n\nmy_role\n \n=\n \nroleService\n.\nfindByName\n(\nMy Role\n)\n\n\nmy_menu\n \n=\n \nmenuService\n.\nfindByName\n(\nMy Menu\n)\n\n\n\nif\n \nd_action\n \n==\n \nsave_user\n:\n\n    \nmy_user\n \n=\n \nMy_user\n.\nfirst\n(\nlogin_id=?\n,\n \nlogin_id\n)\n\n    \nif\n \nmy_user\n:\n\n        \nerr\n \n=\n \nUser already exists\n\n    \nelse\n:\n\n        \nsufia_user\n \n=\n \nuserService\n.\nfindByLoginId\n(\nlogin_id\n)\n\n        \nif\n \nsufia_user\n:\n\n            \nerr\n \n=\n \nUser already exists\n\n        \nelse\n:\n\n            \nsufia_user\n \n=\n \nUser\n()\n\n            \nsufia_user\n.\nset\n(\nloginId\n,\n \nlogin_id\n)\n\n            \nsufia_user\n.\nset\n(\nname\n,\n \nname\n)\n\n            \nsufia_user\n.\nset\n(\npassword\n,\n \npassword\n)\n\n            \nsufia_user\n.\nset\n(\nemail\n,\n \nemail\n)\n\n            \nsufia_user\n \n=\n \nuserService\n.\nregister\n(\nsufia_user\n,\n \n[\nint\n(\nmy_role\n.\nget\n(\nid\n))],\n \nint\n(\nmy_menu\n.\nget\n(\nid\n)),\n \nwebCtx\n.\ngetCurrentScope\n())\n\n            \nif\n \nsufia_user\n:\n\n                \n# only create My_user if SUFIA User creation successful\n\n                \nmy_user\n \n=\n \nMy_user\n()\n\n                \nmy_user\n.\nset\n(\nlogin_id\n,\n \nlogin_id\n)\n\n                \nmy_user\n.\nset\n(\nuser_id\n,\n \nsufia_user\n.\nget\n(\nid\n))\n \n# link with SUFIA User\ns id\n\n                \nmy_user\n.\nset\n(\nname\n,\n \nname\n)\n\n                \nmy_user\n.\nset\n(\nemail\n,\n \nemail\n)\n\n                \nmy_user\n.\nset\n(\ncreated_date\n,\n \ntoday\n)\n\n                \nmy_user\n.\nsaveIt\n()\n\n                \ngo_to\n \n=\n \n%s\n/t/list/user\n \n%\n \n(\nctxPath\n)\n\n\n\n\nCustom Login\n\n\nThere are two ways available to implement your own login process based on your requirement.\n\n\n(Option 1) Using Transaction with LoginService\n\n\n(Option 2) Override Login process\n\n\nSUFIA provides a way to override default login process. You can create your own Java class which implement \nLoginService\n.\nAfter that you need to set your customized class using properties \nlogin.service\n on \nsufia.properties\n configuration file.\n\n\nThis is useful if you want to implement a different logic such as login using Single Sign-On (SSO), Active Directory / LDAP\nor other external database / login provider.\n\n\nExample (Login without using password):\n\n\npackage\n \nwebgeaz.sufia.service\n;\n\n\n\nimport\n \ncom.google.inject.Inject\n;\n\n\nimport\n \nwebgeaz.sufia.model.UserProfile\n;\n\n\nimport\n \nwebgeaz.sufia.web.mgr.UserManager\n;\n\n\nimport\n \nwebgeaz.sufia.web.service.LoginService\n;\n\n\n\npublic\n \nclass\n \nLoginWithoutPassword\n \nimplements\n \nLoginService\n \n{\n\n\n    \nprivate\n \nfinal\n \nUserManager\n \nuserManager\n;\n\n\n    \n@Inject\n\n    \npublic\n \nLoginWithoutPassword\n(\nUserManager\n \nuserManager\n)\n \n{\n\n        \nthis\n.\nuserManager\n \n=\n \nuserManager\n;\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nUserProfile\n \nlogin\n(\nString\n \nloginId\n,\n \nString\n \npassword\n)\n \n{\n\n        \nif\n \n(\nloginId\n \n!=\n \nnull\n \n \nloginId\n.\nstartsWith\n(\nVALID-\n))\n \n{\n\n            \nreturn\n \nuserManager\n.\nfindByLoginId\n(\nloginId\n);\n\n        \n}\n \nelse\n \n{\n\n            \nreturn\n \nuserManager\n.\nlogin\n(\nloginId\n,\n \npassword\n);\n\n        \n}\n\n    \n}\n\n\n\n}", 
            "title": "Customize User"
        }, 
        {
            "location": "/developer/how-to/customize-user/#customization-of-user-management-and-login-process", 
            "text": "", 
            "title": "Customization of User Management and Login Process"
        }, 
        {
            "location": "/developer/how-to/customize-user/#custom-user", 
            "text": "Sometimes, there is a need to have your own implementation of user profiles. Especially if there is a need for\nmore details which default SUFIA User does not provide.  There are two approaches to achieve this, one is by implementing the whole set of User lifecycle. This means you\nneed to create your own user, menu, role etc. based on the requirement. This is quite straight forward.  However, if you still want to make use of SUFIA built-in User, Role, Menu functions you need to interact with  SUFIA API .\nIn order to link it back to SUFIA User table, you need to use  UserService .  Example:  Consider we created our own user table like the one below: my_user  ------- \nid\nlogin_id\nuser_id\nname\nemail\ncreated_date  Backend Code: import   My_user  from   java.util   import   Date  from   sufia   import   User  today   =   Date ()  userService   =   service . get ( UserService )  roleService   =   service . get ( RoleService )  menuService   =   service . get ( MenuService )  my_role   =   roleService . findByName ( My Role )  my_menu   =   menuService . findByName ( My Menu )  if   d_action   ==   save_user : \n     my_user   =   My_user . first ( login_id=? ,   login_id ) \n     if   my_user : \n         err   =   User already exists \n     else : \n         sufia_user   =   userService . findByLoginId ( login_id ) \n         if   sufia_user : \n             err   =   User already exists \n         else : \n             sufia_user   =   User () \n             sufia_user . set ( loginId ,   login_id ) \n             sufia_user . set ( name ,   name ) \n             sufia_user . set ( password ,   password ) \n             sufia_user . set ( email ,   email ) \n             sufia_user   =   userService . register ( sufia_user ,   [ int ( my_role . get ( id ))],   int ( my_menu . get ( id )),   webCtx . getCurrentScope ()) \n             if   sufia_user : \n                 # only create My_user if SUFIA User creation successful \n                 my_user   =   My_user () \n                 my_user . set ( login_id ,   login_id ) \n                 my_user . set ( user_id ,   sufia_user . get ( id ))   # link with SUFIA User s id \n                 my_user . set ( name ,   name ) \n                 my_user . set ( email ,   email ) \n                 my_user . set ( created_date ,   today ) \n                 my_user . saveIt () \n                 go_to   =   %s /t/list/user   %   ( ctxPath )", 
            "title": "Custom User"
        }, 
        {
            "location": "/developer/how-to/customize-user/#custom-login", 
            "text": "There are two ways available to implement your own login process based on your requirement.", 
            "title": "Custom Login"
        }, 
        {
            "location": "/developer/how-to/customize-user/#option-1-using-transaction-with-loginservice", 
            "text": "", 
            "title": "(Option 1) Using Transaction with LoginService"
        }, 
        {
            "location": "/developer/how-to/customize-user/#option-2-override-login-process", 
            "text": "SUFIA provides a way to override default login process. You can create your own Java class which implement  LoginService .\nAfter that you need to set your customized class using properties  login.service  on  sufia.properties  configuration file.  This is useful if you want to implement a different logic such as login using Single Sign-On (SSO), Active Directory / LDAP\nor other external database / login provider.  Example (Login without using password):  package   webgeaz.sufia.service ;  import   com.google.inject.Inject ;  import   webgeaz.sufia.model.UserProfile ;  import   webgeaz.sufia.web.mgr.UserManager ;  import   webgeaz.sufia.web.service.LoginService ;  public   class   LoginWithoutPassword   implements   LoginService   { \n\n     private   final   UserManager   userManager ; \n\n     @Inject \n     public   LoginWithoutPassword ( UserManager   userManager )   { \n         this . userManager   =   userManager ; \n     } \n\n     @Override \n     public   UserProfile   login ( String   loginId ,   String   password )   { \n         if   ( loginId   !=   null     loginId . startsWith ( VALID- ))   { \n             return   userManager . findByLoginId ( loginId ); \n         }   else   { \n             return   userManager . login ( loginId ,   password ); \n         } \n     }  }", 
            "title": "(Option 2) Override Login process"
        }, 
        {
            "location": "/developer/how-to/user-program/", 
            "text": "User Program\n\n\nApart from SUFIA's own Transaction, Query and Data, there is another mechanism to write your codes called \"User Program\". \n\n\nBasically, it is a free format codes that you can write using either Python or Groovy. It is similar to a Servlet itself where you can do more things that maybe impossible with Transaction. This feature is intended for more advanced developers who are familiar with Servlet itself.\n\n\nYou can write your own program file outside of SUFIA and upload it using \nFile Manager\n. After that you can create a menu for it and have it side-by-side with other Transactions.\n\n\nPython Example\n\n\n#simple program to check your IP address\n\n\nyour_ip\n \n=\n \nrequest\n.\ngetRemoteAddr\n()\n\n\nprint\n \nh1\n\n\nprint\n \nYour IP address is : \n%s\n \n%\n \nyour_ip\n\n\nprint\n \n/h1\n\n\n\n\n\nSave the file as \nuser_program1.py\n and upload using File Manager.\n\n\nSample Output\n\n\n\n\nVariables passed by SUFIA: \n\n\n\n\ndataSource\n - local database \njavax.sql.DataSource\n\n\nrequest\n - current request \njavax.servlet.http.HttpServletRequest\n\n\n\n\nGroovy Example\n\n\nTBD", 
            "title": "Free Format Program"
        }, 
        {
            "location": "/developer/how-to/user-program/#user-program", 
            "text": "Apart from SUFIA's own Transaction, Query and Data, there is another mechanism to write your codes called \"User Program\".   Basically, it is a free format codes that you can write using either Python or Groovy. It is similar to a Servlet itself where you can do more things that maybe impossible with Transaction. This feature is intended for more advanced developers who are familiar with Servlet itself.  You can write your own program file outside of SUFIA and upload it using  File Manager . After that you can create a menu for it and have it side-by-side with other Transactions.", 
            "title": "User Program"
        }, 
        {
            "location": "/developer/how-to/user-program/#python-example", 
            "text": "#simple program to check your IP address  your_ip   =   request . getRemoteAddr ()  print   h1  print   Your IP address is :  %s   %   your_ip  print   /h1   Save the file as  user_program1.py  and upload using File Manager.  Sample Output   Variables passed by SUFIA:    dataSource  - local database  javax.sql.DataSource  request  - current request  javax.servlet.http.HttpServletRequest", 
            "title": "Python Example"
        }, 
        {
            "location": "/developer/how-to/user-program/#groovy-example", 
            "text": "TBD", 
            "title": "Groovy Example"
        }, 
        {
            "location": "/operator/console/", 
            "text": "Operator Console\n\n\nOperator console is a tool provided for application administrators. The application administrator can control the overall status of the application. You can turn off access to SUFIA itself (whole application), group level or individual application.\n\n\nThis is useful in case of maintenance, bug fixing or other operational activities that affect certain parts of the application. You can selectively turn off certain transactions without affecting other transactions.\n\n\nIf SYSTEM status is turned off, only user with role \nMASTER\n is able to access the system.", 
            "title": "Operator Console"
        }, 
        {
            "location": "/operator/console/#operator-console", 
            "text": "Operator console is a tool provided for application administrators. The application administrator can control the overall status of the application. You can turn off access to SUFIA itself (whole application), group level or individual application.  This is useful in case of maintenance, bug fixing or other operational activities that affect certain parts of the application. You can selectively turn off certain transactions without affecting other transactions.  If SYSTEM status is turned off, only user with role  MASTER  is able to access the system.", 
            "title": "Operator Console"
        }
    ]
}