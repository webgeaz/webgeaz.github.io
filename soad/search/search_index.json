{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"S\u00d8AD Documentation","text":"<p>Welcome to the official documentation for S\u00d8AD, which is divided into two main parts:</p> <ol> <li>S\u00d8AD Framework</li> <li>S\u00d8AD Online IDE</li> </ol> <p>This documentation is designed to help developers and technical teams quickly understand and adopt S\u00d8AD for building web applications efficiently. It covers core concepts, technical architecture, usage patterns, and tooling that together make S\u00d8AD a productive, modern development environment.</p>"},{"location":"index.html#1-sad-framework","title":"1. S\u00d8AD Framework","text":"<p>The S\u00d8AD Framework is a convention-over-configuration MVC web framework built on Java and Jython. It includes:</p> <ul> <li>An action-based routing model</li> <li>A transaction-centric controller design</li> <li>ActiveJDBC-powered models</li> <li>Handlebars.java for templating</li> <li>Embedded application server</li> <li>Container-ready deployment model</li> </ul> <p>Whether you are building enterprise back-office apps or modular microservices, S\u00d8AD helps you focus on business logic instead of glue code.</p>"},{"location":"index.html#2-sad-online-ide","title":"2. S\u00d8AD Online IDE","text":"<p>The S\u00d8AD Online IDE is a browser-based development platform built specifically for S\u00d8AD. It provides tools for:</p> <ul> <li>Managing your database schema and querying data</li> <li>Creating and editing transactions with code suggestions</li> <li>Viewing and downloading server logs for troubleshooting</li> <li>Uploading and organizing static files and assets</li> </ul> <p>This online environment streamlines common development tasks, letting you iterate faster and test instantly without installing anything locally.</p> <p>Each chapter in this documentation will guide you through different components of both the framework and the IDE, with practical examples and conventions.</p> <p>Let\u2019s begin by diving into the framework fundamentals.</p> <p>Copyright Notice</p> <p>All third-party components integrated in S\u00d8AD Framework, including but not limited to Java, MySQL, Jython, ActiveJDBC, Handlebars.java, Bootstrap, jQuery, FullCalendar, DataTables, and other libraries, are copyright of their respective owners. S\u00d8AD does not claim ownership of these components and uses them under their original licenses.</p>"},{"location":"advanced-usage/custom-error.html","title":"Custom Error Page","text":"<p>S\u00d8AD allows you to configure custom error pages for standard HTTP errors such as 404 (Not Found) or 500 (Internal Server Error).</p>"},{"location":"advanced-usage/custom-error.html#how-to-configure-custom-error-pages","title":"How to Configure Custom Error Pages","text":"<p>You can define them in the <code>sufia.properties</code> file like this:</p> <pre><code>error.page.404 = /404.html\nerror.page.500 = /500.html\n\nerror.page.403 = /t/page/err403\n</code></pre> <p>You can either link to a static HTML file or to a transaction. For example, the configuration <code>error.page.403 = /t/page/err403</code> will invoke the transaction at /t/page/err403, allowing you to render a dynamic error view from Python logic and Handlebars.</p> <p>These paths should point to static HTML files that reside under the <code>/webapp/</code> directory.</p>"},{"location":"advanced-usage/custom-error.html#example-404html","title":"Example: <code>404.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Page Not Found&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: sans-serif; text-align: center; padding: 5em; }\n        h1 { font-size: 3em; color: #cc0000; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;404 - Page Not Found&lt;/h1&gt;\n    &lt;p&gt;Sorry, the page you're looking for doesn't exist.&lt;/p&gt;\n    &lt;a href=\"/\"&gt;Back to Home&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"advanced-usage/custom-error.html#example-500html","title":"Example: <code>500.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Server Error&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: sans-serif; text-align: center; padding: 5em; }\n        h1 { font-size: 3em; color: #cc0000; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;500 - Internal Server Error&lt;/h1&gt;\n    &lt;p&gt;Something went wrong on the server.&lt;/p&gt;\n    &lt;a href=\"/\"&gt;Try Again&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>These custom pages enhance user experience and provide better error handling for production environments.</p>"},{"location":"advanced-usage/custom-response.html","title":"Custom Response","text":"<p>By default, when you use <code>render</code> to generate the response (e.g. <code>render.as_view()</code>, <code>render.as_json()</code>), the framework handles the HTTP response for you. It automatically sets status code <code>200</code>, assigns the correct content type (<code>text/html</code>, <code>application/json</code>, etc.), sets character encoding to UTF-8 and writes the output.</p> <p>However, if you need full control over the response\u2014such as returning a different status code, setting custom headers, or streaming raw output\u2014you can assign a function directly to <code>ctx.go_to</code>.</p>"},{"location":"advanced-usage/custom-response.html#example-custom-header","title":"Example: Custom Header","text":"<pre><code>class Export(object):\n    def image_viewer(self, ctx):\n        file_path = \"/path/to/image.jpg\"\n        def add_cache_header():\n            response = ctx.getResponse()\n            response.setStatus(200)  \n            response.setContentType(\"image/jpeg\")\n            # set cache for 1 hour\n            response.setHeader(\"Cache-Control\", \"public, max-age=3600\")\n            # write the file to the response output stream\n            with open(file_path, \"rb\") as file:\n                output_stream = response.getOutputStream()\n                output_stream.write(file.read())\n                output_stream.flush()\n            return None  # No further processing needed\n\n        ctx.go_to = add_cache_header\n</code></pre> <p>This method bypasses <code>render</code> and uses the raw <code>HttpServletResponse</code> object. You can stream files, return binary data, or generate server-push content by writing directly to the output stream.</p>"},{"location":"advanced-usage/data-source.html","title":"Data Source & Resource Bundle","text":""},{"location":"advanced-usage/data-source.html#getting-a-connection-from-the-data-source","title":"Getting a Connection from the Data Source","text":"<p>For some reason, you might need to get a connection from the data source directly, for example, to perform batch processing or custom database operations. Here's how you can do that:</p> <pre><code>from webgeaz.sufia.core import Application\n\nclass BatchProcessing(object):\n    def execute(self, ctx):\n        data_source = Application.getDs(\"default\")\n        try:\n            # Get a connection from the data source\n            conn = data_source.getConnection()\n            # do something with the connection\n        finally:\n            # Ensure the connection is closed to avoid resource leaks\n            if conn:\n                conn.close()\n</code></pre> <p>Note</p> <p>In Java, a DataSource represents a facility for storing data, most commonly a database. It is a key component in Java Database Connectivity (JDBC) and serves as a factory for creating connections to a specific data source.</p> <p>Use this approach with caution, as it bypasses the transaction management provided by S\u00d8AD. Always ensure connections are closed properly to avoid resource leaks.</p>"},{"location":"advanced-usage/data-source.html#using-properties-from-the-resource-bundle-sufiaproperties","title":"Using properties from the Resource Bundle (sufia.properties)","text":"<p>S\u00d8AD allows you to access properties defined in the <code>sufia.properties</code> file, which can be useful for configuration settings, API keys, or other constants. Here's how to retrieve a property:</p> <pre><code>from webgeaz.sufia.core import Application\n\nclass Home(object):\n    def __init__(self):\n        # Get a property from the resource bundle\n        self.secret_key = Application.getProperty(\"my.secret.key\")\n\n    def view(self, ctx):\n        response = call_some_service(self.secret_key)\n        ...\n</code></pre> <p>Note</p> <p>Java Properties files, typically with a <code>.properties</code> extension, are used in Java applications primarily for managing configuration data and localization strings.</p> <p>Properties files are widely used to store application-specific configurations. This can include:</p> <ul> <li>Database connection details (URLs, usernames, passwords).</li> <li>Environment settings (e.g., development, testing, production).</li> <li>API keys or service endpoints.</li> <li>Application-specific parameters and flags.</li> </ul>"},{"location":"advanced-usage/filter.html","title":"Servlet Filter","text":"<p>S\u00d8AD allows you to define Servlet Filters that intercept incoming requests. Filters can be used to apply authentication checks, preprocess requests, or enforce headers.</p>"},{"location":"advanced-usage/filter.html#how-to-configure-a-filter","title":"How to Configure a Filter","text":"<p>To register a servlet filter, define it in your <code>sufia.properties</code> file:</p> <pre><code>filter.auth.mapping = /*\nfilter.auth.file = webapp/WEB-INF/jython/default/base/auth_filter.py\n</code></pre> <ul> <li><code>auth</code> is the filter name (each filter must have a unique name).</li> <li><code>mapping</code> defines the URL pattern the filter applies to (e.g., <code>/*</code> applies to all requests).</li> <li><code>file</code> points to the Python file containing the filter logic.</li> </ul> <p>You can define multiple filters by adding more entries with different names and mappings.</p>"},{"location":"advanced-usage/filter.html#filter-file-example-auth_filterpy","title":"Filter File Example: <code>auth_filter.py</code>","text":"<p>The filter class must implement the Java <code>javax.servlet.Filter</code> interface through Jython. This allows the filter to be managed by the servlet container and invoked automatically for each matching request.</p> <pre><code>from javax.servlet import Filter\n\nclass Auth_filter(Filter):\n    def doFilter(self, request, response, chain):\n        session = request.getSession()\n        user_id = session.getAttribute(\"user_id\")\n\n        # If url is for login, allow it to proceed without authentication\n        if request.getRequestURI().endswith(\"/t/auth/login\"):\n            chain.doFilter(request, response)\n            return\n\n        # Check if user is authenticated\n        if user_id is None:\n            # If not authenticated, redirect to login page\n            response.sendRedirect(request.getContextPath() + \"/t/auth/login\")\n            return\n\n        # If authenticated, continue processing the request\n        chain.doFilter(request, response)\n</code></pre>"},{"location":"advanced-usage/filter.html#how-it-works","title":"How It Works","text":"<ul> <li>The <code>doFilter(request, response, chain)</code> method is called automatically for each request that matches the configured mapping.</li> <li>The filter has access to the HTTP request and response objects.</li> <li>If the request should not proceed (e.g. user not authenticated), it can redirect or block.</li> <li>To allow the request to continue to the next filter or target transaction, call <code>chain.doFilter(request, response)</code>.</li> </ul> <p>Important Note</p> <p>To avoid infinite loops, ensure your filter logic does not redirect to a URL that triggers the same filter repeatedly. For example, if your filter redirects to a login page, ensure that the login URL is excluded from the filter's mapping.</p> <p>Filters give you full control to extend the request lifecycle without modifying each transaction manually. You can create multiple filters and map them to specific URL patterns, enabling clean separation of concerns in your application.</p>"},{"location":"advanced-usage/inheritance.html","title":"Transaction: Inheritance and Composition","text":"<p>In S\u00d8AD Framework, transactions are the primary way to handle web requests. Transactions often share common logic, such as master page layout, user authentication, or retrieving user information. To avoid code duplication and improve maintainability, S\u00d8AD supports usage of inheritance and composition in transaction classes.</p> <ul> <li>Inheritance: Extending a base transaction class to reuse common behavior.</li> <li>Composition: Incorporating other classes within a transaction class to establish a \"has-a\" relationship. This approach enables the transaction to delegate specific tasks to helper classes, promoting modularity and encapsulation of related functionality.</li> </ul> <p>Both techniques help keep your code DRY (Don't Repeat Yourself) and maintainable.</p>"},{"location":"advanced-usage/inheritance.html#inheritance","title":"Inheritance","text":"<p>Inheritance allows transactions to share and extend common behavior defined in a parent transaction class. This is particularly useful for common actions like authentication, fetching user details, or rendering standard layouts.</p>"},{"location":"advanced-usage/inheritance.html#example-of-inheritance","title":"Example of Inheritance:","text":"<p>Base Transaction:</p> base_transaction.py<pre><code>from utils import render\n\nclass BaseTransaction(object):\n    def __init__(self):\n        # Optional: initialize any common properties or methods\n        pass\n\n    def view(self, ctx):\n        pass\n\n    def get_user_info(self, ctx):\n        request = ctx.getRequest()\n        session = request.getSession()\n        user_id = session.getAttribute(\"user_id\")\n        return user_id\n</code></pre> <p>Derived Transaction:</p> dashboard.py<pre><code>from default.common.base_transaction import BaseTransaction\nfrom utils import render\n\nclass Dashboard(BaseTransaction):\n    def __init__(self):\n        # Optional: call parent constructor if needed\n        super(BaseTransaction, self).__init__()\n\n    def view(self, ctx):\n        # Use inherited method to get user ID\n        current_logged_in_user = self.get_user_info(ctx)\n\n        ctx.output[\"user_id\"] = current_logged_in_user\n        ctx.go_to = render.as_view(ctx, \"dashboard\")\n</code></pre> <p>In this example, <code>Dashboard</code> inherits from <code>BaseTransaction</code>. This setup ensures consistent user context is always passed to the view without redundant code.</p>"},{"location":"advanced-usage/inheritance.html#composition","title":"Composition","text":"<p>Composition in object-oriented programming represents a \"has-a\" relationship. Instead of inheriting behavior from a parent class, composition means that a class contains one or more objects from other classes as part of its structure.</p> <p>In S\u00d8AD, this allows a transaction to delegate responsibilities to composed objects. It promotes better separation of concerns and greater flexibility compared to inheritance.</p>"},{"location":"advanced-usage/inheritance.html#example-of-composition","title":"Example of Composition:","text":"<p>User Class: </p> user_service.py<pre><code>from models import User\n\nclass UserService(object):\n    def get_user_profile(user_id):\n        # Fetch user profile from the database\n        user = User.findById(user_id)\n        if not user:\n            raise Exception(\"User not found\")\n        return user\n\n    def update_user_profile(self, user, data):\n        #set user properties from data\n        ...\n        #other logic to update user profile\n        ...\n        user.saveIt()\n</code></pre> <p>Transaction Class using Composition:</p> profile.py<pre><code>from utils import render\nfrom default.service.user_service import UserService\n\nclass Profile(Layout):\n    def __init__(self):\n        self.user_service = UserService()\n\n    def view(self, ctx):\n        user_id = ...\n        user_profile = self.user_service.get_user_profile(user_id)\n        ctx.output[\"profile\"] = user_profile\n        ctx.go_to = render.as_view(ctx, \"profile\")\n\n    def update(self, ctx):\n        user_id = ...\n        #setup parameters from request\n        data = ...\n        user_profile = self.user_service.get_user_profile(user_id)\n        self.user_service.update_user_profile(user_profile, data)\n        ctx.go_to = render.as_view(ctx, \"profile\")\n</code></pre> <p>Here, <code>Profile</code> uses the <code>UserService</code> class to handle all user-related logic. This pattern keeps the transaction focused on request handling and delegates specific functionality to dedicated service classes. </p> <p>Important Note</p> <p>While S\u00d8AD supports inheritance and composition, it is crucial to use these features judiciously. Over-reliance on shared structures can lead to tightly coupled code, making it difficult to manage and debug transactions.</p> <p>S\u00d8AD promotes a discrete design style where transactions are ideally isolated and self-contained. While inheritance and composition are supported, overusing shared structures may introduce tight coupling, leading to unintended side effects when one transaction changes or fails. By keeping each transaction independent, the application becomes more robust, easier to debug, and safer to maintain in production environments.</p>"},{"location":"advanced-usage/internationalization.html","title":"Multi-language Support","text":"<p>To enable support for multiple languages in your S\u00d8AD application, you can use the built-in internationalization (i18n) features. These features allow you to deliver localized content tailored to the user's language preferences.</p> <p>Here\u2019s an example of how to update the <code>messages.properties</code> file to include translations for various languages (using Transaction):</p> TransactionViewProperties Files lang.py<pre><code>from utils import render\n\nfrom java.io import File\nfrom java.nio.charset import StandardCharsets\nfrom java.util import ResourceBundle\nfrom com.google.common.io import Files\n\nclass Lang(object):\n    def view(self, ctx):\n        pass\n\n    def get_content(self, ctx):\n        request = ctx.getRequest()\n        lang = request.getParameter(\"lang\")\n        if not lang:\n            lang = \"en\"\n        file_name = None\n        if lang == \"en\":\n            file_name = \"messages.properties\"\n        elif lang == \"ms\":\n            file_name = \"messages_ms.properties\"\n        elif lang == \"zh\":\n            file_name = \"messages_zh.properties\"\n        if file_name:\n            file_path = request.getServletContext().getRealPath(\"/WEB-INF/classes/%s\" % file_name)\n            file = File(file_path)\n            if not file.exists():\n                file.createNewFile()\n            if file_path:\n                content = Files.asCharSource(file, StandardCharsets.UTF_8).read()\n                ctx.go_to = render.as_string(ctx, content)\n                return\n        ctx.go_to = render.as_string(ctx, \"\")\n\n    def save(self, ctx):\n        request = ctx.getRequest()\n        lang = request.getParameter(\"lang\")\n        content = request.getParameter(\"content\")\n        file = None\n        if lang == \"en\":\n            file = \"messages.properties\"\n        elif lang == \"ms\":\n            file = \"messages_ms.properties\"\n        elif lang == \"zh\":\n            file = \"messages_zh.properties\"\n        if file and content:\n            pfile = request.getServletContext().getRealPath(\"/WEB-INF/classes/%s\" % file)\n            if pfile:\n                Files.asCharSink(File(pfile), StandardCharsets.UTF_8).write(content)\n                ctx.go_to = render.as_json(ctx, {\"success\": True})\n                ResourceBundle.clearCache()\n                return\n        ctx.go_to = render.as_json(ctx, {\"success\": False})\n</code></pre> lang.html<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt;\n    &lt;title&gt;Manage Language&lt;/title&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n    #my-editor {\n        height: 750px;\n        width: 100%;\n    }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=\"s0-crud-body\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;\n        &lt;div class=\"card\"&gt;\n            &lt;div class=\"card-header\"&gt;\n            &lt;div class=\"d-flex justify-content-between\"&gt;\n                &lt;h5 class=\"heading mb-0\"&gt;Manage Language&lt;/h5&gt;\n                &lt;div&gt;\n                    &lt;a class=\"btn btn-default btn-sm b_sel\" id=\"b_sel_en\" data-val=\"en\" href=\"#\"&gt;\n                        English\n                    &lt;/a&gt;\n                    &lt;a class=\"btn btn-default btn-sm b_sel\" data-val=\"ms\" href=\"#\"&gt;\n                        Bahasa Melayu\n                    &lt;/a&gt;\n                    &lt;a class=\"btn btn-default btn-sm b_sel\" data-val=\"zh\" href=\"#\"&gt;\n                        Mandarin\n                    &lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"card-body\"&gt;\n            &lt;div id=\"my-editor\"&gt;&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"toast-container position-fixed bottom-0 end-0 p-3\"&gt;\n        &lt;div id=\"liveToast\" class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" data-bs-delay=\"5000\" data-bs-autohide=\"true\"&gt;\n        &lt;div class=\"toast-body\"&gt;\n            &lt;center&gt;Save Success&lt;/center&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;style&gt;\n    &lt;/style&gt;\n    &lt;!-- JS --&gt;\n    &lt;script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/ace/1.36.2/ace.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/ace/1.36.2/mode-properties.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n    var currentLang = \"en\";\n\n    $(function() {\n        $(\".b_sel\").click(function() {\n        if (!window.editorCode.session.getUndoManager().isClean()) {\n            alert(\"Unsaved Changes\");\n            return;\n        }\n        doLoad($(this).attr(\"data-val\"));\n        $(\".b_sel\").each(function(i, elem) {\n            $(elem).removeClass(\"btn-primary\");\n        });\n        $(this).addClass(\"btn-primary\");\n        });\n        $(\"#b_sel_en\").click();\n        window.myToast = new bootstrap.Toast(document.getElementById(\"liveToast\"), {})\n    });\n\n    function doLoad(lang) {\n        $.get(\"{{ctxPath}}/t/example/lang/get_content\", {\"lang\":lang}, function(data) {\n        currentLang = lang;\n        window.editorCode.session.setValue(data);\n        window.editorCode.session.getUndoManager().reset();\n        }, \"text\");  \n    }\n\n    function doSave() {\n        var opaque = window.editorCode.getValue();\n        $.post(\"{{ctxPath}}/t/example/lang/save\", {\"lang\":currentLang, \"content\":opaque}, function(data) {\n        if (data.success) {\n            window.myToast.show();\n            window.editorCode.session.getUndoManager().reset();\n        }\n        });  \n    }\n\n    window.editorCode = ace.edit(\"my-editor\");\n    window.editorCode.session.setMode(\"ace/mode/properties\");\n    window.editorCode.setAutoScrollEditorIntoView(true);\n    window.editorCode.setShowPrintMargin(false);\n    window.editorCode.session.getUndoManager().reset();\n    window.editorCode.commands.addCommand({\n        name: 'save',\n        bindKey: {win: \"Ctrl-S\", \"mac\": \"Cmd-S\"},\n        exec: function(editor) {\n        doSave(false);\n        }\n    });\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>To support multiple languages, you need to create separate properties files for each language. Here\u2019s how you can structure your properties files:</p> messages.properties<pre><code># Messages in English\ngreeting=Hello\nfarewell=Goodbye\n</code></pre> messages_ms.properties<pre><code># Messages in Malay\ngreeting=Selamat datang\nfarewell=Selamat tinggal\n</code></pre> messages_zh.properties<pre><code># Messages in Chinese\ngreeting=\u4f60\u597d\nfarewell=\u518d\u89c1\n</code></pre> <p>Tips</p> <p>If you're using a containerized environment, consider mounting the properties files to the <code>/app/conf/</code> directory. This directory is included in the classpath.</p>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"code-libraries/ajax.html","title":"AJAX","text":"<p>S\u00d8AD provides seamless AJAX support through JSON responses and form handling. This recipe demonstrates how to create interactive web applications using different JavaScript approaches - from vanilla JavaScript to modern libraries like jQuery and Axios.</p>"},{"location":"code-libraries/ajax.html#basic-ajax-with-vanilla-javascript","title":"Basic AJAX with Vanilla JavaScript","text":"TransactionViewSQLOutput user_search.py<pre><code>from utils import render\nfrom models import User\nimport json\n\nclass User_search(object):\n    def view(self, ctx):\n        # Load the initial HTML page\n        ctx.go_to = render.as_view(ctx, \"user_search\")\n\n    def search(self, ctx):\n        # Handle AJAX search request\n        request = ctx.getRequest()\n        query = request.getParameter(\"q\") or \"\"\n\n        if len(query) &lt; 2:\n            result = {\"users\": [], \"message\": \"Please enter at least 2 characters\"}\n        else:\n            # Search users by name or email\n            users = User.where(\"name LIKE ? OR email LIKE ?\", \n                             \"%%%s%%\" % query, \"%%%s%%\" % query).limit(10)\n\n            user_list = []\n            for user in users:\n                user_list.append({\n                    \"id\": user.get(\"id\"),\n                    \"name\": user.get(\"name\"),\n                    \"email\": user.get(\"email\"),\n                    \"department\": user.get(\"department\")\n                })\n\n            result = {\n                \"users\": user_list,\n                \"total\": len(user_list),\n                \"query\": query\n            }\n\n        ctx.go_to = render.as_json(ctx, result)\n\n    def details(self, ctx):\n        # Get user details by ID\n        request = ctx.getRequest()\n        user_id = request.getParameter(\"id\")\n\n        if not user_id:\n            result = {\"error\": \"User ID is required\"}\n        else:\n            user = User.findById(user_id)\n            if user:\n                result = {\n                    \"user\": {\n                        \"id\": user.get(\"id\"),\n                        \"name\": user.get(\"name\"),\n                        \"email\": user.get(\"email\"),\n                        \"department\": user.get(\"department\"),\n                        \"phone\": user.get(\"phone\"),\n                        \"created_at\": str(user.get(\"created_at\"))\n                    }\n                }\n            else:\n                result = {\"error\": \"User not found\"}\n\n        ctx.go_to = render.as_json(ctx, result)\n</code></pre> user_search.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;User Search - Vanilla JavaScript&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        .loading { display: none; }\n        .user-card { cursor: pointer; transition: background-color 0.2s; }\n        .user-card:hover { background-color: #f8f9fa; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;h2&gt;User Search&lt;/h2&gt;\n\n        &lt;!-- Search Form --&gt;\n        &lt;div class=\"row mb-4\"&gt;\n            &lt;div class=\"col-md-6\"&gt;\n                &lt;div class=\"input-group\"&gt;\n                    &lt;input type=\"text\" id=\"searchInput\" class=\"form-control\" \n                           placeholder=\"Search users by name or email...\"&gt;\n                    &lt;button class=\"btn btn-primary\" type=\"button\" onclick=\"searchUsers()\"&gt;\n                        &lt;span class=\"loading spinner-border spinner-border-sm me-2\" role=\"status\"&gt;&lt;/span&gt;\n                        Search\n                    &lt;/button&gt;\n                &lt;/div&gt;\n                &lt;div id=\"message\" class=\"mt-2\"&gt;&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Search Results --&gt;\n        &lt;div id=\"results\" class=\"row\"&gt;&lt;/div&gt;\n\n        &lt;!-- User Details Modal --&gt;\n        &lt;div class=\"modal fade\" id=\"userModal\" tabindex=\"-1\"&gt;\n            &lt;div class=\"modal-dialog\"&gt;\n                &lt;div class=\"modal-content\"&gt;\n                    &lt;div class=\"modal-header\"&gt;\n                        &lt;h5 class=\"modal-title\"&gt;User Details&lt;/h5&gt;\n                        &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"&gt;&lt;/button&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"modal-body\" id=\"userDetails\"&gt;\n                        &lt;!-- User details will be loaded here --&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        // Search users using vanilla JavaScript\n        function searchUsers() {\n            const query = document.getElementById('searchInput').value;\n            const loadingSpinner = document.querySelector('.loading');\n            const messageDiv = document.getElementById('message');\n            const resultsDiv = document.getElementById('results');\n\n            // Show loading state\n            loadingSpinner.style.display = 'inline-block';\n            messageDiv.innerHTML = '';\n            resultsDiv.innerHTML = '';\n\n            // Create XMLHttpRequest\n            const xhr = new XMLHttpRequest();\n            xhr.open('POST', '/t/example/user_search/search', true);\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    loadingSpinner.style.display = 'none';\n\n                    if (xhr.status === 200) {\n                        try {\n                            const response = JSON.parse(xhr.responseText);\n                            displayResults(response);\n                        } catch (e) {\n                            messageDiv.innerHTML = '&lt;div class=\"alert alert-danger\"&gt;Error parsing response&lt;/div&gt;';\n                        }\n                    } else {\n                        messageDiv.innerHTML = '&lt;div class=\"alert alert-danger\"&gt;Request failed&lt;/div&gt;';\n                    }\n                }\n            };\n\n            xhr.send('q=' + encodeURIComponent(query));\n        }\n\n        // Display search results\n        function displayResults(response) {\n            const messageDiv = document.getElementById('message');\n            const resultsDiv = document.getElementById('results');\n\n            if (response.message) {\n                messageDiv.innerHTML = '&lt;div class=\"alert alert-info\"&gt;' + response.message + '&lt;/div&gt;';\n                return;\n            }\n\n            if (response.users.length === 0) {\n                messageDiv.innerHTML = '&lt;div class=\"alert alert-info\"&gt;No users found&lt;/div&gt;';\n                return;\n            }\n\n            messageDiv.innerHTML = '&lt;div class=\"alert alert-success\"&gt;Found ' + response.total + ' user(s)&lt;/div&gt;';\n\n            let html = '';\n            response.users.forEach(function(user) {\n                html += `\n                    &lt;div class=\"col-md-4 mb-3\"&gt;\n                        &lt;div class=\"card user-card\" onclick=\"showUserDetails(${user.id})\"&gt;\n                            &lt;div class=\"card-body\"&gt;\n                                &lt;h5 class=\"card-title\"&gt;${user.name}&lt;/h5&gt;\n                                &lt;p class=\"card-text\"&gt;\n                                    &lt;small class=\"text-muted\"&gt;${user.email}&lt;/small&gt;&lt;br&gt;\n                                    &lt;span class=\"badge bg-secondary\"&gt;${user.department}&lt;/span&gt;\n                                &lt;/p&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                `;\n            });\n            resultsDiv.innerHTML = html;\n        }\n\n        // Show user details in modal\n        function showUserDetails(userId) {\n            const userDetailsDiv = document.getElementById('userDetails');\n            userDetailsDiv.innerHTML = '&lt;div class=\"text-center\"&gt;&lt;div class=\"spinner-border\" role=\"status\"&gt;&lt;/div&gt;&lt;/div&gt;';\n\n            const xhr = new XMLHttpRequest();\n            xhr.open('POST', '/t/example/user_search/details', true);\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) {\n                    const response = JSON.parse(xhr.responseText);\n                    if (response.error) {\n                        userDetailsDiv.innerHTML = '&lt;div class=\"alert alert-danger\"&gt;' + response.error + '&lt;/div&gt;';\n                    } else {\n                        const user = response.user;\n                        userDetailsDiv.innerHTML = `\n                            &lt;table class=\"table\"&gt;\n                                &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Name:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;${user.name}&lt;/td&gt;&lt;/tr&gt;\n                                &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Email:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;${user.email}&lt;/td&gt;&lt;/tr&gt;\n                                &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Department:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;${user.department}&lt;/td&gt;&lt;/tr&gt;\n                                &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Phone:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;${user.phone || 'N/A'}&lt;/td&gt;&lt;/tr&gt;\n                                &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Created:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;${user.created_at}&lt;/td&gt;&lt;/tr&gt;\n                            &lt;/table&gt;\n                        `;\n                    }\n                }\n            };\n\n            xhr.send('id=' + userId);\n\n            // Show modal\n            new bootstrap.Modal(document.getElementById('userModal')).show();\n        }\n\n        // Search on Enter key\n        document.getElementById('searchInput').addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                searchUsers();\n            }\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE user (\n    id int NOT NULL AUTO_INCREMENT,\n    name varchar(100) NOT NULL,\n    email varchar(150) NOT NULL,\n    department varchar(50),\n    phone varchar(20),\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    UNIQUE KEY email (email)\n);\n\nINSERT INTO user (name, email, department, phone) VALUES\n('Alice Johnson', 'alice.johnson@company.com', 'Engineering', '+1-555-0101'),\n('Bob Smith', 'bob.smith@company.com', 'Marketing', '+1-555-0102'),\n('Carol Davis', 'carol.davis@company.com', 'Engineering', '+1-555-0103'),\n('David Wilson', 'david.wilson@company.com', 'Sales', '+1-555-0104'),\n('Eva Brown', 'eva.brown@company.com', 'HR', '+1-555-0105'),\n('Frank Miller', 'frank.miller@company.com', 'Engineering', '+1-555-0106'),\n('Grace Lee', 'grace.lee@company.com', 'Finance', '+1-555-0107'),\n('Henry Taylor', 'henry.taylor@company.com', 'Marketing', '+1-555-0108'),\n('Iris Chen', 'iris.chen@company.com', 'Engineering', '+1-555-0109'),\n('Jack Anderson', 'jack.anderson@company.com', 'Sales', '+1-555-0110');\n</code></pre>"},{"location":"code-libraries/ajax.html#how-it-works","title":"How It Works","text":"<ul> <li>Search as you type: Real-time user search with vanilla JavaScript</li> <li>Modal details: Click any user card to view detailed information</li> <li>Error handling: Proper error messages and loading states</li> <li>Responsive design: Bootstrap-powered responsive layout</li> </ul>"},{"location":"code-libraries/ajax.html#ajax-form-submission-with-jquery","title":"AJAX Form Submission with jQuery","text":"TransactionViewSQLOutput contact_form.py<pre><code>from utils import render, Log\nfrom models import Contact\nimport json\n\nclass Contact_form(object):\n    def view(self, ctx):\n        # Load the contact form page\n        ctx.go_to = render.as_view(ctx, \"contact_form\")\n\n    def submit(self, ctx):\n        # Handle form submission via AJAX\n        request = ctx.getRequest()\n\n        # Extract form data\n        name = request.getParameter(\"name\") or \"\"\n        email = request.getParameter(\"email\") or \"\"\n        subject = request.getParameter(\"subject\") or \"\"\n        message = request.getParameter(\"message\") or \"\"\n\n        # Validation\n        errors = []\n        if len(name.strip()) &lt; 2:\n            errors.append(\"Name must be at least 2 characters\")\n\n        if \"@\" not in email or len(email) &lt; 5:\n            errors.append(\"Please enter a valid email address\")\n\n        if len(subject.strip()) &lt; 5:\n            errors.append(\"Subject must be at least 5 characters\")\n\n        if len(message.strip()) &lt; 10:\n            errors.append(\"Message must be at least 10 characters\")\n\n        if errors:\n            result = {\n                \"success\": False,\n                \"errors\": errors\n            }\n        else:\n            try:\n                # Save to database\n                contact = Contact()\n                contact.set(\"name\", name.strip())\n                contact.set(\"email\", email.strip())\n                contact.set(\"subject\", subject.strip())\n                contact.set(\"message\", message.strip())\n                contact.set(\"status\", \"new\")\n                contact.save()\n\n                Log.info(ctx, \"New contact form submission from: %s\" % email)\n\n                result = {\n                    \"success\": True,\n                    \"message\": \"Thank you for your message! We'll get back to you soon.\",\n                    \"contact_id\": contact.get(\"id\")\n                }\n            except Exception as e:\n                Log.error(ctx, \"Error saving contact: %s\" % str(e))\n                result = {\n                    \"success\": False,\n                    \"errors\": [\"Sorry, there was an error processing your request\"]\n                }\n\n        ctx.go_to = render.as_json(ctx, result)\n\n    def validate_email(self, ctx):\n        # Real-time email validation endpoint\n        request = ctx.getRequest()\n        email = request.getParameter(\"email\") or \"\"\n\n        if not email:\n            result = {\"valid\": False, \"message\": \"Email is required\"}\n        elif \"@\" not in email or len(email) &lt; 5:\n            result = {\"valid\": False, \"message\": \"Please enter a valid email format\"}\n        else:\n            # Check if email already exists\n            existing = Contact.count(\"email = ?\", email)\n            if existing &gt; 0:\n                result = {\"valid\": False, \"message\": \"This email has already submitted a contact form\"}\n            else:\n                result = {\"valid\": True, \"message\": \"Email looks good!\"}\n\n        ctx.go_to = render.as_json(ctx, result)\n</code></pre> contact_form.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Contact Form - jQuery AJAX&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        .form-feedback { font-size: 0.875em; margin-top: 0.25rem; }\n        .is-validating { position: relative; }\n        .validation-spinner {\n            position: absolute;\n            right: 10px;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 16px;\n            height: 16px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"row justify-content-center\"&gt;\n            &lt;div class=\"col-md-8\"&gt;\n                &lt;h2&gt;Contact Us&lt;/h2&gt;\n                &lt;p class=\"text-muted\"&gt;Send us a message and we'll get back to you as soon as possible.&lt;/p&gt;\n\n                &lt;!-- Alert Messages --&gt;\n                &lt;div id=\"alertContainer\"&gt;&lt;/div&gt;\n\n                &lt;!-- Contact Form --&gt;\n                &lt;form id=\"contactForm\" novalidate&gt;\n                    &lt;div class=\"mb-3\"&gt;\n                        &lt;label for=\"name\" class=\"form-label\"&gt;Full Name &lt;span class=\"text-danger\"&gt;*&lt;/span&gt;&lt;/label&gt;\n                        &lt;input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" required&gt;\n                        &lt;div class=\"form-feedback\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;\n\n                    &lt;div class=\"mb-3\"&gt;\n                        &lt;label for=\"email\" class=\"form-label\"&gt;Email Address &lt;span class=\"text-danger\"&gt;*&lt;/span&gt;&lt;/label&gt;\n                        &lt;div class=\"position-relative\"&gt;\n                            &lt;input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" required&gt;\n                            &lt;div class=\"validation-spinner d-none\"&gt;\n                                &lt;div class=\"spinner-border spinner-border-sm\" role=\"status\"&gt;&lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"form-feedback\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;\n\n                    &lt;div class=\"mb-3\"&gt;\n                        &lt;label for=\"subject\" class=\"form-label\"&gt;Subject &lt;span class=\"text-danger\"&gt;*&lt;/span&gt;&lt;/label&gt;\n                        &lt;input type=\"text\" class=\"form-control\" id=\"subject\" name=\"subject\" required&gt;\n                        &lt;div class=\"form-feedback\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;\n\n                    &lt;div class=\"mb-3\"&gt;\n                        &lt;label for=\"message\" class=\"form-label\"&gt;Message &lt;span class=\"text-danger\"&gt;*&lt;/span&gt;&lt;/label&gt;\n                        &lt;textarea class=\"form-control\" id=\"message\" name=\"message\" rows=\"5\" required&gt;&lt;/textarea&gt;\n                        &lt;div class=\"form-feedback\"&gt;&lt;/div&gt;\n                        &lt;div class=\"form-text\"&gt;Minimum 10 characters&lt;/div&gt;\n                    &lt;/div&gt;\n\n                    &lt;button type=\"submit\" class=\"btn btn-primary\" id=\"submitBtn\"&gt;\n                        &lt;span class=\"spinner-border spinner-border-sm d-none me-2\" role=\"status\"&gt;&lt;/span&gt;\n                        Send Message\n                    &lt;/button&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        $(document).ready(function() {\n            // Real-time email validation\n            let emailTimeout;\n            $('#email').on('input', function() {\n                const email = $(this).val();\n                const $input = $(this);\n                const $feedback = $input.next().next('.form-feedback');\n                const $spinner = $input.next('.validation-spinner');\n\n                // Clear previous timeout\n                clearTimeout(emailTimeout);\n\n                // Reset states\n                $input.removeClass('is-valid is-invalid');\n                $feedback.removeClass('text-success text-danger').empty();\n                $spinner.addClass('d-none');\n\n                if (email.length &lt; 3) return;\n\n                // Show spinner and validate after delay\n                emailTimeout = setTimeout(function() {\n                    $spinner.removeClass('d-none');\n\n                    $.ajax({\n                        url: '/t/example/contact_form/validate_email',\n                        method: 'POST',\n                        data: { email: email },\n                        success: function(response) {\n                            $spinner.addClass('d-none');\n                            if (response.valid) {\n                                $input.addClass('is-valid');\n                                $feedback.addClass('text-success').text(response.message);\n                            } else {\n                                $input.addClass('is-invalid');\n                                $feedback.addClass('text-danger').text(response.message);\n                            }\n                        },\n                        error: function() {\n                            $spinner.addClass('d-none');\n                            $input.addClass('is-invalid');\n                            $feedback.addClass('text-danger').text('Error validating email');\n                        }\n                    });\n                }, 500);\n            });\n\n            // Form submission\n            $('#contactForm').on('submit', function(e) {\n                e.preventDefault();\n\n                const $form = $(this);\n                const $submitBtn = $('#submitBtn');\n                const $spinner = $submitBtn.find('.spinner-border');\n                const $alertContainer = $('#alertContainer');\n\n                // Show loading state\n                $submitBtn.prop('disabled', true);\n                $spinner.removeClass('d-none');\n                $alertContainer.empty();\n\n                // Clear previous validation states\n                $form.find('.form-control').removeClass('is-valid is-invalid');\n                $form.find('.form-feedback').empty();\n\n                // Submit form\n                $.ajax({\n                    url: '/t/example/contact_form/submit',\n                    method: 'POST',\n                    data: $form.serialize(),\n                    success: function(response) {\n                        if (response.success) {\n                            // Success message\n                            $alertContainer.html(\n                                '&lt;div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\"&gt;' +\n                                response.message +\n                                '&lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"&gt;&lt;/button&gt;' +\n                                '&lt;/div&gt;'\n                            );\n\n                            // Reset form\n                            $form[0].reset();\n\n                            // Scroll to top\n                            $('html, body').animate({ scrollTop: 0 }, 300);\n                        } else {\n                            // Show field-specific errors\n                            $alertContainer.html(\n                                '&lt;div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\"&gt;' +\n                                '&lt;strong&gt;Please fix the following errors:&lt;/strong&gt;&lt;ul class=\"mb-0 mt-2\"&gt;' +\n                                response.errors.map(error =&gt; '&lt;li&gt;' + error + '&lt;/li&gt;').join('') +\n                                '&lt;/ul&gt;' +\n                                '&lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"&gt;&lt;/button&gt;' +\n                                '&lt;/div&gt;'\n                            );\n                        }\n                    },\n                    error: function() {\n                        $alertContainer.html(\n                            '&lt;div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\"&gt;' +\n                            'Sorry, there was an error processing your request. Please try again.' +\n                            '&lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"&gt;&lt;/button&gt;' +\n                            '&lt;/div&gt;'\n                        );\n                    },\n                    complete: function() {\n                        // Reset loading state\n                        $submitBtn.prop('disabled', false);\n                        $spinner.addClass('d-none');\n                    }\n                });\n            });\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE contact (\n    id int NOT NULL AUTO_INCREMENT,\n    name varchar(100) NOT NULL,\n    email varchar(150) NOT NULL,\n    subject varchar(200) NOT NULL,\n    message text NOT NULL,\n    status enum('new','read','replied') DEFAULT 'new',\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_email (email),\n    KEY idx_status (status)\n);\n</code></pre>"},{"location":"code-libraries/ajax.html#key-features","title":"Key Features","text":"<ul> <li>Real-time validation: Email validation as you type</li> <li>Form serialization: jQuery handles form data automatically</li> <li>Loading states: Visual feedback during submission</li> <li>Error handling: Field-specific error messages</li> </ul>"},{"location":"code-libraries/ajax.html#modern-ajax-with-fetch-api","title":"Modern AJAX with Fetch API","text":"TransactionViewSQLOutput task_manager.py<pre><code>from utils import render\nfrom models import Task\nimport json\nfrom java.util import Date\n\nclass Task_manager(object):\n    def view(self, ctx):\n        # Load task manager interface\n        ctx.go_to = render.as_view(ctx, \"task_manager\")\n\n    def list(self, ctx):\n        # Get all tasks\n        request = ctx.getRequest()\n        status = request.getParameter(\"status\") or \"all\"\n\n        if status == \"all\":\n            tasks = Task.findAll().orderBy(\"created_at DESC\")\n        else:\n            tasks = Task.where(\"status = ?\", status).orderBy(\"created_at DESC\")\n\n        task_list = []\n        for task in tasks:\n            task_list.append({\n                \"id\": task.get(\"id\"),\n                \"title\": task.get(\"title\"),\n                \"description\": task.get(\"description\"),\n                \"status\": task.get(\"status\"),\n                \"priority\": task.get(\"priority\"),\n                \"created_at\": str(task.get(\"created_at\")),\n                \"due_date\": str(task.get(\"due_date\")) if task.get(\"due_date\") else None\n            })\n\n        result = {\"tasks\": task_list, \"total\": len(task_list)}\n        ctx.go_to = render.as_json(ctx, result)\n\n    def create(self, ctx):\n        # Create new task\n        request = ctx.getRequest()\n        title = request.getParameter(\"title\") or \"\"\n        description = request.getParameter(\"description\") or \"\"\n        priority = request.getParameter(\"priority\") or \"medium\"\n        due_date = request.getParameter(\"due_date\")\n\n        if len(title.strip()) &lt; 3:\n            result = {\"success\": False, \"error\": \"Title must be at least 3 characters\"}\n        else:\n            try:\n                task = Task()\n                task.set(\"title\", title.strip())\n                task.set(\"description\", description.strip())\n                task.set(\"status\", \"pending\")\n                task.set(\"priority\", priority)\n                if due_date:\n                    # Simple date format handling\n                    task.set(\"due_date\", due_date)\n                task.save()\n\n                result = {\n                    \"success\": True,\n                    \"task\": {\n                        \"id\": task.get(\"id\"),\n                        \"title\": task.get(\"title\"),\n                        \"description\": task.get(\"description\"),\n                        \"status\": task.get(\"status\"),\n                        \"priority\": task.get(\"priority\"),\n                        \"created_at\": str(task.get(\"created_at\"))\n                    }\n                }\n            except Exception as e:\n                result = {\"success\": False, \"error\": \"Error creating task: %s\" % str(e)}\n\n        ctx.go_to = render.as_json(ctx, result)\n\n    def update_status(self, ctx):\n        # Update task status\n        request = ctx.getRequest()\n        task_id = request.getParameter(\"id\")\n        new_status = request.getParameter(\"status\")\n\n        if not task_id or not new_status:\n            result = {\"success\": False, \"error\": \"Task ID and status are required\"}\n        else:\n            try:\n                task = Task.findById(task_id)\n                if task:\n                    task.set(\"status\", new_status)\n                    task.save()\n                    result = {\"success\": True, \"message\": \"Task status updated\"}\n                else:\n                    result = {\"success\": False, \"error\": \"Task not found\"}\n            except Exception as e:\n                result = {\"success\": False, \"error\": \"Error updating task: %s\" % str(e)}\n\n        ctx.go_to = render.as_json(ctx, result)\n\n    def delete(self, ctx):\n        # Delete task\n        request = ctx.getRequest()\n        task_id = request.getParameter(\"id\")\n\n        if not task_id:\n            result = {\"success\": False, \"error\": \"Task ID is required\"}\n        else:\n            try:\n                task = Task.findById(task_id)\n                if task:\n                    task.delete()\n                    result = {\"success\": True, \"message\": \"Task deleted\"}\n                else:\n                    result = {\"success\": False, \"error\": \"Task not found\"}\n            except Exception as e:\n                result = {\"success\": False, \"error\": \"Error deleting task: %s\" % str(e)}\n\n        ctx.go_to = render.as_json(ctx, result)\n</code></pre> task_manager.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Task Manager - Fetch API&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        .task-card { transition: transform 0.2s; }\n        .task-card:hover { transform: translateY(-2px); }\n        .priority-high { border-left: 4px solid #dc3545; }\n        .priority-medium { border-left: 4px solid #ffc107; }\n        .priority-low { border-left: 4px solid #28a745; }\n        .status-completed { opacity: 0.7; text-decoration: line-through; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"d-flex justify-content-between align-items-center mb-4\"&gt;\n            &lt;h2&gt;&lt;i class=\"fas fa-tasks me-2\"&gt;&lt;/i&gt;Task Manager&lt;/h2&gt;\n            &lt;button class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#taskModal\"&gt;\n                &lt;i class=\"fas fa-plus me-2\"&gt;&lt;/i&gt;New Task\n            &lt;/button&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Filter Tabs --&gt;\n        &lt;ul class=\"nav nav-tabs mb-4\" id=\"statusTabs\"&gt;\n            &lt;li class=\"nav-item\"&gt;\n                &lt;a class=\"nav-link active\" data-status=\"all\" href=\"#\"&gt;All Tasks&lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li class=\"nav-item\"&gt;\n                &lt;a class=\"nav-link\" data-status=\"pending\" href=\"#\"&gt;Pending&lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li class=\"nav-item\"&gt;\n                &lt;a class=\"nav-link\" data-status=\"in_progress\" href=\"#\"&gt;In Progress&lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li class=\"nav-item\"&gt;\n                &lt;a class=\"nav-link\" data-status=\"completed\" href=\"#\"&gt;Completed&lt;/a&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n\n        &lt;!-- Alert Container --&gt;\n        &lt;div id=\"alertContainer\"&gt;&lt;/div&gt;\n\n        &lt;!-- Tasks Container --&gt;\n        &lt;div id=\"tasksContainer\" class=\"row\"&gt;\n            &lt;!-- Tasks will be loaded here --&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Loading Indicator --&gt;\n        &lt;div id=\"loadingIndicator\" class=\"text-center py-4 d-none\"&gt;\n            &lt;div class=\"spinner-border\" role=\"status\"&gt;\n                &lt;span class=\"visually-hidden\"&gt;Loading...&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Task Modal --&gt;\n    &lt;div class=\"modal fade\" id=\"taskModal\" tabindex=\"-1\"&gt;\n        &lt;div class=\"modal-dialog\"&gt;\n            &lt;div class=\"modal-content\"&gt;\n                &lt;div class=\"modal-header\"&gt;\n                    &lt;h5 class=\"modal-title\"&gt;Create New Task&lt;/h5&gt;\n                    &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"&gt;&lt;/button&gt;\n                &lt;/div&gt;\n                &lt;div class=\"modal-body\"&gt;\n                    &lt;form id=\"taskForm\"&gt;\n                        &lt;div class=\"mb-3\"&gt;\n                            &lt;label for=\"title\" class=\"form-label\"&gt;Title *&lt;/label&gt;\n                            &lt;input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" required&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"mb-3\"&gt;\n                            &lt;label for=\"description\" class=\"form-label\"&gt;Description&lt;/label&gt;\n                            &lt;textarea class=\"form-control\" id=\"description\" name=\"description\" rows=\"3\"&gt;&lt;/textarea&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"mb-3\"&gt;\n                            &lt;label for=\"priority\" class=\"form-label\"&gt;Priority&lt;/label&gt;\n                            &lt;select class=\"form-select\" id=\"priority\" name=\"priority\"&gt;\n                                &lt;option value=\"low\"&gt;Low&lt;/option&gt;\n                                &lt;option value=\"medium\" selected&gt;Medium&lt;/option&gt;\n                                &lt;option value=\"high\"&gt;High&lt;/option&gt;\n                            &lt;/select&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"mb-3\"&gt;\n                            &lt;label for=\"due_date\" class=\"form-label\"&gt;Due Date&lt;/label&gt;\n                            &lt;input type=\"date\" class=\"form-control\" id=\"due_date\" name=\"due_date\"&gt;\n                        &lt;/div&gt;\n                    &lt;/form&gt;\n                &lt;/div&gt;\n                &lt;div class=\"modal-footer\"&gt;\n                    &lt;button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"&gt;Cancel&lt;/button&gt;\n                    &lt;button type=\"button\" class=\"btn btn-primary\" id=\"saveTaskBtn\"&gt;\n                        &lt;span class=\"spinner-border spinner-border-sm d-none me-2\"&gt;&lt;/span&gt;\n                        Create Task\n                    &lt;/button&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        class TaskManager {\n            constructor() {\n                this.currentStatus = 'all';\n                this.init();\n            }\n\n            init() {\n                this.loadTasks();\n                this.attachEventListeners();\n            }\n\n            attachEventListeners() {\n                // Status filter tabs\n                document.querySelectorAll('#statusTabs .nav-link').forEach(tab =&gt; {\n                    tab.addEventListener('click', (e) =&gt; {\n                        e.preventDefault();\n                        this.filterTasks(e.target.dataset.status);\n                    });\n                });\n\n                // Create task button\n                document.getElementById('saveTaskBtn').addEventListener('click', () =&gt; {\n                    this.createTask();\n                });\n            }\n\n            async loadTasks(status = 'all') {\n                this.showLoading(true);\n\n                try {\n                    const formData = new FormData();\n                    formData.append('status', status);\n\n                    const response = await fetch('/t/example/task_manager/list', {\n                        method: 'POST',\n                        body: formData\n                    });\n\n                    if (!response.ok) throw new Error('Network response was not ok');\n\n                    const data = await response.json();\n                    this.renderTasks(data.tasks);\n                } catch (error) {\n                    this.showAlert('Error loading tasks: ' + error.message, 'danger');\n                } finally {\n                    this.showLoading(false);\n                }\n            }\n\n            async createTask() {\n                const form = document.getElementById('taskForm');\n                const formData = new FormData(form);\n                const saveBtn = document.getElementById('saveTaskBtn');\n                const spinner = saveBtn.querySelector('.spinner-border');\n\n                saveBtn.disabled = true;\n                spinner.classList.remove('d-none');\n\n                try {\n                    const response = await fetch('/t/example/task_manager/create', {\n                        method: 'POST',\n                        body: formData\n                    });\n\n                    const data = await response.json();\n\n                    if (data.success) {\n                        this.showAlert('Task created successfully!', 'success');\n                        form.reset();\n                        bootstrap.Modal.getInstance(document.getElementById('taskModal')).hide();\n                        this.loadTasks(this.currentStatus);\n                    } else {\n                        this.showAlert(data.error, 'danger');\n                    }\n                } catch (error) {\n                    this.showAlert('Error creating task: ' + error.message, 'danger');\n                } finally {\n                    saveBtn.disabled = false;\n                    spinner.classList.add('d-none');\n                }\n            }\n\n            async updateTaskStatus(taskId, newStatus) {\n                try {\n                    const formData = new FormData();\n                    formData.append('id', taskId);\n                    formData.append('status', newStatus);\n\n                    const response = await fetch('/t/example/task_manager/update_status', {\n                        method: 'POST',\n                        body: formData\n                    });\n\n                    const data = await response.json();\n\n                    if (data.success) {\n                        this.showAlert('Task status updated!', 'success');\n                        this.loadTasks(this.currentStatus);\n                    } else {\n                        this.showAlert(data.error, 'danger');\n                    }\n                } catch (error) {\n                    this.showAlert('Error updating task: ' + error.message, 'danger');\n                }\n            }\n\n            async deleteTask(taskId) {\n                if (!confirm('Are you sure you want to delete this task?')) return;\n\n                try {\n                    const formData = new FormData();\n                    formData.append('id', taskId);\n\n                    const response = await fetch('/t/example/task_manager/delete', {\n                        method: 'POST',\n                        body: formData\n                    });\n\n                    const data = await response.json();\n\n                    if (data.success) {\n                        this.showAlert('Task deleted!', 'success');\n                        this.loadTasks(this.currentStatus);\n                    } else {\n                        this.showAlert(data.error, 'danger');\n                    }\n                } catch (error) {\n                    this.showAlert('Error deleting task: ' + error.message, 'danger');\n                }\n            }\n\n            filterTasks(status) {\n                this.currentStatus = status;\n\n                // Update active tab\n                document.querySelectorAll('#statusTabs .nav-link').forEach(tab =&gt; {\n                    tab.classList.remove('active');\n                });\n                document.querySelector(`[data-status=\"${status}\"]`).classList.add('active');\n\n                this.loadTasks(status);\n            }\n\n            renderTasks(tasks) {\n                const container = document.getElementById('tasksContainer');\n\n                if (tasks.length === 0) {\n                    container.innerHTML = '&lt;div class=\"col-12 text-center py-4\"&gt;&lt;p class=\"text-muted\"&gt;No tasks found&lt;/p&gt;&lt;/div&gt;';\n                    return;\n                }\n\n                const html = tasks.map(task =&gt; `\n                    &lt;div class=\"col-md-6 col-lg-4 mb-3\"&gt;\n                        &lt;div class=\"card task-card priority-${task.priority} ${task.status === 'completed' ? 'status-completed' : ''}\"&gt;\n                            &lt;div class=\"card-body\"&gt;\n                                &lt;div class=\"d-flex justify-content-between align-items-start mb-2\"&gt;\n                                    &lt;h6 class=\"card-title mb-0\"&gt;${task.title}&lt;/h6&gt;\n                                    &lt;div class=\"dropdown\"&gt;\n                                        &lt;button class=\"btn btn-sm btn-outline-secondary\" data-bs-toggle=\"dropdown\"&gt;\n                                            &lt;i class=\"fas fa-ellipsis-v\"&gt;&lt;/i&gt;\n                                        &lt;/button&gt;\n                                        &lt;ul class=\"dropdown-menu\"&gt;\n                                            &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\" onclick=\"taskManager.updateTaskStatus(${task.id}, 'pending')\"&gt;Mark Pending&lt;/a&gt;&lt;/li&gt;\n                                            &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\" onclick=\"taskManager.updateTaskStatus(${task.id}, 'in_progress')\"&gt;Mark In Progress&lt;/a&gt;&lt;/li&gt;\n                                            &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\" onclick=\"taskManager.updateTaskStatus(${task.id}, 'completed')\"&gt;Mark Completed&lt;/a&gt;&lt;/li&gt;\n                                            &lt;li&gt;&lt;hr class=\"dropdown-divider\"&gt;&lt;/li&gt;\n                                            &lt;li&gt;&lt;a class=\"dropdown-item text-danger\" href=\"#\" onclick=\"taskManager.deleteTask(${task.id})\"&gt;Delete&lt;/a&gt;&lt;/li&gt;\n                                        &lt;/ul&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n\n                                ${task.description ? `&lt;p class=\"card-text small text-muted\"&gt;${task.description}&lt;/p&gt;` : ''}\n\n                                &lt;div class=\"d-flex justify-content-between align-items-end\"&gt;\n                                    &lt;div&gt;\n                                        &lt;span class=\"badge bg-${this.getStatusColor(task.status)}\"&gt;${task.status.replace('_', ' ')}&lt;/span&gt;\n                                        &lt;span class=\"badge bg-${this.getPriorityColor(task.priority)} ms-1\"&gt;${task.priority}&lt;/span&gt;\n                                    &lt;/div&gt;\n                                    ${task.due_date ? `&lt;small class=\"text-muted\"&gt;${new Date(task.due_date).toLocaleDateString()}&lt;/small&gt;` : ''}\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                `).join('');\n\n                container.innerHTML = html;\n            }\n\n            showLoading(show) {\n                const indicator = document.getElementById('loadingIndicator');\n                const container = document.getElementById('tasksContainer');\n\n                if (show) {\n                    indicator.classList.remove('d-none');\n                    container.innerHTML = '';\n                } else {\n                    indicator.classList.add('d-none');\n                }\n            }\n\n            showAlert(message, type = 'info') {\n                const container = document.getElementById('alertContainer');\n                const alert = `\n                    &lt;div class=\"alert alert-${type} alert-dismissible fade show\" role=\"alert\"&gt;\n                        ${message}\n                        &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"&gt;&lt;/button&gt;\n                    &lt;/div&gt;\n                `;\n                container.innerHTML = alert;\n\n                // Auto dismiss after 5 seconds\n                setTimeout(() =&gt; {\n                    const alertElement = container.querySelector('.alert');\n                    if (alertElement) {\n                        bootstrap.Alert.getInstance(alertElement).close();\n                    }\n                }, 5000);\n            }\n\n            getStatusColor(status) {\n                const colors = {\n                    'pending': 'warning',\n                    'in_progress': 'info',\n                    'completed': 'success'\n                };\n                return colors[status] || 'secondary';\n            }\n\n            getPriorityColor(priority) {\n                const colors = {\n                    'low': 'success',\n                    'medium': 'warning',\n                    'high': 'danger'\n                };\n                return colors[priority] || 'secondary';\n            }\n        }\n\n        // Initialize task manager when DOM is loaded\n        document.addEventListener('DOMContentLoaded', () =&gt; {\n            window.taskManager = new TaskManager();\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE task (\n    id int NOT NULL AUTO_INCREMENT,\n    title varchar(200) NOT NULL,\n    description text,\n    status enum('pending','in_progress','completed') DEFAULT 'pending',\n    priority enum('low','medium','high') DEFAULT 'medium',\n    due_date date,\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_status (status),\n    KEY idx_priority (priority)\n);\n\nINSERT INTO task (title, description, priority, due_date) VALUES\n('Complete project proposal', 'Write and submit the Q1 project proposal document', 'high', '2024-02-15'),\n('Code review session', 'Review pull requests from team members', 'medium', '2024-02-10'),\n('Update documentation', 'Update API documentation with new endpoints', 'low', '2024-02-20'),\n('Team meeting preparation', 'Prepare slides for weekly team meeting', 'medium', '2024-02-08'),\n('Bug fixes', 'Fix reported bugs in the user dashboard', 'high', '2024-02-12');\n</code></pre>"},{"location":"code-libraries/ajax.html#modern-features","title":"Modern Features","text":"<ul> <li>ES6 Classes: Object-oriented JavaScript architecture</li> <li>Fetch API: Modern promise-based HTTP requests</li> <li>Async/Await: Clean asynchronous code handling</li> <li>CRUD Operations: Complete task management functionality</li> </ul> <p>Do you know?</p> <ul> <li>Fetch API is modern and built into all browsers, no library needed</li> <li>FormData automatically handles form serialization and file uploads</li> <li>Async/await makes code more readable than traditional callbacks</li> <li>Error boundaries ensure graceful degradation when requests fail</li> </ul>"},{"location":"code-libraries/auth0-integration.html","title":"Auth Integration","text":"<p>Below is a reference\u2011style recipe you can drop into the Cookbook for Auth integration using Auth0. It mirrors the Gmail OAuth recipe: Authorization Code + PKCE, Jetty HttpClient via a thread\u2011safe singleton, session storage for tokens, and a sample call to /userinfo (or any API with an Audience).</p>"},{"location":"code-libraries/auth0-integration.html#recipe-auth0-oauth-20-authorization-code-pkce","title":"\ud83d\udd10 Recipe: Auth0 OAuth 2.0 (Authorization Code + PKCE)","text":"<p>S\u00d8AD supports browser OAuth flows. With Auth0, use Authorization Code with PKCE:</p> <ol> <li>Redirect to Auth0\u2019s /authorize (include <code>code_challenge</code>)</li> <li>Handle your callback, validate <code>state</code>, exchange code at /oauth/token with <code>code_verifier</code></li> <li>Store access_token (short\u2011lived) and optionally refresh_token (if enabled)</li> <li>Call /userinfo or your protected API with <code>Authorization: Bearer &lt;access_token&gt;</code></li> <li>Refresh tokens if configured and returned</li> </ol> <p>Auth0 settings (Dashboard \u2192 Applications \u2192 Your App):</p> <ul> <li>Application Type: Regular Web Application</li> <li>Allowed Callback URLs: <code>https://&lt;host&gt;&lt;ctxPath&gt;/t/auth/auth0/callback</code></li> <li>Allowed Logout URLs (optional): <code>https://&lt;host&gt;</code></li> <li>Allowed Web Origins: <code>https://&lt;host&gt;</code></li> <li>Token Endpoint Auth Method: choose accordingly; with PKCE, client_secret is typically not needed.</li> <li>Audience (optional): your API identifier if you want an API access token (not only OIDC userinfo).</li> <li>Scopes: e.g. <code>openid profile email</code> (+ API scopes if using Audience)</li> </ul>"},{"location":"code-libraries/auth0-integration.html#utility-shared-http_client_providerpy-singleton","title":"\ud83d\udee0 Utility (shared): <code>http_client_provider.py</code> (singleton)","text":"<pre><code>from org.eclipse.jetty.client import HttpClient\nfrom org.eclipse.jetty.util.ssl import SslContextFactory\nfrom java.util.concurrent.locks import ReentrantLock\n\nclass HttpClientProvider:\n    _client = None\n    _lock = ReentrantLock()\n\n    @classmethod\n    def get_client(cls):\n        if cls._client is None:\n            cls._lock.lock()\n            try:\n                if cls._client is None:\n                    ssl = SslContextFactory.Client()\n                    client = HttpClient(ssl)\n                    client.start()\n                    cls._client = client\n            finally:\n                cls._lock.unlock()\n        return cls._client\n</code></pre>"},{"location":"code-libraries/auth0-integration.html#transaction-auth0py","title":"\ud83e\udde9 Transaction: <code>auth0.py</code>","text":"<pre><code>from utils import render, Log\nfrom http_client_provider import HttpClientProvider\n\nfrom java.util import Base64, UUID\nfrom java.net import URLEncoder\nfrom java.nio.charset import StandardCharsets\nfrom java.security import SecureRandom, MessageDigest\nfrom org.eclipse.jetty.http import HttpHeader\nfrom org.eclipse.jetty.client.util import StringContentProvider\nfrom java.lang import System\nimport json\n\n# ---- Configure via environment or sufia.properties (preferred) ----\nAUTH0_DOMAIN  = System.getenv(\"AUTH0_DOMAIN\")  or \"your-tenant.eu.auth0.com\"\nCLIENT_ID     = System.getenv(\"AUTH0_CLIENT_ID\") or \"YOUR_CLIENT_ID\"\nAUDIENCE      = System.getenv(\"AUTH0_AUDIENCE\")  # e.g., \"https://api.yourapp.com\" (optional)\nSCOPES        = System.getenv(\"AUTH0_SCOPES\")    or \"openid profile email\"\n# --------------------------------------------------------------------\n\nAUTH_URL  = \"https://%s/authorize\"   % AUTH0_DOMAIN\nTOKEN_URL = \"https://%s/oauth/token\" % AUTH0_DOMAIN\nUSERINFO  = \"https://%s/userinfo\"    % AUTH0_DOMAIN\n\nclass Auth0(Layout):\n\n    # ----- Helpers (PKCE, url encoding) -----\n    def _base64url(self, bts):\n        return Base64.getUrlEncoder().withoutPadding().encodeToString(bts)\n\n    def _random_bytes(self, n=32):\n        rnd = SecureRandom()\n        buf = bytearray(n)\n        rnd.nextBytes(buf)\n        return bytes(buf)\n\n    def _code_verifier(self):\n        return self._base64url(self._random_bytes(64))\n\n    def _code_challenge(self, verifier):\n        digest = MessageDigest.getInstance(\"SHA-256\").digest(verifier.encode(\"UTF-8\"))\n        return self._base64url(digest)\n\n    def _q(self, k, v):\n        return \"%s=%s\" % (k, URLEncoder.encode(v, StandardCharsets.UTF_8.name()))\n\n    # ----- Step 1: Redirect to Auth0 with PKCE -----\n    def login(self, ctx):\n        session = ctx.getSession()\n        verifier  = self._code_verifier()\n        challenge = self._code_challenge(verifier)\n        state     = UUID.randomUUID().toString()\n\n        session.setAttribute(\"auth0_pkce_verifier\", verifier)\n        session.setAttribute(\"auth0_oauth_state\", state)\n\n        redirect_uri = \"%s/t/auth/auth0/callback\" % ctx.ctxPath\n\n        params = [\n            self._q(\"client_id\", CLIENT_ID),\n            self._q(\"redirect_uri\", redirect_uri),\n            self._q(\"response_type\", \"code\"),\n            self._q(\"scope\", SCOPES),\n            self._q(\"state\", state),\n            self._q(\"code_challenge\", challenge),\n            self._q(\"code_challenge_method\", \"S256\")\n        ]\n        if AUDIENCE:\n            params.append(self._q(\"audience\", AUDIENCE))\n\n        auth_url = AUTH_URL + \"?\" + \"&amp;\".join(params)\n        ctx.redirect(auth_url)\n\n    # ----- Step 2: Callback &amp; code exchange -----\n    def callback(self, ctx):\n        req     = ctx.getRequest()\n        session = ctx.getSession()\n\n        code  = req.getParameter(\"code\")\n        state = req.getParameter(\"state\")\n        err   = req.getParameter(\"error\")\n\n        if err:\n            ctx.output[\"error\"] = \"Authorization error: %s\" % err\n            ctx.go_to = render.as_view(ctx, \"auth_result\")\n            return\n\n        if not state or state != session.getAttribute(\"auth0_oauth_state\"):\n            ctx.output[\"error\"] = \"Invalid state\"\n            ctx.go_to = render.as_view(ctx, \"auth_result\")\n            return\n\n        verifier = session.getAttribute(\"auth0_pkce_verifier\")\n        if not verifier:\n            ctx.output[\"error\"] = \"Missing PKCE verifier\"\n            ctx.go_to = render.as_view(ctx, \"auth_result\")\n            return\n\n        redirect_uri = \"%s/t/auth/auth0/callback\" % ctx.ctxPath\n\n        form = [\n            self._q(\"grant_type\", \"authorization_code\"),\n            self._q(\"client_id\", CLIENT_ID),\n            self._q(\"code_verifier\", verifier),\n            self._q(\"code\", code),\n            self._q(\"redirect_uri\", redirect_uri)\n        ]\n        body = \"&amp;\".join(form)\n\n        try:\n            client = HttpClientProvider.get_client()\n            reqx = client.POST(TOKEN_URL)\n            reqx.header(HttpHeader.CONTENT_TYPE, \"application/x-www-form-urlencoded\")\n            reqx.content(StringContentProvider(body, \"utf-8\"))\n\n            res = reqx.send()\n            text = res.getContentAsString()\n\n            tok = json.loads(text)\n            access_token  = tok.get(\"access_token\")\n            refresh_token = tok.get(\"refresh_token\")  # returned only if enabled\n            id_token      = tok.get(\"id_token\")\n\n            if not access_token:\n                ctx.output[\"error\"] = \"Token exchange failed\"\n                ctx.output[\"response\"] = text\n                ctx.go_to = render.as_view(ctx, \"auth_result\")\n                return\n\n            session.setAttribute(\"auth0_access_token\", access_token)\n            if refresh_token:\n                session.setAttribute(\"auth0_refresh_token\", refresh_token)\n            if id_token:\n                session.setAttribute(\"auth0_id_token\", id_token)\n\n            ctx.output[\"message\"] = \"Auth0 login successful.\"\n            ctx.go_to = render.as_view(ctx, \"auth_result\")\n\n        except Exception as e:\n            Log.error(\"Auth0 token exchange error: %s\" % str(e))\n            ctx.output[\"error\"] = \"Auth0 token exchange error.\"\n            ctx.go_to = render.as_view(ctx, \"auth_result\")\n\n    # ----- Step 3: Call /userinfo (or your API) -----\n    def userinfo(self, ctx):\n        session = ctx.getSession()\n        token = session.getAttribute(\"auth0_access_token\")\n        if not token:\n            ctx.redirect(\"%s/t/auth/auth0/login\" % ctx.ctxPath)\n            return\n\n        try:\n            client = HttpClientProvider.get_client()\n            req = client.newRequest(USERINFO)\n            req.header(HttpHeader.AUTHORIZATION, \"Bearer %s\" % token)\n            res = req.send()\n\n            ctx.output[\"status\"] = res.getStatus()\n            ctx.output[\"result\"] = res.getContentAsString()\n\n        except Exception as e:\n            Log.error(\"Auth0 /userinfo call failed: %s\" % str(e))\n            ctx.output[\"error\"] = \"Auth0 API call failed.\"\n\n        ctx.go_to = render.as_view(ctx, \"auth0_result\")\n</code></pre>"},{"location":"code-libraries/auth0-integration.html#views","title":"\ud83d\udcc4 Views","text":"<p><code>_auth0/auth_result.html</code></p> <pre><code>&lt;h2&gt;Auth0 Result&lt;/h2&gt;\n{{#if error}}\n  &lt;div class=\"alert alert-danger\"&gt;Error: {{error}}&lt;/div&gt;\n  {{#if response}}&lt;pre&gt;{{response}}&lt;/pre&gt;{{/if}}\n{{else}}\n  &lt;div class=\"alert alert-success\"&gt;{{message}}&lt;/div&gt;\n  &lt;p&gt;&lt;a href=\"{{ctxPath}}/t/auth/auth0/userinfo\"&gt;View /userinfo&lt;/a&gt;&lt;/p&gt;\n{{/if}}\n</code></pre> <p><code>_auth0/auth0_result.html</code></p> <pre><code>&lt;h2&gt;Auth0 /userinfo (Raw Response)&lt;/h2&gt;\n{{#if error}}\n  &lt;div class=\"alert alert-danger\"&gt;{{error}}&lt;/div&gt;\n{{else}}\n  &lt;div class=\"alert alert-success\"&gt;&lt;strong&gt;Status:&lt;/strong&gt; {{status}}&lt;/div&gt;\n  &lt;pre&gt;{{result}}&lt;/pre&gt;\n{{/if}}\n</code></pre>"},{"location":"code-libraries/auth0-integration.html#notes-options","title":"\ud83d\udd0e Notes &amp; Options","text":"<ul> <li>Audience: Supply <code>AUDIENCE</code> to obtain an API access token for your backend; otherwise token is typically for OIDC <code>/userinfo</code>.</li> <li>Refresh Tokens: Enable in Auth0 application &amp; pass <code>offline_access</code> scope to receive <code>refresh_token</code>.</li> <li>Logout: You can implement logout by clearing session and optionally calling <code>https://&lt;domain&gt;/v2/logout?client_id=...&amp;returnTo=...</code>.</li> <li>Storage: Session is fine for demos. For production, store tokens securely (encrypted DB, vault, KMS).</li> <li>Scopes: Minimize to what you need (<code>openid profile email</code> + API scopes).</li> <li>Callback URL: Must match Allowed Callback URLs in Auth0 app settings exactly.</li> </ul> <p>This pattern generalizes to any OAuth provider: adjust issuer domain, endpoints, scopes, and audience as required.</p>"},{"location":"code-libraries/crud.html","title":"CRUD","text":"<p>CRUD operations (Create, Read, Update, Delete) are the foundation of most web applications. This beginner guide shows you how to build a complete data management system using S\u00d8AD's ActiveJDBC models and Handlebars templates.</p>"},{"location":"code-libraries/crud.html#complete-crud-example-contact-management","title":"Complete CRUD Example - Contact Management","text":"TransactionList ViewCreate FormView DetailsEdit FormSQLOutput contact.py<pre><code>from utils import render\nfrom models import Contact\n\nclass Contact(object):\n    def list(self, ctx):\n        \"\"\"READ - Display all contacts\"\"\"\n        # Get all contacts ordered by name\n        contacts = Contact.findAll().orderBy(\"name ASC\")\n\n        # Pass to template\n        ctx.output[\"contacts\"] = contacts\n\n        ctx.go_to = render.as_view(ctx, \"contact_list\")\n\n    def view(self, ctx):\n        \"\"\"READ - Display single contact details\"\"\"\n        request = ctx.getRequest()\n        contact_id = request.getParameter(\"id\")\n\n        if not contact_id:\n            # Redirect to list if no ID provided\n            ctx.go_to = \"/t/example/contact/list\"\n            return\n\n        # Find contact by ID\n        contact = Contact.findById(contact_id)\n\n        if not contact:\n            # Handle contact not found\n            ctx.output[\"error\"] = \"Contact not found\"\n            ctx.go_to = render.as_view(ctx, \"contact_error\")\n            return\n\n        ctx.output[\"contact\"] = contact\n        ctx.go_to = render.as_view(ctx, \"contact_view\")\n\n    def create_form(self, ctx):\n        \"\"\"Show form to CREATE new contact\"\"\"\n        ctx.go_to = render.as_view(ctx, \"contact_create\")\n\n    def create(self, ctx):\n        \"\"\"CREATE - Save new contact\"\"\"\n        request = ctx.getRequest()\n\n        # Get form data\n        name = request.getParameter(\"name\")\n        email = request.getParameter(\"email\")\n        phone = request.getParameter(\"phone\")\n        company = request.getParameter(\"company\")\n        notes = request.getParameter(\"notes\")\n\n        # Validate required fields\n        errors = []\n        if not name or len(name.strip()) &lt; 2:\n            errors.append(\"Name is required (minimum 2 characters)\")\n\n        if not email or \"@\" not in email:\n            errors.append(\"Valid email is required\")\n\n        if errors:\n            # Show form again with errors\n            ctx.output[\"errors\"] = errors\n            ctx.output[\"form_data\"] = {\n                \"name\": name,\n                \"email\": email,\n                \"phone\": phone,\n                \"company\": company,\n                \"notes\": notes\n            }\n            ctx.go_to = render.as_view(ctx, \"contact_create\")\n            return\n\n        # Create new contact\n        new_contact = Contact()\n        new_contact.set(\"name\", name.strip())\n        new_contact.set(\"email\", email.strip())\n        new_contact.set(\"phone\", phone.strip() if phone else \"\")\n        new_contact.set(\"company\", company.strip() if company else \"\")\n        new_contact.set(\"notes\", notes.strip() if notes else \"\")\n        new_contact.save()\n\n        # Redirect to contact list with success message\n        ctx.go_to = \"/t/example/contact/list?success=created\"\n\n    def edit_form(self, ctx):\n        \"\"\"Show form to UPDATE contact\"\"\"\n        request = ctx.getRequest()\n        contact_id = request.getParameter(\"id\")\n\n        if not contact_id:\n            ctx.go_to = \"/t/example/contact/list\"\n            return\n\n        contact = Contact.findById(contact_id)\n        if not contact:\n            ctx.output[\"error\"] = \"Contact not found\"\n            ctx.go_to = render.as_view(ctx, \"contact_error\")\n            return\n\n        ctx.output[\"contact\"] = contact\n        ctx.go_to = render.as_view(ctx, \"contact_edit\")\n\n    def update(self, ctx):\n        \"\"\"UPDATE - Save changes to contact\"\"\"\n        request = ctx.getRequest()\n        contact_id = request.getParameter(\"id\")\n\n        if not contact_id:\n            ctx.go_to = \"/t/example/contact/list\"\n            return\n\n        # Find existing contact\n        contact = Contact.findById(contact_id)\n        if not contact:\n            ctx.output[\"error\"] = \"Contact not found\"\n            ctx.go_to = render.as_view(ctx, \"contact_error\")\n            return\n\n        # Get form data\n        name = request.getParameter(\"name\")\n        email = request.getParameter(\"email\")\n        phone = request.getParameter(\"phone\")\n        company = request.getParameter(\"company\")\n        notes = request.getParameter(\"notes\")\n\n        # Validate\n        errors = []\n        if not name or len(name.strip()) &lt; 2:\n            errors.append(\"Name is required (minimum 2 characters)\")\n\n        if not email or \"@\" not in email:\n            errors.append(\"Valid email is required\")\n\n        if errors:\n            # Show form again with errors\n            ctx.output[\"errors\"] = errors\n            ctx.output[\"contact\"] = contact\n            # Update contact object with new form data for display\n            contact.set(\"name\", name)\n            contact.set(\"email\", email)\n            contact.set(\"phone\", phone)\n            contact.set(\"company\", company)\n            contact.set(\"notes\", notes)\n            ctx.go_to = render.as_view(ctx, \"contact_edit\")\n            return\n\n        # Update contact\n        contact.set(\"name\", name.strip())\n        contact.set(\"email\", email.strip())\n        contact.set(\"phone\", phone.strip() if phone else \"\")\n        contact.set(\"company\", company.strip() if company else \"\")\n        contact.set(\"notes\", notes.strip() if notes else \"\")\n        contact.save()\n\n        # Redirect to contact view with success message\n        ctx.go_to = \"/t/example/contact/view?id=%s&amp;success=updated\" % contact_id\n\n    def delete(self, ctx):\n        \"\"\"DELETE - Remove contact\"\"\"\n        request = ctx.getRequest()\n        contact_id = request.getParameter(\"id\")\n\n        if not contact_id:\n            ctx.go_to = \"/t/example/contact/list\"\n            return\n\n        # Find and delete contact\n        contact = Contact.findById(contact_id)\n        if contact:\n            contact.delete()\n\n        # Redirect to list with success message\n        ctx.go_to = \"/t/example/contact/list?success=deleted\"\n</code></pre> contact_list.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Contact List&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"d-flex justify-content-between align-items-center mb-4\"&gt;\n            &lt;h1&gt;My Contacts&lt;/h1&gt;\n            &lt;a href=\"/t/example/contact/create_form\" class=\"btn btn-success\"&gt;\n                &lt;i class=\"bi bi-plus-circle\"&gt;&lt;/i&gt; Add New Contact\n            &lt;/a&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Success Messages --&gt;\n        {{#if success}}\n            &lt;div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\"&gt;\n                {{#ifequal success \"created\"}}\n                    &lt;strong&gt;Success!&lt;/strong&gt; Contact has been created.\n                {{else if success \"updated\"}}\n                    &lt;strong&gt;Success!&lt;/strong&gt; Contact has been updated.\n                {{else if success \"deleted\"}}\n                    &lt;strong&gt;Success!&lt;/strong&gt; Contact has been deleted.\n                {{/ifequal}}\n                &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"&gt;&lt;/button&gt;\n            &lt;/div&gt;\n        {{/if}}\n\n        {{#if contacts}}\n            &lt;div class=\"row\"&gt;\n                {{#each contacts}}\n                &lt;div class=\"col-md-6 col-lg-4 mb-4\"&gt;\n                    &lt;div class=\"card h-100\"&gt;\n                        &lt;div class=\"card-body\"&gt;\n                            &lt;h5 class=\"card-title\"&gt;{{name}}&lt;/h5&gt;\n                            &lt;p class=\"card-text\"&gt;\n                                &lt;strong&gt;Email:&lt;/strong&gt; {{email}}&lt;br&gt;\n                                {{#if phone}}\n                                    &lt;strong&gt;Phone:&lt;/strong&gt; {{phone}}&lt;br&gt;\n                                {{/if}}\n                                {{#if company}}\n                                    &lt;strong&gt;Company:&lt;/strong&gt; {{company}}\n                                {{/if}}\n                            &lt;/p&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"card-footer bg-transparent\"&gt;\n                            &lt;div class=\"btn-group w-100\" role=\"group\"&gt;\n                                &lt;a href=\"/t/example/contact/view?id={{id}}\" class=\"btn btn-outline-primary btn-sm\"&gt;View&lt;/a&gt;\n                                &lt;a href=\"/t/example/contact/edit_form?id={{id}}\" class=\"btn btn-outline-warning btn-sm\"&gt;Edit&lt;/a&gt;\n                                &lt;a href=\"/t/example/contact/delete?id={{id}}\" \n                                   class=\"btn btn-outline-danger btn-sm\"\n                                   onclick=\"return confirm('Are you sure you want to delete {{name}}?')\"&gt;Delete&lt;/a&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                {{/each}}\n            &lt;/div&gt;\n\n            &lt;div class=\"mt-4\"&gt;\n                &lt;small class=\"text-muted\"&gt;Total contacts: {{contacts.length}}&lt;/small&gt;\n            &lt;/div&gt;\n        {{else}}\n            &lt;div class=\"alert alert-info text-center\"&gt;\n                &lt;h4&gt;No contacts yet&lt;/h4&gt;\n                &lt;p&gt;Get started by adding your first contact!&lt;/p&gt;\n                &lt;a href=\"/t/example/contact/create_form\" class=\"btn btn-success\"&gt;Add First Contact&lt;/a&gt;\n            &lt;/div&gt;\n        {{/if}}\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> contact_create.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Add New Contact&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"row justify-content-center\"&gt;\n            &lt;div class=\"col-md-8\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header\"&gt;\n                        &lt;h3&gt;Add New Contact&lt;/h3&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;!-- Display Errors --&gt;\n                        {{#if errors}}\n                            &lt;div class=\"alert alert-danger\"&gt;\n                                &lt;h6&gt;Please fix the following errors:&lt;/h6&gt;\n                                &lt;ul class=\"mb-0\"&gt;\n                                    {{#each errors}}\n                                        &lt;li&gt;{{this}}&lt;/li&gt;\n                                    {{/each}}\n                                &lt;/ul&gt;\n                            &lt;/div&gt;\n                        {{/if}}\n\n                        &lt;form method=\"POST\" action=\"/t/example/contact/create\"&gt;\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"name\" class=\"form-label\"&gt;Name &lt;span class=\"text-danger\"&gt;*&lt;/span&gt;&lt;/label&gt;\n                                &lt;input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" \n                                       value=\"{{form_data.name}}\" required&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"email\" class=\"form-label\"&gt;Email &lt;span class=\"text-danger\"&gt;*&lt;/span&gt;&lt;/label&gt;\n                                &lt;input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" \n                                       value=\"{{form_data.email}}\" required&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"phone\" class=\"form-label\"&gt;Phone&lt;/label&gt;\n                                &lt;input type=\"tel\" class=\"form-control\" id=\"phone\" name=\"phone\" \n                                       value=\"{{form_data.phone}}\"&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"company\" class=\"form-label\"&gt;Company&lt;/label&gt;\n                                &lt;input type=\"text\" class=\"form-control\" id=\"company\" name=\"company\" \n                                       value=\"{{form_data.company}}\"&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"notes\" class=\"form-label\"&gt;Notes&lt;/label&gt;\n                                &lt;textarea class=\"form-control\" id=\"notes\" name=\"notes\" rows=\"3\"&gt;{{form_data.notes}}&lt;/textarea&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"d-flex justify-content-between\"&gt;\n                                &lt;a href=\"/t/example/contact/list\" class=\"btn btn-secondary\"&gt;Cancel&lt;/a&gt;\n                                &lt;button type=\"submit\" class=\"btn btn-success\"&gt;Create Contact&lt;/button&gt;\n                            &lt;/div&gt;\n                        &lt;/form&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> contact_view.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{{contact.name}} - Contact Details&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"row justify-content-center\"&gt;\n            &lt;div class=\"col-md-8\"&gt;\n                &lt;!-- Success Message --&gt;\n                {{#if success}}\n                    &lt;div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\"&gt;\n                        &lt;strong&gt;Success!&lt;/strong&gt; Contact has been updated.\n                        &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"&gt;&lt;/button&gt;\n                    &lt;/div&gt;\n                {{/if}}\n\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header d-flex justify-content-between align-items-center\"&gt;\n                        &lt;h3&gt;{{contact.name}}&lt;/h3&gt;\n                        &lt;div&gt;\n                            &lt;a href=\"/t/example/contact/edit_form?id={{contact.id}}\" class=\"btn btn-warning btn-sm\"&gt;Edit&lt;/a&gt;\n                            &lt;a href=\"/t/example/contact/delete?id={{contact.id}}\" \n                               class=\"btn btn-danger btn-sm\"\n                               onclick=\"return confirm('Are you sure you want to delete {{contact.name}}?')\"&gt;Delete&lt;/a&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;div class=\"row\"&gt;\n                            &lt;div class=\"col-md-6\"&gt;\n                                &lt;h6&gt;Contact Information&lt;/h6&gt;\n                                &lt;table class=\"table table-sm\"&gt;\n                                    &lt;tr&gt;\n                                        &lt;td&gt;&lt;strong&gt;Name:&lt;/strong&gt;&lt;/td&gt;\n                                        &lt;td&gt;{{contact.name}}&lt;/td&gt;\n                                    &lt;/tr&gt;\n                                    &lt;tr&gt;\n                                        &lt;td&gt;&lt;strong&gt;Email:&lt;/strong&gt;&lt;/td&gt;\n                                        &lt;td&gt;&lt;a href=\"mailto:{{contact.email}}\"&gt;{{contact.email}}&lt;/a&gt;&lt;/td&gt;\n                                    &lt;/tr&gt;\n                                    &lt;tr&gt;\n                                        &lt;td&gt;&lt;strong&gt;Phone:&lt;/strong&gt;&lt;/td&gt;\n                                        &lt;td&gt;\n                                            {{#if contact.phone}}\n                                                &lt;a href=\"tel:{{contact.phone}}\"&gt;{{contact.phone}}&lt;/a&gt;\n                                            {{else}}\n                                                &lt;span class=\"text-muted\"&gt;Not provided&lt;/span&gt;\n                                            {{/if}}\n                                        &lt;/td&gt;\n                                    &lt;/tr&gt;\n                                    &lt;tr&gt;\n                                        &lt;td&gt;&lt;strong&gt;Company:&lt;/strong&gt;&lt;/td&gt;\n                                        &lt;td&gt;\n                                            {{#if contact.company}}\n                                                {{contact.company}}\n                                            {{else}}\n                                                &lt;span class=\"text-muted\"&gt;Not provided&lt;/span&gt;\n                                            {{/if}}\n                                        &lt;/td&gt;\n                                    &lt;/tr&gt;\n                                &lt;/table&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"col-md-6\"&gt;\n                                &lt;h6&gt;Notes&lt;/h6&gt;\n                                {{#if contact.notes}}\n                                    &lt;p&gt;{{contact.notes}}&lt;/p&gt;\n                                {{else}}\n                                    &lt;p class=\"text-muted\"&gt;No notes added&lt;/p&gt;\n                                {{/if}}\n\n                                &lt;h6&gt;Created&lt;/h6&gt;\n                                &lt;small class=\"text-muted\"&gt;{{contact.created_at}}&lt;/small&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"card-footer\"&gt;\n                        &lt;a href=\"/t/example/contact/list\" class=\"btn btn-outline-secondary\"&gt;Back to List&lt;/a&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> contact_edit.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Edit {{contact.name}}&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"row justify-content-center\"&gt;\n            &lt;div class=\"col-md-8\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header\"&gt;\n                        &lt;h3&gt;Edit Contact&lt;/h3&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;!-- Display Errors --&gt;\n                        {{#if errors}}\n                            &lt;div class=\"alert alert-danger\"&gt;\n                                &lt;h6&gt;Please fix the following errors:&lt;/h6&gt;\n                                &lt;ul class=\"mb-0\"&gt;\n                                    {{#each errors}}\n                                        &lt;li&gt;{{this}}&lt;/li&gt;\n                                    {{/each}}\n                                &lt;/ul&gt;\n                            &lt;/div&gt;\n                        {{/if}}\n\n                        &lt;form method=\"POST\" action=\"/t/example/contact/update\"&gt;\n                            &lt;input type=\"hidden\" name=\"id\" value=\"{{contact.id}}\"&gt;\n\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"name\" class=\"form-label\"&gt;Name &lt;span class=\"text-danger\"&gt;*&lt;/span&gt;&lt;/label&gt;\n                                &lt;input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" \n                                       value=\"{{contact.name}}\" required&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"email\" class=\"form-label\"&gt;Email &lt;span class=\"text-danger\"&gt;*&lt;/span&gt;&lt;/label&gt;\n                                &lt;input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" \n                                       value=\"{{contact.email}}\" required&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"phone\" class=\"form-label\"&gt;Phone&lt;/label&gt;\n                                &lt;input type=\"tel\" class=\"form-control\" id=\"phone\" name=\"phone\" \n                                       value=\"{{contact.phone}}\"&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"company\" class=\"form-label\"&gt;Company&lt;/label&gt;\n                                &lt;input type=\"text\" class=\"form-control\" id=\"company\" name=\"company\" \n                                       value=\"{{contact.company}}\"&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"notes\" class=\"form-label\"&gt;Notes&lt;/label&gt;\n                                &lt;textarea class=\"form-control\" id=\"notes\" name=\"notes\" rows=\"3\"&gt;{{contact.notes}}&lt;/textarea&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"d-flex justify-content-between\"&gt;\n                                &lt;a href=\"/t/example/contact/view?id={{contact.id}}\" class=\"btn btn-secondary\"&gt;Cancel&lt;/a&gt;\n                                &lt;button type=\"submit\" class=\"btn btn-warning\"&gt;Update Contact&lt;/button&gt;\n                            &lt;/div&gt;\n                        &lt;/form&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE contact (\n    id int NOT NULL AUTO_INCREMENT,\n    name varchar(100) NOT NULL,\n    email varchar(150) NOT NULL,\n    phone varchar(20),\n    company varchar(100),\n    notes text,\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_name (name),\n    KEY idx_email (email)\n);\n\nINSERT INTO contact (name, email, phone, company, notes) VALUES\n('John Smith', 'john.smith@email.com', '+1-555-0101', 'Tech Solutions Inc', 'Met at conference 2024'),\n('Sarah Johnson', 'sarah.j@company.com', '+1-555-0102', 'Marketing Pro', 'Potential client for Q2 project'),\n('Mike Davis', 'mike@startup.io', '+1-555-0103', 'StartupXYZ', 'Interested in partnership'),\n('Lisa Chen', 'lisa.chen@design.com', '+1-555-0104', 'Creative Agency', 'UI/UX design expert'),\n('Tom Wilson', 'tom.wilson@email.com', NULL, NULL, 'Friend from college');\n</code></pre>"},{"location":"code-libraries/crud.html#crud-operations-explained","title":"CRUD Operations Explained","text":"<ul> <li>CREATE: <code>Contact()</code> creates new record, <code>save()</code> stores it</li> <li>READ: <code>findAll()</code> gets all records, <code>findById()</code> gets one record</li> <li>UPDATE: <code>set()</code> updates fields, <code>save()</code> stores changes</li> <li>DELETE: <code>delete()</code> removes record from database</li> </ul>"},{"location":"code-libraries/crud.html#simple-crud-todo-list","title":"Simple CRUD - Todo List","text":"TransactionViewSQLOutput todo.py<pre><code>from utils import render\nfrom models import Todo\n\nclass Todo(object):\n    def list(self, ctx):\n        \"\"\"Show all todos\"\"\"\n        todos = Todo.findAll().orderBy(\"created_at DESC\")\n        ctx.output[\"todos\"] = todos\n        ctx.go_to = render.as_view(ctx, \"todo_list\")\n\n    def add(self, ctx):\n        \"\"\"Add new todo\"\"\"\n        request = ctx.getRequest()\n        task = request.getParameter(\"task\")\n\n        if task and len(task.strip()) &gt; 0:\n            # Create new todo\n            new_todo = Todo()\n            new_todo.set(\"task\", task.strip())\n            new_todo.set(\"completed\", False)\n            new_todo.save()\n\n        # Redirect back to list\n        ctx.go_to = \"/t/example/todo/list\"\n\n    def complete(self, ctx):\n        \"\"\"Mark todo as completed\"\"\"\n        request = ctx.getRequest()\n        todo_id = request.getParameter(\"id\")\n\n        if todo_id:\n            todo = Todo.findById(todo_id)\n            if todo:\n                todo.set(\"completed\", True)\n                todo.save()\n\n        ctx.go_to = \"/t/example/todo/list\"\n\n    def uncomplete(self, ctx):\n        \"\"\"Mark todo as not completed\"\"\"\n        request = ctx.getRequest()\n        todo_id = request.getParameter(\"id\")\n\n        if todo_id:\n            todo = Todo.findById(todo_id)\n            if todo:\n                todo.set(\"completed\", False)\n                todo.save()\n\n        ctx.go_to = \"/t/example/todo/list\"\n\n    def delete(self, ctx):\n        \"\"\"Delete todo\"\"\"\n        request = ctx.getRequest()\n        todo_id = request.getParameter(\"id\")\n\n        if todo_id:\n            todo = Todo.findById(todo_id)\n            if todo:\n                todo.delete()\n\n        ctx.go_to = \"/t/example/todo/list\"\n</code></pre> todo_list.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;My Todo List&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        .completed { \n            text-decoration: line-through; \n            opacity: 0.6; \n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"row justify-content-center\"&gt;\n            &lt;div class=\"col-md-8\"&gt;\n                &lt;h1 class=\"text-center mb-4\"&gt;My Todo List&lt;/h1&gt;\n\n                &lt;!-- Add New Todo --&gt;\n                &lt;div class=\"card mb-4\"&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;form method=\"POST\" action=\"/t/example/todo/add\" class=\"d-flex\"&gt;\n                            &lt;input type=\"text\" class=\"form-control me-2\" name=\"task\" \n                                   placeholder=\"What needs to be done?\" required&gt;\n                            &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Add&lt;/button&gt;\n                        &lt;/form&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                &lt;!-- Todo List --&gt;\n                {{#if todos}}\n                    &lt;div class=\"list-group\"&gt;\n                        {{#each todos}}\n                            &lt;div class=\"list-group-item d-flex justify-content-between align-items-center {{#if completed}}completed{{/if}}\"&gt;\n                                &lt;div class=\"flex-grow-1\"&gt;\n                                    {{#if completed}}\n                                        &lt;i class=\"bi bi-check-circle-fill text-success me-2\"&gt;&lt;/i&gt;\n                                    {{else}}\n                                        &lt;i class=\"bi bi-circle me-2\"&gt;&lt;/i&gt;\n                                    {{/if}}\n                                    {{task}}\n                                &lt;/div&gt;\n                                &lt;div class=\"btn-group btn-group-sm\"&gt;\n                                    {{#if completed}}\n                                        &lt;a href=\"/t/example/todo/uncomplete?id={{id}}\" \n                                           class=\"btn btn-outline-warning\" title=\"Mark as incomplete\"&gt;\n                                            &lt;i class=\"bi bi-arrow-counterclockwise\"&gt;&lt;/i&gt;\n                                        &lt;/a&gt;\n                                    {{else}}\n                                        &lt;a href=\"/t/example/todo/complete?id={{id}}\" \n                                           class=\"btn btn-outline-success\" title=\"Mark as complete\"&gt;\n                                            &lt;i class=\"bi bi-check\"&gt;&lt;/i&gt;\n                                        &lt;/a&gt;\n                                    {{/if}}\n                                    &lt;a href=\"/t/example/todo/delete?id={{id}}\" \n                                       class=\"btn btn-outline-danger\" \n                                       title=\"Delete\"\n                                       onclick=\"return confirm('Delete this task?')\"&gt;\n                                        &lt;i class=\"bi bi-trash\"&gt;&lt;/i&gt;\n                                    &lt;/a&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        {{/each}}\n                    &lt;/div&gt;\n\n                    &lt;div class=\"mt-3 text-center\"&gt;\n                        &lt;small class=\"text-muted\"&gt;\n                            {{todos.length}} task(s) total\n                        &lt;/small&gt;\n                    &lt;/div&gt;\n                {{else}}\n                    &lt;div class=\"alert alert-info text-center\"&gt;\n                        &lt;h5&gt;No tasks yet!&lt;/h5&gt;\n                        &lt;p&gt;Add your first task above to get started.&lt;/p&gt;\n                    &lt;/div&gt;\n                {{/if}}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css\" rel=\"stylesheet\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE todo (\n    id int NOT NULL AUTO_INCREMENT,\n    task varchar(255) NOT NULL,\n    completed boolean DEFAULT false,\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_completed (completed)\n);\n\nINSERT INTO todo (task, completed) VALUES\n('Learn S\u00d8AD framework basics', false),\n('Build my first CRUD application', false),\n('Read the documentation', true),\n('Practice with database operations', false),\n('Create a real project', false);\n</code></pre>"},{"location":"code-libraries/crud.html#simple-crud-features","title":"Simple CRUD Features","text":"<ul> <li>Quick Create: Add new items with simple form</li> <li>Status Toggle: Mark items as complete/incomplete</li> <li>Instant Delete: Remove items with confirmation</li> <li>Visual Feedback: Different styling for completed items</li> </ul> <p>CRUD Essentials for Beginners</p> <p>Create: <code>Model()</code> + <code>set()</code> + <code>save()</code> Read: <code>findAll()</code> or <code>findById()</code> Update: <code>findById()</code> + <code>set()</code> + <code>save()</code> Delete: <code>findById()</code> + <code>delete()</code></p> <p>Key Tips: - Always validate user input before saving - Handle cases where records don't exist - Provide feedback to users after operations - Use redirects after POST operations to prevent duplicate submissions</p>"},{"location":"code-libraries/datatables.html","title":"Datatables","text":"<p>This code example shows how to build interactive tables using DataTables's server-side mode, with full support for pagination, sorting, and searching.</p> TransactionViewSQLOutput employee.py<pre><code>from utils import render\nfrom models import Employee\n\nclass Employee_list(object):\n    def view(self, ctx):\n        # Loads the initial HTML page\n        ctx.go_to = render.as_view(ctx, \"employee_list\")\n\n    def ajax(self, ctx):\n        # DataTables standard parameters\n        request = ctx.getRequest()\n        draw = int(request.getParameter(\"draw\"))\n        start = int(request.getParameter(\"start\"))\n        length = int(request.getParameter(\"length\"))\n\n        # Build WHERE clause for global search\n        query = \"1=1\"\n        params = []\n\n        # Global search\n        global_search = request.getParameter(\"search[value]\") or \"\"\n        if global_search:\n            query = query + \" AND (name LIKE ? OR department LIKE ? OR email LIKE ?)\"\n            wildcard = \"%s%%\" % global_search\n            params.extend([wildcard, wildcard, wildcard])\n\n        # Sorting\n        order_col_index = request.getParameter(\"order[0][column]\")\n        order_col_name = [\"id\", \"name\", \"department\", \"email\"][int(order_col_index)] if order_col_index else \"name\"\n        order_dir = request.getParameter(\"order[0][dir]\") or \"asc\"\n        order_clause = \"%s %s\" % (order_col_name, order_dir.upper())\n\n        total_records = Employee.count()\n        filtered_records = Employee.count(query, *params) if query != \"1=1\" else total_records\n\n        employees = Employee.where(query, *params).offset(start).limit(length).orderBy(order_clause)\n\n        data = []\n        for emp in employees:\n            data.append([emp.get(\"id\"), emp.get(\"name\"), emp.get(\"department\"), emp.get(\"email\")])\n\n        result = {\n            \"draw\": draw,\n            \"recordsTotal\": total_records,\n            \"recordsFiltered\": filtered_records,\n            \"data\": data\n        }\n        ctx.go_to = render.as_json(ctx, result)\n</code></pre> employee_list.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Employee List&lt;/title&gt;\n  &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n  &lt;link href=\"https://cdn.datatables.net/v/bs5/jq-3.7.0/dt-2.3.2/datatables.min.css\" rel=\"stylesheet\"&gt;\n\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdn.datatables.net/v/bs5/jq-3.7.0/dt-2.3.2/datatables.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=\"container-fluid\"&gt;\n    &lt;h1&gt;Employee List&lt;/h1&gt;\n\n    &lt;table id=\"employeeTable\" class=\"table table-sm table-striped\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th style=\"1px\"&gt;ID&lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Department&lt;/th&gt;\n          &lt;th&gt;Email&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n    &lt;/table&gt;\n\n  &lt;/div&gt;\n\n  &lt;script&gt;\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      var table = $('#employeeTable').DataTable({\n        \"processing\": true,\n        \"serverSide\": true,\n        \"lengthChange\": false,\n        \"ajax\": \"/t/example/employee_list/ajax\",\n        \"columns\": [\n          { \"title\": \"ID\" },\n          { \"title\": \"Name\" },\n          { \"title\": \"Department\" },\n          { \"title\": \"Email\" }\n        ]\n      });\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE employee ( \n    id int NOT NULL AUTO_INCREMENT, \n    name varchar(300), \n    department varchar(300), \n    email varchar(300), \n    PRIMARY KEY (id) \n);\n\nINSERT INTO employee (name, department, email) VALUES\n('Olivia Chen', 'Marketing', 'olivia.chen@example.com'),\n('Benjamin Carter', 'IT', 'benjamin.carter@example.com'),\n('Sophia Rodriguez', 'Sales', 'sophia.rodriguez@example.com'),\n('Liam Goldberg', 'Finance', 'liam.goldberg@example.com'),\n('Ava Nguyen', 'HR', 'ava.nguyen@example.com'),\n('Noah Patel', 'IT', 'noah.patel@example.com'),\n('Isabella Kim', 'Marketing', 'isabella.kim@example.com'),\n('Mason Williams', 'Sales', 'mason.williams@example.com'),\n('Mia Garcia', 'Finance', 'mia.garcia@example.com'),\n('James Johnson', 'IT', 'james.johnson@example.com'),\n('Charlotte Martinez', 'HR', 'charlotte.martinez@example.com'),\n('William Davis', 'Sales', 'william.davis@example.com'),\n('Amelia Lee', 'Marketing', 'amelia.lee@example.com'),\n('Elijah Hernandez', 'IT', 'elijah.hernandez@example.com'),\n('Harper Gonzalez', 'Finance', 'harper.gonzalez@example.com'),\n('Lucas Wilson', 'Sales', 'lucas.wilson@example.com'),\n('Evelyn Anderson', 'HR', 'evelyn.anderson@example.com'),\n('Alexander Thomas', 'IT', 'alexander.thomas@example.com'),\n('Abigail Moore', 'Marketing', 'abigail.moore@example.com'),\n('Henry Taylor', 'Finance', 'henry.taylor@example.com'),\n('Emily Jackson', 'Sales', 'emily.jackson@example.com'),\n('Michael White', 'IT', 'michael.white@example.com'),\n('Sofia Harris', 'HR', 'sofia.harris@example.com'),\n('Daniel Martin', 'Marketing', 'daniel.martin@example.com'),\n('Madison Thompson', 'Finance', 'madison.thompson@example.com'),\n('Jacob Clark', 'IT', 'jacob.clark@example.com'),\n('Ella Lewis', 'Sales', 'ella.lewis@example.com'),\n('Logan Walker', 'Marketing', 'logan.walker@example.com'),\n('Victoria Hall', 'HR', 'victoria.hall@example.com'),\n('David Allen', 'IT', 'david.allen@example.com');\n</code></pre> <p> </p>"},{"location":"code-libraries/datatables.html#how-it-works","title":"How It Works","text":"<ul> <li>Sorting: User clicks a column header \u2192 DataTables sends column index + sort direction \u2192 server applies <code>ORDER BY</code></li> <li>Global Search: Search bar above table triggers across all columns</li> </ul>"},{"location":"code-libraries/generate-excel.html","title":"Generate Excel","text":"<p>S\u00d8AD includes built-in support for Excel file generation using Apache POI. This recipe demonstrates how to create Excel spreadsheets with data from your database, format cells, and serve them as downloadable files\u2014perfect for reports, data exports, or financial statements.</p>"},{"location":"code-libraries/generate-excel.html#generate-excel-from-database-data","title":"Generate Excel from Database Data","text":"TransactionSQLOutput sales_report.py<pre><code>from utils import render\nfrom models import Sale\nfrom org.apache.poi.xssf.usermodel import XSSFWorkbook\nfrom org.apache.poi.ss.usermodel import CellStyle, Font, FillPatternType, IndexedColors\nfrom java.io import ByteArrayOutputStream\nfrom java.util import Date\nfrom java.text import SimpleDateFormat\n\nclass Sales_report(object):\n    def excel(self, ctx):\n        # Create workbook and worksheet\n        workbook = XSSFWorkbook()\n        sheet = workbook.createSheet(\"Sales Report\")\n\n        # Create styles for header and data\n        header_style = workbook.createCellStyle()\n        header_font = workbook.createFont()\n        header_font.setBold(True)\n        header_font.setColor(IndexedColors.WHITE.getIndex())\n        header_style.setFont(header_font)\n        header_style.setFillForegroundColor(IndexedColors.DARK_BLUE.getIndex())\n        header_style.setFillPattern(FillPatternType.SOLID_FOREGROUND)\n\n        date_style = workbook.createCellStyle()\n        date_format = workbook.getCreationHelper().createDataFormat()\n        date_style.setDataFormat(date_format.getFormat(\"yyyy-mm-dd\"))\n\n        currency_style = workbook.createCellStyle()\n        currency_style.setDataFormat(date_format.getFormat(\"#,##0.00\"))\n\n        # Create header row\n        header_row = sheet.createRow(0)\n        headers = [\"ID\", \"Product Name\", \"Customer\", \"Sale Date\", \"Quantity\", \"Unit Price\", \"Total Amount\"]\n\n        for col_idx, header in enumerate(headers):\n            cell = header_row.createCell(col_idx)\n            cell.setCellValue(header)\n            cell.setCellStyle(header_style)\n\n        # Fetch data from database\n        sales = Sale.findAll().orderBy(\"sale_date DESC\")\n\n        row_idx = 1\n        for sale in sales:\n            row = sheet.createRow(row_idx)\n\n            # ID\n            row.createCell(0).setCellValue(sale.get(\"id\"))\n\n            # Product Name\n            row.createCell(1).setCellValue(sale.get(\"product_name\") or \"\")\n\n            # Customer\n            row.createCell(2).setCellValue(sale.get(\"customer_name\") or \"\")\n\n            # Sale Date\n            date_cell = row.createCell(3)\n            if sale.get(\"sale_date\"):\n                date_cell.setCellValue(sale.getDate(\"sale_date\"))\n                date_cell.setCellStyle(date_style)\n\n            # Quantity\n            row.createCell(4).setCellValue(sale.getInteger(\"quantity\") or 0)\n\n            # Unit Price\n            price_cell = row.createCell(5)\n            price_cell.setCellValue(sale.getDouble(\"unit_price\") or 0.0)\n            price_cell.setCellStyle(currency_style)\n\n            # Total Amount\n            total_cell = row.createCell(6)\n            total_amount = (sale.getInteger(\"quantity\") or 0) * (sale.getDouble(\"unit_price\") or 0.0)\n            total_cell.setCellValue(total_amount)\n            total_cell.setCellStyle(currency_style)\n\n            row_idx += 1\n\n        # Auto-size columns\n        for col_idx in range(len(headers)):\n            sheet.autoSizeColumn(col_idx)\n\n        # Write to byte array\n        output_stream = ByteArrayOutputStream()\n        workbook.write(output_stream)\n        workbook.close()\n\n        # Generate filename with current date\n        date_format = SimpleDateFormat(\"yyyy-MM-dd\")\n        filename = \"sales_report_%s.xlsx\" % date_format.format(Date())\n\n        ctx.go_to = render.as_blob(\n            ctx,\n            output_stream.toByteArray(),\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            filename,\n            attachment=True\n        )\n</code></pre> <pre><code>CREATE TABLE sale (\n    id int NOT NULL AUTO_INCREMENT,\n    product_name varchar(255),\n    customer_name varchar(255),\n    sale_date date,\n    quantity int,\n    unit_price decimal(10,2),\n    PRIMARY KEY (id)\n);\n\nINSERT INTO sale (product_name, customer_name, sale_date, quantity, unit_price) VALUES\n('Laptop Pro 15\"', 'Acme Corporation', '2024-01-15', 5, 2499.99),\n('Wireless Mouse', 'Tech Solutions Ltd', '2024-01-16', 25, 29.99),\n('USB-C Hub', 'Digital Dynamics', '2024-01-17', 10, 89.99),\n('Monitor 4K 27\"', 'Creative Agency', '2024-01-18', 3, 599.99),\n('Mechanical Keyboard', 'StartupXYZ', '2024-01-19', 15, 149.99),\n('Webcam HD', 'Remote Workers Inc', '2024-01-20', 8, 79.99),\n('Tablet Pro', 'Design Studio', '2024-01-21', 2, 899.99),\n('Smartphone', 'Mobile Solutions', '2024-01-22', 12, 799.99),\n('Headphones Pro', 'Audio Experts', '2024-01-23', 6, 299.99),\n('Power Bank', 'Travel Co', '2024-01-24', 20, 49.99);\n</code></pre>"},{"location":"code-libraries/generate-excel.html#download-the-excel-file","title":"Download the Excel File","text":"<p>The user can download the Excel report via:</p> <pre><code>/t/example/sales_report/excel\n</code></pre> <p>The browser will download the formatted Excel file with proper styling and data formatting.</p>"},{"location":"code-libraries/generate-excel.html#generate-excel-with-charts","title":"Generate Excel with Charts","text":"<p>For more advanced Excel generation with charts and pivot tables, you can use Apache POI's chart capabilities.</p> TransactionOutput sales_chart.py<pre><code>from utils import render\nfrom models import Sale\nfrom org.apache.poi.xssf.usermodel import XSSFWorkbook\nfrom org.apache.poi.ss.usermodel import CellStyle, Row\nfrom org.apache.poi.xddf.usermodel.chart import ChartTypes, XDDFDataSource, XDDFNumericalDataSource, AxisPosition\nfrom org.apache.poi.xddf.usermodel.chart import XDDFDataSourcesFactory, XDDFChartData\nfrom org.apache.poi.ss.util import CellRangeAddress\nfrom java.io import ByteArrayOutputStream\nfrom java.util import Date\nfrom java.text import SimpleDateFormat\n\nclass Sales_chart(object):\n    def excel(self, ctx):\n        workbook = XSSFWorkbook()\n        sheet = workbook.createSheet(\"Sales by Product\")\n\n        # Aggregate sales data by product\n        product_sales = {}\n        sales = Sale.findAll()\n\n        for sale in sales:\n            product = sale.get(\"product_name\") or \"Unknown\"\n            total = (sale.getInteger(\"quantity\") or 0) * (sale.getDouble(\"unit_price\") or 0.0)\n\n            if product in product_sales:\n                product_sales[product] += total\n            else:\n                product_sales[product] = total\n\n        # Create data rows\n        row_idx = 0\n\n        # Headers\n        header_row = sheet.createRow(row_idx)\n        header_row.createCell(0).setCellValue(\"Product\")\n        header_row.createCell(1).setCellValue(\"Total Sales\")\n        row_idx += 1\n\n        # Data rows\n        for product, total_sales in product_sales.items():\n            row = sheet.createRow(row_idx)\n            row.createCell(0).setCellValue(product)\n            row.createCell(1).setCellValue(total_sales)\n            row_idx += 1\n\n        # Create a chart\n        drawing = sheet.createDrawingPatriarch()\n        anchor = drawing.createAnchor(0, 0, 0, 0, 4, 1, 15, 20)  # Position of chart\n\n        chart = drawing.createChart(anchor)\n        chart.setTitleText(\"Sales by Product\")\n\n        category_axis = chart.createCategoryAxis(AxisPosition.BOTTOM)\n        value_axis = chart.createValueAxis(AxisPosition.LEFT)\n\n        # Define data sources for the chart\n        data_range = CellRangeAddress(1, row_idx - 1, 1, 1)  # Sales data\n        category_range = CellRangeAddress(1, row_idx - 1, 0, 0)  # Product names\n\n        categories = XDDFDataSourcesFactory.fromStringCellRange(sheet, category_range)\n        values = XDDFDataSourcesFactory.fromNumericCellRange(sheet, data_range)\n\n        # Create bar chart\n        chart_data = chart.createData(ChartTypes.BAR, category_axis, value_axis)\n        series = chart_data.addSeries(categories, values)\n        series.setTitle(\"Sales Amount\", None)\n\n        chart.plot(chart_data)\n\n        # Auto-size columns\n        sheet.autoSizeColumn(0)\n        sheet.autoSizeColumn(1)\n\n        # Write to byte array\n        output_stream = ByteArrayOutputStream()\n        workbook.write(output_stream)\n        workbook.close()\n\n        # Generate filename\n        date_format = SimpleDateFormat(\"yyyy-MM-dd\")\n        filename = \"sales_chart_%s.xlsx\" % date_format.format(Date())\n\n        ctx.go_to = render.as_blob(\n            ctx,\n            output_stream.toByteArray(),\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            filename,\n            attachment=True\n        )\n</code></pre> <p> </p>"},{"location":"code-libraries/generate-excel.html#download-the-chart-excel-file","title":"Download the Chart Excel File","text":"<p>The user can download the Excel file with embedded chart via:</p> <pre><code>/t/example/sales_chart/excel\n</code></pre>"},{"location":"code-libraries/generate-excel.html#generate-excel-template","title":"Generate Excel Template","text":"<p>Sometimes you need to generate Excel templates with predefined formatting that users can fill out.</p> TransactionOutput invoice_template.py<pre><code>from utils import render\nfrom org.apache.poi.xssf.usermodel import XSSFWorkbook\nfrom org.apache.poi.ss.usermodel import CellStyle, Font, BorderStyle, FillPatternType, IndexedColors, HorizontalAlignment\nfrom org.apache.poi.ss.util import CellRangeAddress\nfrom java.io import ByteArrayOutputStream\n\nclass Invoice_template(object):\n    def excel(self, ctx):\n        workbook = XSSFWorkbook()\n        sheet = workbook.createSheet(\"Invoice Template\")\n\n        # Create styles\n        title_style = workbook.createCellStyle()\n        title_font = workbook.createFont()\n        title_font.setBold(True)\n        title_font.setFontHeightInPoints(16)\n        title_style.setFont(title_font)\n        # Center alignment - remove if causing issues\n        # title_style.setAlignment(HorizontalAlignment.CENTER)\n\n        header_style = workbook.createCellStyle()\n        header_font = workbook.createFont()\n        header_font.setBold(True)\n        header_style.setFont(header_font)\n        header_style.setBorderBottom(BorderStyle.THIN)\n        header_style.setBorderTop(BorderStyle.THIN)\n        header_style.setBorderLeft(BorderStyle.THIN)\n        header_style.setBorderRight(BorderStyle.THIN)\n        header_style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex())\n        header_style.setFillPattern(FillPatternType.SOLID_FOREGROUND)\n\n        border_style = workbook.createCellStyle()\n        border_style.setBorderBottom(BorderStyle.THIN)\n        border_style.setBorderTop(BorderStyle.THIN)\n        border_style.setBorderLeft(BorderStyle.THIN)\n        border_style.setBorderRight(BorderStyle.THIN)\n\n        # Title\n        title_row = sheet.createRow(0)\n        title_cell = title_row.createCell(0)\n        title_cell.setCellValue(\"INVOICE TEMPLATE\")\n        title_cell.setCellStyle(title_style)\n        sheet.addMergedRegion(CellRangeAddress(0, 0, 0, 6))\n\n        # Company info section\n        sheet.createRow(2).createCell(0).setCellValue(\"Company Name:\")\n        sheet.createRow(3).createCell(0).setCellValue(\"Address:\")\n        sheet.createRow(4).createCell(0).setCellValue(\"Phone:\")\n        sheet.createRow(5).createCell(0).setCellValue(\"Email:\")\n\n        # Invoice details\n        sheet.createRow(2).createCell(4).setCellValue(\"Invoice No:\")\n        sheet.createRow(3).createCell(4).setCellValue(\"Date:\")\n        sheet.createRow(4).createCell(4).setCellValue(\"Due Date:\")\n\n        # Customer section\n        sheet.createRow(7).createCell(0).setCellValue(\"Bill To:\")\n        sheet.createRow(8).createCell(0).setCellValue(\"Customer Name:\")\n        sheet.createRow(9).createCell(0).setCellValue(\"Customer Address:\")\n\n        # Items table header\n        header_row = sheet.createRow(12)\n        headers = [\"Description\", \"Quantity\", \"Unit Price\", \"Total\"]\n        for col_idx, header in enumerate(headers):\n            cell = header_row.createCell(col_idx)\n            cell.setCellValue(header)\n            cell.setCellStyle(header_style)\n\n        # Create empty rows for items with borders\n        for row_idx in range(13, 23):  # 10 empty rows\n            row = sheet.createRow(row_idx)\n            for col_idx in range(4):\n                cell = row.createCell(col_idx)\n                cell.setCellStyle(border_style)\n\n        # Total section\n        total_row = sheet.createRow(24)\n        total_row.createCell(2).setCellValue(\"TOTAL:\")\n        total_cell = total_row.createCell(3)\n        total_cell.setCellStyle(border_style)\n\n        # Set column widths\n        sheet.setColumnWidth(0, 8000)  # Description\n        sheet.setColumnWidth(1, 3000)  # Quantity\n        sheet.setColumnWidth(2, 4000)  # Unit Price\n        sheet.setColumnWidth(3, 4000)  # Total\n\n        # Write to byte array\n        output_stream = ByteArrayOutputStream()\n        workbook.write(output_stream)\n        workbook.close()\n\n        ctx.go_to = render.as_blob(\n            ctx,\n            output_stream.toByteArray(),\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            \"invoice_template.xlsx\",\n            attachment=True\n        )\n</code></pre> <p> </p>"},{"location":"code-libraries/generate-excel.html#download-the-template","title":"Download the Template","text":"<p>The user can download the Excel template via:</p> <pre><code>/t/example/invoice_template/excel\n</code></pre> <p>Do you know?</p> <ul> <li>Use <code>attachment=True</code> to force download instead of displaying inline</li> <li>Apache POI supports both <code>.xls</code> (older format) and <code>.xlsx</code> (newer format) files</li> <li>For large datasets, consider using streaming APIs like <code>SXSSF</code> for better memory efficiency</li> <li>You can password-protect Excel files using <code>workbook.writeProtectWorkbook(password, username)</code></li> </ul>"},{"location":"code-libraries/generate-pdf.html","title":"Generate PDF","text":"<p>S\u00d8AD includes built-in support for PDF generation using Flying Saucer. This recipe demonstrates how to render an HTML view as a styled PDF document\u2014ideal for invoices, reports, or certificates.</p>"},{"location":"code-libraries/generate-pdf.html#generate-pdf-from-html","title":"Generate PDF from HTML","text":"TransactionViewOutput invoice.py<pre><code>from utils import render\n\nclass Invoice(object):\n    def view(self, ctx):\n        # Set values to be rendered inside the HTML view\n        ctx.output[\"invoice_no\"] = \"INV-2024-005\"\n        ctx.output[\"customer_name\"] = \"Ahmad Bin Ali\"\n        ctx.output[\"items\"] = [\n            {\"desc\": \"Product A\", \"qty\": 2, \"price\": 100},\n            {\"desc\": \"Product B\", \"qty\": 1, \"price\": 250}\n        ]\n        grand_total = 0\n        for item in ctx.output[\"items\"]:\n            total_price = item.get(\"qty\") * item.get(\"price\")\n            item[\"total_price\"] = total_price\n            grand_total = grand_total + total_price\n        ctx.output[\"total\"] = grand_total\n\n        # Generate the PDF from the HTML view\n        ctx.go_to = render.as_pdf(ctx, \"invoice\", attachment=False)\n</code></pre> invoice.html<pre><code>&lt;html&gt;\n\n&lt;head&gt;\n  &lt;style&gt;\n    body {\n      font-family: sans-serif;\n    }\n\n    h1 {\n      text-align: center;\n    }\n\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      margin-top: 1em;\n    }\n\n    th,\n    td {\n      border: 1px solid #ccc;\n      padding: 8px;\n      text-align: left;\n    }\n\n    .right {\n      text-align: right;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Invoice&lt;/h1&gt;\n  &lt;p&gt;&lt;strong&gt;Invoice No:&lt;/strong&gt; {{invoice_no}}&lt;/p&gt;\n  &lt;p&gt;&lt;strong&gt;Customer:&lt;/strong&gt; {{customer_name}}&lt;/p&gt;\n\n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Description&lt;/th&gt;\n        &lt;th&gt;Qty&lt;/th&gt;\n        &lt;th&gt;Price&lt;/th&gt;\n        &lt;th&gt;Total&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      {{#each items}}\n      &lt;tr&gt;\n        &lt;td&gt;{{desc}}&lt;/td&gt;\n        &lt;td&gt;{{qty}}&lt;/td&gt;\n        &lt;td class=\"right\"&gt;{{price}}&lt;/td&gt;\n        &lt;td class=\"right\"&gt;{{total_price}}&lt;/td&gt;\n      &lt;/tr&gt;\n      {{/each}}\n    &lt;/tbody&gt;\n    &lt;tfoot&gt;\n      &lt;tr&gt;\n        &lt;th colspan=\"3\" class=\"right\"&gt;Total:&lt;/th&gt;\n        &lt;th class=\"right\"&gt;{{total}}&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/tfoot&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"code-libraries/generate-pdf.html#view-the-pdf","title":"View the PDF","text":"<p>The user can open this transaction via:</p> <pre><code>/t/example/invoice\n</code></pre> <p>The browser open the rendered PDF content.</p>"},{"location":"code-libraries/generate-pdf.html#generate-pdf-using-api","title":"Generate PDF using API","text":"<p>While S\u00d8AD provides built-in PDF rendering via Flying Saucer for HTML-to-PDF conversion, you can also use OpenPDF for programmatic PDF generation\u2014ideal for simple layout control, table drawing, or dynamic document building without relying on HTML.</p> TransactionOutput invoice.py<pre><code>from utils import render\n\nfrom com.lowagie.text import Document, Paragraph, Font, FontFactory\nfrom com.lowagie.text.pdf import PdfWriter\nfrom java.io import ByteArrayOutputStream\n\nclass Invoice(object):\n    def pdf(self, ctx):\n        output_stream = ByteArrayOutputStream()\n\n        document = Document()\n        PdfWriter.getInstance(document, output_stream)\n\n        document.open()\n        title_font = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16)\n        normal_font = FontFactory.getFont(FontFactory.HELVETICA, 12)\n\n        document.add(Paragraph(\"Invoice Summary\", title_font))\n        document.add(Paragraph(\"Customer: Ahmad Bin Ali\", normal_font))\n        document.add(Paragraph(\"Invoice #: INV-2024-005\", normal_font))\n        document.add(Paragraph(\"Total: RM450\", normal_font))\n\n        document.close()\n\n        ctx.go_to = render.as_blob(\n            ctx,\n            output_stream.toByteArray(),\n            \"application/pdf\",\n            \"invoice.pdf\",\n            attachment=False \n        )\n</code></pre> <p> </p>"},{"location":"code-libraries/generate-pdf.html#view-the-pdf_1","title":"View the PDF","text":"<p>The user can open this transaction via:</p> <pre><code>/t/example/invoice/pdf\n</code></pre> <p>The browser open the rendered PDF content.</p> <p>Do you know?</p> <ul> <li>Use <code>attachment=True</code> to force download instead of displaying inline.</li> <li>For simple HTML-to-PDF, prefer Flying Saucer for better styling support.</li> </ul>"},{"location":"code-libraries/gmail-auth.html","title":"Google OAuth","text":"<p>Here\u2019s a compact, reference\u2011style recipe you can drop into the Cookbook for auth integration using Google (Gmail) as the example. It shows the standard OAuth 2.0 Authorization Code + PKCE web flow using Jetty <code>HttpClient</code>, persisting tokens in session, and making a sample Gmail API call.</p>"},{"location":"code-libraries/gmail-auth.html#recipe-google-gmail-oauth-20-with-pkce","title":"\ud83d\udd10 Recipe: Google (Gmail) OAuth 2.0 with PKCE","text":"<p>S\u00d8AD supports browser\u2011based OAuth flows. For Google, use the Authorization Code Flow with PKCE:</p> <ol> <li>Redirect the user to Google\u2019s consent screen (with <code>code_challenge</code>)</li> <li>Handle the callback, verify <code>state</code>, exchange the <code>code</code> for tokens using <code>code_verifier</code></li> <li>Store <code>access_token</code> (short\u2011lived) and <code>refresh_token</code> (long\u2011lived) in your session or secure store</li> <li>Call Gmail API with <code>Authorization: Bearer &lt;access_token&gt;</code></li> <li>When access token expires, refresh it with the <code>refresh_token</code></li> </ol> <p>Configure your Google OAuth client:</p> <ul> <li>Type: Web application</li> <li>Authorized redirect URI: <code>https://&lt;host&gt;&lt;ctxPath&gt;/t/auth/google/callback</code></li> <li> <p>Scopes (example):</p> </li> <li> <p><code>openid email profile</code></p> </li> <li><code>https://www.googleapis.com/auth/gmail.readonly</code> (or <code>gmail.send</code>, etc.)</li> </ul>"},{"location":"code-libraries/gmail-auth.html#transaction-google_authpy","title":"\ud83e\udde9 Transaction: <code>google_auth.py</code>","text":"<pre><code>from utils import render, Log\nfrom java.util import Base64, UUID\nfrom java.net import URLEncoder\nfrom java.nio.charset import StandardCharsets\nfrom java.security import SecureRandom, MessageDigest\nfrom org.eclipse.jetty.http import HttpHeader\nfrom org.eclipse.jetty.client.util import StringContentProvider\nfrom http_client_provider import HttpClientProvider  # as in your Mailgun recipe\n\nGOOGLE_AUTH_URL = \"https://accounts.google.com/o/oauth2/v2/auth\"\nGOOGLE_TOKEN_URL = \"https://oauth2.googleapis.com/token\"\nGMAIL_LABELS_API = \"https://gmail.googleapis.com/gmail/v1/users/me/labels\"\n\n# ---- Replace with your values (prefer reading from env or secure config) ----\nCLIENT_ID = \"YOUR_GOOGLE_CLIENT_ID\"\nCLIENT_SECRET = \"YOUR_GOOGLE_CLIENT_SECRET\"  # not used for pure PKCE, but fine to keep\nSCOPES = \"openid email profile https://www.googleapis.com/auth/gmail.readonly\"\n# ---------------------------------------------------------------------------\n\nclass Google_auth(Layout):\n    # --- Helpers (PKCE + URL building) ---\n    def _base64url(self, b):\n        s = Base64.getUrlEncoder().withoutPadding().encodeToString(b)\n        return s\n\n    def _random_bytes(self, n=32):\n        rnd = SecureRandom()\n        buf = bytearray(n)\n        rnd.nextBytes(buf)\n        return bytes(buf)\n\n    def _code_verifier(self):\n        # 43-128 chars; here we generate 64 random bytes then base64url\n        return self._base64url(self._random_bytes(64))\n\n    def _code_challenge(self, verifier):\n        digest = MessageDigest.getInstance(\"SHA-256\").digest(verifier.encode(\"UTF-8\"))\n        return self._base64url(digest)\n\n    def _q(self, k, v):\n        return \"%s=%s\" % (k, URLEncoder.encode(v, StandardCharsets.UTF_8.name()))\n\n    # --- Step 1: Redirect user to Google with PKCE ---\n    def login(self, ctx):\n        session = ctx.getSession()\n\n        # PKCE\n        verifier = self._code_verifier()\n        challenge = self._code_challenge(verifier)\n\n        # CSRF state\n        state = UUID.randomUUID().toString()\n\n        # Store in session\n        session.setAttribute(\"google_pkce_verifier\", verifier)\n        session.setAttribute(\"google_oauth_state\", state)\n\n        redirect_uri = \"%s/t/auth/google/callback\" % ctx.ctxPath\n\n        params = [\n            self._q(\"client_id\", CLIENT_ID),\n            self._q(\"redirect_uri\", redirect_uri),\n            self._q(\"response_type\", \"code\"),\n            self._q(\"scope\", SCOPES),\n            self._q(\"state\", state),\n            self._q(\"code_challenge\", challenge),\n            self._q(\"code_challenge_method\", \"S256\"),\n            # Optional UX tweaks:\n            # self._q(\"access_type\", \"offline\"),  # ask for refresh_token\n            # self._q(\"prompt\", \"consent\"),       # force consent each time\n        ]\n\n        auth_url = GOOGLE_AUTH_URL + \"?\" + \"&amp;\".join(params)\n        ctx.redirect(auth_url)\n\n    # --- Step 2: Handle callback &amp; exchange code for tokens ---\n    def callback(self, ctx):\n        request = ctx.getRequest()\n        session = ctx.getSession()\n\n        code  = request.getParameter(\"code\")\n        state = request.getParameter(\"state\")\n        err   = request.getParameter(\"error\")\n\n        if err:\n            Log.error(\"Google OAuth error: %s\" % err)\n            ctx.output[\"error\"] = \"Authorization failed.\"\n            ctx.go_to = render.as_view(ctx, \"auth_result\")\n            return\n\n        expected_state = session.getAttribute(\"google_oauth_state\")\n        if not expected_state or state != expected_state:\n            ctx.output[\"error\"] = \"Invalid state.\"\n            ctx.go_to = render.as_view(ctx, \"auth_result\")\n            return\n\n        verifier = session.getAttribute(\"google_pkce_verifier\")\n        if not verifier:\n            ctx.output[\"error\"] = \"Missing PKCE verifier.\"\n            ctx.go_to = render.as_view(ctx, \"auth_result\")\n            return\n\n        redirect_uri = \"%s/t/auth/google/callback\" % ctx.ctxPath\n\n        form = [\n            self._q(\"grant_type\", \"authorization_code\"),\n            self._q(\"code\", code),\n            self._q(\"client_id\", CLIENT_ID),\n            self._q(\"redirect_uri\", redirect_uri),\n            self._q(\"code_verifier\", verifier),\n            # If your OAuth config requires client_secret for web apps, include:\n            # self._q(\"client_secret\", CLIENT_SECRET),\n        ]\n        form_body = \"&amp;\".join(form)\n\n        try:\n            client = HttpClientProvider.get_client()\n            req = client.POST(GOOGLE_TOKEN_URL)\n            req.header(HttpHeader.CONTENT_TYPE, \"application/x-www-form-urlencoded\")\n            req.content(StringContentProvider(form_body, \"utf-8\"))\n\n            res = req.send()\n            body = res.getContentAsString()\n\n            # Parse JSON (Jython)\n            import json\n            tok = json.loads(body)\n\n            access_token  = tok.get(\"access_token\")\n            refresh_token = tok.get(\"refresh_token\")  # may be None unless 'access_type=offline' &amp; consent\n            id_token      = tok.get(\"id_token\")\n\n            if not access_token:\n                ctx.output[\"error\"] = \"Token exchange failed.\"\n                ctx.output[\"response\"] = body\n                ctx.go_to = render.as_view(ctx, \"auth_result\")\n                return\n\n            # Persist tokens (session for demo; use secure store for prod)\n            session.setAttribute(\"google_access_token\", access_token)\n            if refresh_token:\n                session.setAttribute(\"google_refresh_token\", refresh_token)\n            if id_token:\n                session.setAttribute(\"google_id_token\", id_token)\n\n            ctx.output[\"message\"] = \"Google account connected.\"\n            ctx.go_to = render.as_view(ctx, \"auth_result\")\n\n        except Exception as e:\n            Log.error(\"Token exchange error: %s\" % str(e))\n            ctx.output[\"error\"] = \"Token exchange error.\"\n            ctx.go_to = render.as_view(ctx, \"auth_result\")\n\n    # --- Step 3: Call Gmail API (example: list labels) ---\n    def gmail_labels(self, ctx):\n        session = ctx.getSession()\n        token = session.getAttribute(\"google_access_token\")\n        if not token:\n            ctx.redirect(\"%s/t/auth/google/login\" % ctx.ctxPath)\n            return\n\n        try:\n            client = HttpClientProvider.get_client()\n            req = client.newRequest(GMAIL_LABELS_API)\n            req.header(HttpHeader.AUTHORIZATION, \"Bearer %s\" % token)\n            res = req.send()\n\n            ctx.output[\"status\"] = res.getStatus()\n            ctx.output[\"result\"] = res.getContentAsString()\n\n        except Exception as e:\n            Log.error(\"Gmail API call failed: %s\" % str(e))\n            ctx.output[\"error\"] = \"Gmail API call failed.\"\n\n        ctx.go_to = render.as_view(ctx, \"gmail_result\")\n</code></pre>"},{"location":"code-libraries/gmail-auth.html#views","title":"\ud83d\udcc4 Views","text":"<p><code>_google_auth/auth_result.html</code></p> <pre><code>&lt;h2&gt;Google Auth Result&lt;/h2&gt;\n{{#if error}}\n  &lt;div class=\"alert alert-danger\"&gt;Error: {{error}}&lt;/div&gt;\n  {{#if response}}&lt;pre&gt;{{response}}&lt;/pre&gt;{{/if}}\n{{else}}\n  &lt;div class=\"alert alert-success\"&gt;{{message}}&lt;/div&gt;\n  &lt;p&gt;&lt;a href=\"{{ctxPath}}/t/auth/google/gmail_labels\"&gt;List Gmail Labels&lt;/a&gt;&lt;/p&gt;\n{{/if}}\n</code></pre> <p><code>_google_auth/gmail_result.html</code></p> <pre><code>&lt;h2&gt;Gmail Labels (Raw Response)&lt;/h2&gt;\n{{#if error}}\n  &lt;div class=\"alert alert-danger\"&gt;{{error}}&lt;/div&gt;\n{{else}}\n  &lt;div class=\"alert alert-success\"&gt;&lt;strong&gt;Status:&lt;/strong&gt; {{status}}&lt;/div&gt;\n  &lt;pre&gt;{{result}}&lt;/pre&gt;\n{{/if}}\n</code></pre>"},{"location":"code-libraries/gmail-auth.html#notes-good-practices","title":"\ud83d\udcdd Notes &amp; Good Practices","text":"<ul> <li>Refresh tokens: Request with <code>access_type=offline</code> + <code>prompt=consent</code> (if needed). Use a scheduled job or on\u2011demand refresh when <code>401</code> occurs.</li> <li>Token storage: Session is fine for demos; for production, store encrypted (e.g., DB + KMS, or OS keyring for CLI).</li> <li>Scopes: Minimize to what you need (<code>gmail.readonly</code>, <code>gmail.send</code>, etc.).</li> <li>Callback URL: Must match the one registered in Google Cloud Console.</li> <li>Error handling: Surface <code>error_description</code> from token endpoint if present to aid debugging.</li> </ul> <p>This pattern is reusable for other Google APIs: change scopes and endpoints, keep the PKCE + code exchange flow the same.</p>"},{"location":"code-libraries/htmx.html","title":"HTMX","text":"<p>HTMX brings the power of modern web applications to S\u00d8AD without complex JavaScript frameworks. This recipe shows you how to create dynamic, interactive web pages using HTMX's declarative approach to AJAX, CSS transitions, and WebSockets.</p>"},{"location":"code-libraries/htmx.html#dynamic-todo-list-with-htmx","title":"Dynamic Todo List with HTMX","text":"TransactionMain PageTask List PartialEdit Form PartialSQLOutput htmx_todo.py<pre><code>from utils import render\nfrom models import Task\n\nclass Htmx_todo(object):\n    def view(self, ctx):\n        \"\"\"Main page with full layout\"\"\"\n        tasks = Task.findAll().orderBy(\"created_at DESC\")\n        ctx.output[\"tasks\"] = tasks\n        ctx.go_to = render.as_view(ctx, \"htmx_todo\")\n\n    def task_list(self, ctx):\n        \"\"\"Partial view - just the task list\"\"\"\n        tasks = Task.findAll().orderBy(\"created_at DESC\")\n        ctx.output[\"tasks\"] = tasks\n        ctx.go_to = render.as_view(ctx, \"htmx_task_list\")\n\n    def add_task(self, ctx):\n        \"\"\"Add new task via HTMX\"\"\"\n        request = ctx.getRequest()\n        task_text = request.getParameter(\"task\")\n\n        if task_text and len(task_text.strip()) &gt; 0:\n            # Create new task\n            new_task = Task()\n            new_task.set(\"text\", task_text.strip())\n            new_task.set(\"completed\", False)\n            new_task.save()\n\n        # Return updated task list\n        tasks = Task.findAll().orderBy(\"created_at DESC\")\n        ctx.output[\"tasks\"] = tasks\n        ctx.go_to = render.as_view(ctx, \"htmx_task_list\")\n\n    def toggle_task(self, ctx):\n        \"\"\"Toggle task completion status\"\"\"\n        request = ctx.getRequest()\n        task_id = request.getParameter(\"id\")\n\n        if task_id:\n            task = Task.findById(task_id)\n            if task:\n                # Toggle completion status\n                current_status = task.getBoolean(\"completed\")\n                task.set(\"completed\", not current_status)\n                task.save()\n\n        # Return updated task list\n        tasks = Task.findAll().orderBy(\"created_at DESC\")\n        ctx.output[\"tasks\"] = tasks\n        ctx.go_to = render.as_view(ctx, \"htmx_task_list\")\n\n    def delete_task(self, ctx):\n        \"\"\"Delete task\"\"\"\n        request = ctx.getRequest()\n        task_id = request.getParameter(\"id\")\n\n        if task_id:\n            task = Task.findById(task_id)\n            if task:\n                task.delete()\n\n        # Return updated task list\n        tasks = Task.findAll().orderBy(\"created_at DESC\")\n        ctx.output[\"tasks\"] = tasks\n        ctx.go_to = render.as_view(ctx, \"htmx_task_list\")\n\n    def edit_form(self, ctx):\n        \"\"\"Show edit form for a task\"\"\"\n        request = ctx.getRequest()\n        task_id = request.getParameter(\"id\")\n\n        if task_id:\n            task = Task.findById(task_id)\n            if task:\n                ctx.output[\"task\"] = task\n                ctx.go_to = render.as_view(ctx, \"htmx_edit_form\")\n                return\n\n        # If task not found, return to task list\n        self.task_list(ctx)\n\n    def update_task(self, ctx):\n        \"\"\"Update task text\"\"\"\n        request = ctx.getRequest()\n        task_id = request.getParameter(\"id\")\n        new_text = request.getParameter(\"text\")\n\n        if task_id and new_text and len(new_text.strip()) &gt; 0:\n            task = Task.findById(task_id)\n            if task:\n                task.set(\"text\", new_text.strip())\n                task.save()\n\n        # Return updated task list\n        tasks = Task.findAll().orderBy(\"created_at DESC\")\n        ctx.output[\"tasks\"] = tasks\n        ctx.go_to = render.as_view(ctx, \"htmx_task_list\")\n</code></pre> htmx_todo.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;HTMX Todo List&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;script src=\"https://unpkg.com/htmx.org@1.9.6\"&gt;&lt;/script&gt;\n    &lt;style&gt;\n        .htmx-indicator { display: none; }\n        .htmx-request .htmx-indicator { display: inline; }\n        .htmx-request.htmx-indicator { display: inline; }\n        .completed { text-decoration: line-through; opacity: 0.6; }\n        .fade-in { animation: fadeIn 0.3s ease-in; }\n        .fade-out { animation: fadeOut 0.3s ease-out; }\n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(-10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        @keyframes fadeOut {\n            from { opacity: 1; }\n            to { opacity: 0; }\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"row justify-content-center\"&gt;\n            &lt;div class=\"col-md-8\"&gt;\n                &lt;h1 class=\"text-center mb-4\"&gt;HTMX Todo List&lt;/h1&gt;\n                &lt;p class=\"text-center text-muted mb-4\"&gt;Dynamic updates without page reloads!&lt;/p&gt;\n\n                &lt;!-- Add Task Form --&gt;\n                &lt;div class=\"card mb-4\"&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;form hx-post=\"/t/example/htmx_todo/add_task\"\n                              hx-target=\"#task-list\"\n                              hx-swap=\"outerHTML\"\n                              hx-on::after-request=\"this.reset()\"\n                              class=\"d-flex\"&gt;\n                            &lt;input type=\"text\" \n                                   class=\"form-control me-2\" \n                                   name=\"task\" \n                                   placeholder=\"What needs to be done?\" \n                                   required&gt;\n                            &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;\n                                &lt;span class=\"htmx-indicator spinner-border spinner-border-sm me-1\"&gt;&lt;/span&gt;\n                                Add Task\n                            &lt;/button&gt;\n                        &lt;/form&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                &lt;!-- Task List Container --&gt;\n                &lt;div id=\"task-list\"&gt;\n                    {{&gt; htmx_task_list}}\n                &lt;/div&gt;\n\n                &lt;!-- Stats --&gt;\n                &lt;div class=\"text-center mt-4\"&gt;\n                    &lt;small class=\"text-muted\"&gt;\n                        Powered by HTMX - No JavaScript framework needed!\n                    &lt;/small&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Toast for notifications --&gt;\n    &lt;div class=\"position-fixed top-0 end-0 p-3\" style=\"z-index: 11\"&gt;\n        &lt;div id=\"notification-toast\" class=\"toast\" role=\"alert\"&gt;\n            &lt;div class=\"toast-header\"&gt;\n                &lt;strong class=\"me-auto\"&gt;Todo List&lt;/strong&gt;\n                &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"toast\"&gt;&lt;/button&gt;\n            &lt;/div&gt;\n            &lt;div class=\"toast-body\" id=\"toast-message\"&gt;\n                Task updated!\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        // Show toast notifications\n        document.addEventListener('htmx:afterRequest', function(e) {\n            if (e.detail.xhr.status === 200) {\n                const toast = new bootstrap.Toast(document.getElementById('notification-toast'));\n                toast.show();\n            }\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> htmx_task_list.html<pre><code>&lt;div id=\"task-list\" class=\"fade-in\"&gt;\n    {{#if tasks}}\n        &lt;div class=\"card\"&gt;\n            &lt;div class=\"card-header d-flex justify-content-between align-items-center\"&gt;\n                &lt;h5 class=\"mb-0\"&gt;Tasks ({{tasks.length}})&lt;/h5&gt;\n                &lt;button class=\"btn btn-sm btn-outline-secondary\"\n                        hx-get=\"/t/example/htmx_todo/task_list\"\n                        hx-target=\"#task-list\"\n                        hx-swap=\"outerHTML\"&gt;\n                    &lt;span class=\"htmx-indicator spinner-border spinner-border-sm me-1\"&gt;&lt;/span&gt;\n                    Refresh\n                &lt;/button&gt;\n            &lt;/div&gt;\n            &lt;div class=\"list-group list-group-flush\"&gt;\n                {{#each tasks}}\n                &lt;div class=\"list-group-item\" id=\"task-{{id}}\"&gt;\n                    &lt;div class=\"d-flex justify-content-between align-items-center\"&gt;\n                        &lt;div class=\"flex-grow-1 {{#if completed}}completed{{/if}}\"&gt;\n                            &lt;div class=\"form-check d-inline-block me-2\"&gt;\n                                &lt;input class=\"form-check-input\" \n                                       type=\"checkbox\" \n                                       {{#if completed}}checked{{/if}}\n                                       hx-post=\"/t/example/htmx_todo/toggle_task\"\n                                       hx-target=\"#task-list\"\n                                       hx-swap=\"outerHTML\"\n                                       hx-vals='{\"id\": \"{{id}}\"}'&gt;\n                            &lt;/div&gt;\n                            &lt;span class=\"task-text\"&gt;{{text}}&lt;/span&gt;\n                            &lt;small class=\"text-muted d-block\"&gt;{{created_at}}&lt;/small&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"btn-group btn-group-sm\"&gt;\n                            &lt;button class=\"btn btn-outline-warning\"\n                                    hx-get=\"/t/example/htmx_todo/edit_form\"\n                                    hx-target=\"#task-{{id}}\"\n                                    hx-swap=\"outerHTML\"\n                                    hx-vals='{\"id\": \"{{id}}\"}'&gt;\n                                &lt;i class=\"bi bi-pencil\"&gt;&lt;/i&gt;\n                            &lt;/button&gt;\n                            &lt;button class=\"btn btn-outline-danger\"\n                                    hx-delete=\"/t/example/htmx_todo/delete_task\"\n                                    hx-target=\"#task-list\"\n                                    hx-swap=\"outerHTML\"\n                                    hx-vals='{\"id\": \"{{id}}\"}'\n                                    hx-confirm=\"Are you sure you want to delete this task?\"&gt;\n                                &lt;span class=\"htmx-indicator spinner-border spinner-border-sm\"&gt;&lt;/span&gt;\n                                &lt;i class=\"bi bi-trash\"&gt;&lt;/i&gt;\n                            &lt;/button&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                {{/each}}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    {{else}}\n        &lt;div class=\"alert alert-info text-center\"&gt;\n            &lt;h5&gt;No tasks yet!&lt;/h5&gt;\n            &lt;p class=\"mb-0\"&gt;Add your first task above to get started.&lt;/p&gt;\n        &lt;/div&gt;\n    {{/if}}\n&lt;/div&gt;\n</code></pre> htmx_edit_form.html<pre><code>&lt;div class=\"list-group-item bg-light\" id=\"task-{{task.id}}\"&gt;\n    &lt;form hx-post=\"/t/example/htmx_todo/update_task\"\n          hx-target=\"#task-list\"\n          hx-swap=\"outerHTML\"\n          class=\"d-flex align-items-center\"&gt;\n        &lt;input type=\"hidden\" name=\"id\" value=\"{{task.id}}\"&gt;\n        &lt;div class=\"flex-grow-1 me-2\"&gt;\n            &lt;input type=\"text\" \n                   class=\"form-control\" \n                   name=\"text\" \n                   value=\"{{task.text}}\" \n                   required \n                   autofocus&gt;\n        &lt;/div&gt;\n        &lt;div class=\"btn-group btn-group-sm\"&gt;\n            &lt;button type=\"submit\" class=\"btn btn-success\"&gt;\n                &lt;span class=\"htmx-indicator spinner-border spinner-border-sm me-1\"&gt;&lt;/span&gt;\n                Save\n            &lt;/button&gt;\n            &lt;button type=\"button\" \n                    class=\"btn btn-secondary\"\n                    hx-get=\"/t/example/htmx_todo/task_list\"\n                    hx-target=\"#task-list\"\n                    hx-swap=\"outerHTML\"&gt;\n                Cancel\n            &lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>CREATE TABLE task (\n    id int NOT NULL AUTO_INCREMENT,\n    text varchar(500) NOT NULL,\n    completed boolean DEFAULT false,\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_completed (completed),\n    KEY idx_created (created_at)\n);\n\nINSERT INTO task (text, completed) VALUES\n('Learn HTMX basics', false),\n('Build dynamic todo list', false),\n('Implement partial page updates', true),\n('Add smooth animations', false),\n('Test user interactions', false);\n</code></pre>"},{"location":"code-libraries/htmx.html#htmx-features-demonstrated","title":"HTMX Features Demonstrated","text":"<ul> <li>Partial Updates: Only update specific parts of the page</li> <li>Form Handling: Submit forms without page refresh</li> <li>Loading Indicators: Visual feedback during requests</li> <li>Inline Editing: Edit tasks without leaving the page</li> <li>Confirmations: Built-in confirmation dialogs</li> </ul>"},{"location":"code-libraries/htmx.html#live-search-with-htmx","title":"Live Search with HTMX","text":"TransactionMain Search PageSearch Results PartialUser Details PartialSQLOutput htmx_search.py<pre><code>from utils import render\nfrom models import User\nimport time\n\nclass Htmx_search(object):\n    def view(self, ctx):\n        \"\"\"Main search page\"\"\"\n        ctx.go_to = render.as_view(ctx, \"htmx_search\")\n\n    def search_users(self, ctx):\n        \"\"\"Partial view - search results only\"\"\"\n        request = ctx.getRequest()\n        query = request.getParameter(\"q\") or \"\"\n\n        # Simulate some processing time for demo\n        time.sleep(0.1)\n\n        results = []\n        if len(query.strip()) &gt;= 2:\n            # Search users by name or email\n            users = User.where(\"name LIKE ? OR email LIKE ?\", \n                             \"%%%s%%\" % query, \"%%%s%%\" % query).limit(20)\n\n            for user in users:\n                results.append({\n                    \"id\": user.get(\"id\"),\n                    \"name\": user.get(\"name\"),\n                    \"email\": user.get(\"email\"),\n                    \"department\": user.get(\"department\"),\n                    \"avatar\": user.get(\"avatar\") or \"/assets/default-avatar.png\"\n                })\n\n        ctx.output[\"query\"] = query\n        ctx.output[\"results\"] = results\n        ctx.go_to = render.as_view(ctx, \"htmx_search_results\")\n\n    def user_details(self, ctx):\n        \"\"\"Partial view - user details modal content\"\"\"\n        request = ctx.getRequest()\n        user_id = request.getParameter(\"id\")\n\n        if user_id:\n            user = User.findById(user_id)\n            if user:\n                ctx.output[\"user\"] = user\n                ctx.go_to = render.as_view(ctx, \"htmx_user_details\")\n                return\n\n        # User not found\n        ctx.output[\"error\"] = \"User not found\"\n        ctx.go_to = render.as_view(ctx, \"htmx_user_details\")\n</code></pre> htmx_search.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Live Search with HTMX&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css\" rel=\"stylesheet\"&gt;\n    &lt;script src=\"https://unpkg.com/htmx.org@1.9.6\"&gt;&lt;/script&gt;\n    &lt;style&gt;\n        .search-container {\n            position: sticky;\n            top: 0;\n            background: white;\n            z-index: 100;\n            padding: 1rem 0;\n            border-bottom: 1px solid #dee2e6;\n        }\n        .htmx-indicator { \n            display: none; \n        }\n        .htmx-request .htmx-indicator { \n            display: inline; \n        }\n        .user-card {\n            transition: transform 0.2s, box-shadow 0.2s;\n            cursor: pointer;\n        }\n        .user-card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n        }\n        .avatar {\n            width: 50px;\n            height: 50px;\n            object-fit: cover;\n        }\n        .search-loading {\n            min-height: 200px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container-fluid\"&gt;\n        &lt;!-- Search Header --&gt;\n        &lt;div class=\"search-container\"&gt;\n            &lt;div class=\"container\"&gt;\n                &lt;div class=\"row justify-content-center\"&gt;\n                    &lt;div class=\"col-md-8\"&gt;\n                        &lt;h1 class=\"text-center mb-4\"&gt;Live User Search&lt;/h1&gt;\n                        &lt;div class=\"input-group input-group-lg\"&gt;\n                            &lt;span class=\"input-group-text\"&gt;\n                                &lt;i class=\"bi bi-search\"&gt;&lt;/i&gt;\n                            &lt;/span&gt;\n                            &lt;input type=\"text\" \n                                   class=\"form-control\" \n                                   placeholder=\"Search users by name or email...\"\n                                   hx-get=\"/t/example/htmx_search/search_users\"\n                                   hx-target=\"#search-results\"\n                                   hx-trigger=\"keyup changed delay:300ms, search\"\n                                   hx-indicator=\"#search-indicator\"\n                                   name=\"q\"\n                                   autocomplete=\"off\"&gt;\n                            &lt;span class=\"input-group-text\"&gt;\n                                &lt;div class=\"htmx-indicator spinner-border spinner-border-sm\" id=\"search-indicator\"&gt;&lt;/div&gt;\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"form-text text-center\"&gt;\n                            Start typing to search... Results update as you type!\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Search Results --&gt;\n        &lt;div class=\"container mt-4\"&gt;\n            &lt;div id=\"search-results\"&gt;\n                &lt;div class=\"text-center text-muted py-5\"&gt;\n                    &lt;i class=\"bi bi-people display-1 text-muted\"&gt;&lt;/i&gt;\n                    &lt;h3&gt;Search for Users&lt;/h3&gt;\n                    &lt;p&gt;Enter at least 2 characters to start searching&lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- User Details Modal --&gt;\n    &lt;div class=\"modal fade\" id=\"userModal\" tabindex=\"-1\"&gt;\n        &lt;div class=\"modal-dialog\"&gt;\n            &lt;div class=\"modal-content\" id=\"modal-content\"&gt;\n                &lt;!-- Modal content will be loaded here --&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        // Auto-focus search input\n        document.querySelector('input[name=\"q\"]').focus();\n\n        // Handle modal events\n        document.addEventListener('htmx:afterRequest', function(e) {\n            if (e.detail.target.id === 'modal-content') {\n                const modal = new bootstrap.Modal(document.getElementById('userModal'));\n                modal.show();\n            }\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> htmx_search_results.html<pre><code>&lt;div id=\"search-results\"&gt;\n    {{#if query}}\n        {{#if results}}\n            &lt;div class=\"row mb-3\"&gt;\n                &lt;div class=\"col\"&gt;\n                    &lt;h4&gt;Search Results for \"{{query}}\"&lt;/h4&gt;\n                    &lt;small class=\"text-muted\"&gt;Found {{results.length}} user(s)&lt;/small&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"row\"&gt;\n                {{#each results}}\n                &lt;div class=\"col-md-6 col-lg-4 mb-3\"&gt;\n                    &lt;div class=\"card user-card h-100\"\n                         hx-get=\"/t/example/htmx_search/user_details\"\n                         hx-target=\"#modal-content\"\n                         hx-vals='{\"id\": \"{{id}}\"}'\n                         data-bs-toggle=\"tooltip\"\n                         title=\"Click to view details\"&gt;\n                        &lt;div class=\"card-body\"&gt;\n                            &lt;div class=\"d-flex align-items-center\"&gt;\n                                &lt;img src=\"{{avatar}}\" \n                                     class=\"avatar rounded-circle me-3\" \n                                     alt=\"{{name}}\"&gt;\n                                &lt;div class=\"flex-grow-1\"&gt;\n                                    &lt;h6 class=\"card-title mb-1\"&gt;{{name}}&lt;/h6&gt;\n                                    &lt;p class=\"card-text small text-muted mb-1\"&gt;{{email}}&lt;/p&gt;\n                                    {{#if department}}\n                                        &lt;span class=\"badge bg-secondary\"&gt;{{department}}&lt;/span&gt;\n                                    {{/if}}\n                                &lt;/div&gt;\n                                &lt;i class=\"bi bi-chevron-right text-muted\"&gt;&lt;/i&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                {{/each}}\n            &lt;/div&gt;\n        {{else}}\n            &lt;div class=\"text-center py-5\"&gt;\n                &lt;i class=\"bi bi-search display-1 text-muted\"&gt;&lt;/i&gt;\n                &lt;h4&gt;No users found&lt;/h4&gt;\n                &lt;p class=\"text-muted\"&gt;Try searching with different keywords&lt;/p&gt;\n            &lt;/div&gt;\n        {{/if}}\n    {{else}}\n        &lt;div class=\"text-center text-muted py-5\"&gt;\n            &lt;i class=\"bi bi-people display-1 text-muted\"&gt;&lt;/i&gt;\n            &lt;h3&gt;Search for Users&lt;/h3&gt;\n            &lt;p&gt;Enter at least 2 characters to start searching&lt;/p&gt;\n        &lt;/div&gt;\n    {{/if}}\n&lt;/div&gt;\n</code></pre> htmx_user_details.html<pre><code>{{#if error}}\n    &lt;div class=\"modal-header\"&gt;\n        &lt;h5 class=\"modal-title\"&gt;Error&lt;/h5&gt;\n        &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"&gt;&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div class=\"modal-body\"&gt;\n        &lt;div class=\"alert alert-danger\"&gt;{{error}}&lt;/div&gt;\n    &lt;/div&gt;\n{{else}}\n    &lt;div class=\"modal-header\"&gt;\n        &lt;h5 class=\"modal-title\"&gt;{{user.name}}&lt;/h5&gt;\n        &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"&gt;&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div class=\"modal-body\"&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-md-4 text-center\"&gt;\n                &lt;img src=\"{{user.avatar}}\" \n                     class=\"img-fluid rounded-circle mb-3\" \n                     style=\"max-width: 120px;\" \n                     alt=\"{{user.name}}\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"col-md-8\"&gt;\n                &lt;table class=\"table table-sm\"&gt;\n                    &lt;tr&gt;\n                        &lt;td&gt;&lt;strong&gt;Name:&lt;/strong&gt;&lt;/td&gt;\n                        &lt;td&gt;{{user.name}}&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;td&gt;&lt;strong&gt;Email:&lt;/strong&gt;&lt;/td&gt;\n                        &lt;td&gt;&lt;a href=\"mailto:{{user.email}}\"&gt;{{user.email}}&lt;/a&gt;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;td&gt;&lt;strong&gt;Department:&lt;/strong&gt;&lt;/td&gt;\n                        &lt;td&gt;{{user.department}}&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;td&gt;&lt;strong&gt;Phone:&lt;/strong&gt;&lt;/td&gt;\n                        &lt;td&gt;{{user.phone}}&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;td&gt;&lt;strong&gt;Location:&lt;/strong&gt;&lt;/td&gt;\n                        &lt;td&gt;{{user.location}}&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;td&gt;&lt;strong&gt;Joined:&lt;/strong&gt;&lt;/td&gt;\n                        &lt;td&gt;{{user.created_at}}&lt;/td&gt;\n                    &lt;/tr&gt;\n                &lt;/table&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"modal-footer\"&gt;\n        &lt;button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"&gt;Close&lt;/button&gt;\n        &lt;a href=\"mailto:{{user.email}}\" class=\"btn btn-primary\"&gt;\n            &lt;i class=\"bi bi-envelope\"&gt;&lt;/i&gt; Send Email\n        &lt;/a&gt;\n    &lt;/div&gt;\n{{/if}}\n</code></pre> <pre><code>CREATE TABLE user (\n    id int NOT NULL AUTO_INCREMENT,\n    name varchar(100) NOT NULL,\n    email varchar(150) NOT NULL,\n    department varchar(50),\n    phone varchar(20),\n    location varchar(100),\n    avatar varchar(255),\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_name (name),\n    KEY idx_email (email),\n    KEY idx_department (department),\n    FULLTEXT KEY idx_search (name, email)\n);\n\nINSERT INTO user (name, email, department, phone, location, avatar) VALUES\n('Alice Johnson', 'alice.johnson@company.com', 'Engineering', '+1-555-0101', 'San Francisco, CA', 'https://i.pravatar.cc/150?img=1'),\n('Bob Smith', 'bob.smith@company.com', 'Marketing', '+1-555-0102', 'New York, NY', 'https://i.pravatar.cc/150?img=2'),\n('Carol Davis', 'carol.davis@company.com', 'Design', '+1-555-0103', 'Los Angeles, CA', 'https://i.pravatar.cc/150?img=3'),\n('David Wilson', 'david.wilson@company.com', 'Engineering', '+1-555-0104', 'Seattle, WA', 'https://i.pravatar.cc/150?img=4'),\n('Emma Brown', 'emma.brown@company.com', 'Product', '+1-555-0105', 'Austin, TX', 'https://i.pravatar.cc/150?img=5'),\n('Frank Miller', 'frank.miller@company.com', 'Sales', '+1-555-0106', 'Chicago, IL', 'https://i.pravatar.cc/150?img=6'),\n('Grace Lee', 'grace.lee@company.com', 'Engineering', '+1-555-0107', 'Boston, MA', 'https://i.pravatar.cc/150?img=7'),\n('Henry Taylor', 'henry.taylor@company.com', 'HR', '+1-555-0108', 'Denver, CO', 'https://i.pravatar.cc/150?img=8'),\n('Iris Chen', 'iris.chen@company.com', 'Design', '+1-555-0109', 'Portland, OR', 'https://i.pravatar.cc/150?img=9'),\n('Jack Anderson', 'jack.anderson@company.com', 'Marketing', '+1-555-0110', 'Miami, FL', 'https://i.pravatar.cc/150?img=10');\n</code></pre>"},{"location":"code-libraries/htmx.html#live-search-features","title":"Live Search Features","text":"<ul> <li>Real-time Search: Results update as you type with debouncing</li> <li>Loading Indicators: Visual feedback during search requests</li> <li>Modal Details: Click users to view details in a modal</li> <li>Smooth Animations: CSS transitions for better UX</li> <li>Auto-focus: Search input is automatically focused</li> </ul> <p>HTMX Key Benefits</p> <p>No JavaScript Framework: HTMX works with HTML attributes Partial Updates: Only update what changes, not the whole page Progressive Enhancement: Works even if JavaScript is disabled Server-Side Rendering: Keep your logic in familiar S\u00d8AD transactions Easy Integration: Add dynamic behavior to existing HTML forms</p>"},{"location":"code-libraries/json-api.html","title":"JSON API","text":"<p>S\u00d8AD provides excellent support for building RESTful JSON APIs through its flexible transaction system and built-in JSON rendering utilities. This recipe demonstrates how to create modern, standards-compliant APIs with proper error handling, authentication, pagination, and CORS support.</p>"},{"location":"code-libraries/json-api.html#basic-restful-api","title":"Basic RESTful API","text":"TransactionSQLTest ClientOutput product_api.py<pre><code>from utils import render, Log\nfrom models import Product\nimport json\n\nclass Product_api(object):\n    def list(self, ctx):\n        \"\"\"GET /api/products - List all products\"\"\"\n        try:\n            request = ctx.getRequest()\n\n            # Parse query parameters\n            page = int(request.getParameter(\"page\") or \"1\")\n            limit = int(request.getParameter(\"limit\") or \"10\")\n            category = request.getParameter(\"category\")\n            search = request.getParameter(\"search\")\n\n            # Validate pagination parameters\n            if page &lt; 1: page = 1\n            if limit &lt; 1 or limit &gt; 100: limit = 10\n\n            # Build query\n            query = \"1=1\"\n            params = []\n\n            if category:\n                query += \" AND category = ?\"\n                params.append(category)\n\n            if search:\n                query += \" AND (name LIKE ? OR description LIKE ?)\"\n                params.extend([\"%%%s%%\" % search, \"%%%s%%\" % search])\n\n            # Get total count for pagination\n            total_count = Product.count(query, *params)\n\n            # Calculate pagination\n            offset = (page - 1) * limit\n            total_pages = (total_count + limit - 1) // limit\n\n            # Fetch products\n            products = Product.where(query, *params).offset(offset).limit(limit).orderBy(\"created_at DESC\")\n\n            # Format response\n            product_list = []\n            for product in products:\n                product_list.append({\n                    \"id\": product.get(\"id\"),\n                    \"name\": product.get(\"name\"),\n                    \"description\": product.get(\"description\"),\n                    \"price\": float(product.get(\"price\") or 0),\n                    \"category\": product.get(\"category\"),\n                    \"stock_quantity\": product.get(\"stock_quantity\"),\n                    \"is_active\": product.getBoolean(\"is_active\"),\n                    \"created_at\": str(product.get(\"created_at\")),\n                    \"updated_at\": str(product.get(\"updated_at\"))\n                })\n\n            response = {\n                \"success\": True,\n                \"data\": product_list,\n                \"pagination\": {\n                    \"page\": page,\n                    \"limit\": limit,\n                    \"total_count\": total_count,\n                    \"total_pages\": total_pages,\n                    \"has_next\": page &lt; total_pages,\n                    \"has_prev\": page &gt; 1\n                }\n            }\n\n            ctx.go_to = render.as_json(ctx, response)\n\n        except Exception as e:\n            Log.error(ctx, \"Error in product list API: %s\" % str(e))\n            self._error_response(ctx, \"Internal server error\", 500)\n\n    def get(self, ctx):\n        \"\"\"GET /api/products/{id} - Get single product\"\"\"\n        try:\n            request = ctx.getRequest()\n            product_id = request.getParameter(\"id\")\n\n            if not product_id:\n                return self._error_response(ctx, \"Product ID is required\", 400)\n\n            product = Product.findById(product_id)\n\n            if not product:\n                return self._error_response(ctx, \"Product not found\", 404)\n\n            response = {\n                \"success\": True,\n                \"data\": {\n                    \"id\": product.get(\"id\"),\n                    \"name\": product.get(\"name\"),\n                    \"description\": product.get(\"description\"),\n                    \"price\": float(product.get(\"price\") or 0),\n                    \"category\": product.get(\"category\"),\n                    \"stock_quantity\": product.get(\"stock_quantity\"),\n                    \"is_active\": product.getBoolean(\"is_active\"),\n                    \"created_at\": str(product.get(\"created_at\")),\n                    \"updated_at\": str(product.get(\"updated_at\"))\n                }\n            }\n\n            ctx.go_to = render.as_json(ctx, response)\n\n        except Exception as e:\n            Log.error(ctx, \"Error in product get API: %s\" % str(e))\n            self._error_response(ctx, \"Internal server error\", 500)\n\n    def create(self, ctx):\n        \"\"\"POST /api/products - Create new product\"\"\"\n        try:\n            request = ctx.getRequest()\n\n            # Extract and validate required fields\n            name = request.getParameter(\"name\")\n            price = request.getParameter(\"price\")\n            category = request.getParameter(\"category\")\n\n            if not name or len(name.strip()) &lt; 2:\n                return self._error_response(ctx, \"Product name is required (min 2 characters)\", 400)\n\n            if not price:\n                return self._error_response(ctx, \"Price is required\", 400)\n\n            try:\n                price_float = float(price)\n                if price_float &lt; 0:\n                    return self._error_response(ctx, \"Price must be positive\", 400)\n            except ValueError:\n                return self._error_response(ctx, \"Invalid price format\", 400)\n\n            if not category:\n                return self._error_response(ctx, \"Category is required\", 400)\n\n            # Create product\n            product = Product()\n            product.set(\"name\", name.strip())\n            product.set(\"description\", request.getParameter(\"description\") or \"\")\n            product.set(\"price\", price_float)\n            product.set(\"category\", category)\n            product.set(\"stock_quantity\", int(request.getParameter(\"stock_quantity\") or \"0\"))\n            product.set(\"is_active\", request.getParameter(\"is_active\") == \"true\")\n            product.save()\n\n            response = {\n                \"success\": True,\n                \"message\": \"Product created successfully\",\n                \"data\": {\n                    \"id\": product.get(\"id\"),\n                    \"name\": product.get(\"name\"),\n                    \"description\": product.get(\"description\"),\n                    \"price\": float(product.get(\"price\")),\n                    \"category\": product.get(\"category\"),\n                    \"stock_quantity\": product.get(\"stock_quantity\"),\n                    \"is_active\": product.getBoolean(\"is_active\"),\n                    \"created_at\": str(product.get(\"created_at\"))\n                }\n            }\n\n            ctx.getResponse().setStatus(201)  # Created\n            ctx.go_to = render.as_json(ctx, response)\n\n        except Exception as e:\n            Log.error(ctx, \"Error in product create API: %s\" % str(e))\n            self._error_response(ctx, \"Internal server error\", 500)\n\n    def update(self, ctx):\n        \"\"\"PUT /api/products/{id} - Update product\"\"\"\n        try:\n            request = ctx.getRequest()\n            product_id = request.getParameter(\"id\")\n\n            if not product_id:\n                return self._error_response(ctx, \"Product ID is required\", 400)\n\n            product = Product.findById(product_id)\n            if not product:\n                return self._error_response(ctx, \"Product not found\", 404)\n\n            # Update fields if provided\n            name = request.getParameter(\"name\")\n            if name:\n                if len(name.strip()) &lt; 2:\n                    return self._error_response(ctx, \"Product name must be at least 2 characters\", 400)\n                product.set(\"name\", name.strip())\n\n            price = request.getParameter(\"price\")\n            if price:\n                try:\n                    price_float = float(price)\n                    if price_float &lt; 0:\n                        return self._error_response(ctx, \"Price must be positive\", 400)\n                    product.set(\"price\", price_float)\n                except ValueError:\n                    return self._error_response(ctx, \"Invalid price format\", 400)\n\n            description = request.getParameter(\"description\")\n            if description is not None:\n                product.set(\"description\", description)\n\n            category = request.getParameter(\"category\")\n            if category:\n                product.set(\"category\", category)\n\n            stock_quantity = request.getParameter(\"stock_quantity\")\n            if stock_quantity is not None:\n                try:\n                    product.set(\"stock_quantity\", int(stock_quantity))\n                except ValueError:\n                    return self._error_response(ctx, \"Invalid stock quantity\", 400)\n\n            is_active = request.getParameter(\"is_active\")\n            if is_active is not None:\n                product.set(\"is_active\", is_active == \"true\")\n\n            product.save()\n\n            response = {\n                \"success\": True,\n                \"message\": \"Product updated successfully\",\n                \"data\": {\n                    \"id\": product.get(\"id\"),\n                    \"name\": product.get(\"name\"),\n                    \"description\": product.get(\"description\"),\n                    \"price\": float(product.get(\"price\")),\n                    \"category\": product.get(\"category\"),\n                    \"stock_quantity\": product.get(\"stock_quantity\"),\n                    \"is_active\": product.getBoolean(\"is_active\"),\n                    \"updated_at\": str(product.get(\"updated_at\"))\n                }\n            }\n\n            ctx.go_to = render.as_json(ctx, response)\n\n        except Exception as e:\n            Log.error(ctx, \"Error in product update API: %s\" % str(e))\n            self._error_response(ctx, \"Internal server error\", 500)\n\n    def delete(self, ctx):\n        \"\"\"DELETE /api/products/{id} - Delete product\"\"\"\n        try:\n            request = ctx.getRequest()\n            product_id = request.getParameter(\"id\")\n\n            if not product_id:\n                return self._error_response(ctx, \"Product ID is required\", 400)\n\n            product = Product.findById(product_id)\n            if not product:\n                return self._error_response(ctx, \"Product not found\", 404)\n\n            product.delete()\n\n            response = {\n                \"success\": True,\n                \"message\": \"Product deleted successfully\"\n            }\n\n            ctx.go_to = render.as_json(ctx, response)\n\n        except Exception as e:\n            Log.error(ctx, \"Error in product delete API: %s\" % str(e))\n            self._error_response(ctx, \"Internal server error\", 500)\n\n    def _error_response(self, ctx, message, status_code=400):\n        \"\"\"Helper method to generate error responses\"\"\"\n        response = {\n            \"success\": False,\n            \"error\": {\n                \"message\": message,\n                \"code\": status_code\n            }\n        }\n        ctx.getResponse().setStatus(status_code)\n        ctx.go_to = render.as_json(ctx, response)\n</code></pre> <pre><code>CREATE TABLE product (\n    id int NOT NULL AUTO_INCREMENT,\n    name varchar(200) NOT NULL,\n    description text,\n    price decimal(10,2) NOT NULL,\n    category varchar(50) NOT NULL,\n    stock_quantity int DEFAULT 0,\n    is_active boolean DEFAULT true,\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_category (category),\n    KEY idx_active (is_active),\n    KEY idx_name (name),\n    FULLTEXT KEY idx_search (name, description)\n);\n\nINSERT INTO product (name, description, price, category, stock_quantity, is_active) VALUES\n('Laptop Pro 16\"', 'High-performance laptop with M2 chip, 16GB RAM, 512GB SSD', 2499.99, 'Electronics', 25, true),\n('Wireless Headphones', 'Premium noise-canceling wireless headphones with 30-hour battery', 299.99, 'Electronics', 50, true),\n('Standing Desk', 'Adjustable height standing desk with memory presets', 599.99, 'Furniture', 15, true),\n('Coffee Maker', 'Programmable drip coffee maker with thermal carafe', 89.99, 'Appliances', 30, true),\n('Running Shoes', 'Lightweight running shoes with advanced cushioning technology', 129.99, 'Sports', 100, true),\n('Smartphone Case', 'Protective case with wireless charging support', 39.99, 'Electronics', 200, true),\n('Office Chair', 'Ergonomic office chair with lumbar support and armrests', 399.99, 'Furniture', 20, true),\n('Bluetooth Speaker', 'Portable waterproof speaker with 12-hour battery life', 79.99, 'Electronics', 75, true),\n('Yoga Mat', 'Non-slip eco-friendly yoga mat with carrying strap', 49.99, 'Sports', 60, true),\n('Smart Watch', 'Fitness tracking smartwatch with heart rate monitor', 249.99, 'Electronics', 40, true);\n</code></pre> api_test.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Product API Test Client&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        .json-response { \n            background: #f8f9fa; \n            border-left: 4px solid #007bff; \n            font-family: monospace; \n            white-space: pre-wrap; \n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;h2&gt;Product API Test Client&lt;/h2&gt;\n\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-md-6\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header\"&gt;\n                        &lt;h5&gt;API Operations&lt;/h5&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;!-- List Products --&gt;\n                        &lt;div class=\"mb-3\"&gt;\n                            &lt;h6&gt;List Products&lt;/h6&gt;\n                            &lt;div class=\"row g-2 mb-2\"&gt;\n                                &lt;div class=\"col-4\"&gt;\n                                    &lt;input type=\"number\" class=\"form-control form-control-sm\" id=\"listPage\" placeholder=\"Page\" value=\"1\"&gt;\n                                &lt;/div&gt;\n                                &lt;div class=\"col-4\"&gt;\n                                    &lt;input type=\"number\" class=\"form-control form-control-sm\" id=\"listLimit\" placeholder=\"Limit\" value=\"5\"&gt;\n                                &lt;/div&gt;\n                                &lt;div class=\"col-4\"&gt;\n                                    &lt;input type=\"text\" class=\"form-control form-control-sm\" id=\"listCategory\" placeholder=\"Category\"&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;input type=\"text\" class=\"form-control form-control-sm mb-2\" id=\"listSearch\" placeholder=\"Search products...\"&gt;\n                            &lt;button class=\"btn btn-primary btn-sm\" onclick=\"listProducts()\"&gt;GET /api/products&lt;/button&gt;\n                        &lt;/div&gt;\n\n                        &lt;hr&gt;\n\n                        &lt;!-- Get Product --&gt;\n                        &lt;div class=\"mb-3\"&gt;\n                            &lt;h6&gt;Get Product by ID&lt;/h6&gt;\n                            &lt;div class=\"input-group input-group-sm mb-2\"&gt;\n                                &lt;input type=\"number\" class=\"form-control\" id=\"getProductId\" placeholder=\"Product ID\"&gt;\n                                &lt;button class=\"btn btn-info\" onclick=\"getProduct()\"&gt;GET /api/products/{id}&lt;/button&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n\n                        &lt;hr&gt;\n\n                        &lt;!-- Create Product --&gt;\n                        &lt;div class=\"mb-3\"&gt;\n                            &lt;h6&gt;Create Product&lt;/h6&gt;\n                            &lt;input type=\"text\" class=\"form-control form-control-sm mb-1\" id=\"createName\" placeholder=\"Product Name\"&gt;\n                            &lt;input type=\"number\" class=\"form-control form-control-sm mb-1\" id=\"createPrice\" placeholder=\"Price\" step=\"0.01\"&gt;\n                            &lt;input type=\"text\" class=\"form-control form-control-sm mb-1\" id=\"createCategory\" placeholder=\"Category\"&gt;\n                            &lt;textarea class=\"form-control form-control-sm mb-1\" id=\"createDescription\" placeholder=\"Description\" rows=\"2\"&gt;&lt;/textarea&gt;\n                            &lt;input type=\"number\" class=\"form-control form-control-sm mb-1\" id=\"createStock\" placeholder=\"Stock Quantity\"&gt;\n                            &lt;div class=\"form-check form-check-inline mb-2\"&gt;\n                                &lt;input class=\"form-check-input\" type=\"checkbox\" id=\"createActive\" checked&gt;\n                                &lt;label class=\"form-check-label\" for=\"createActive\"&gt;Active&lt;/label&gt;\n                            &lt;/div&gt;\n                            &lt;button class=\"btn btn-success btn-sm\" onclick=\"createProduct()\"&gt;POST /api/products&lt;/button&gt;\n                        &lt;/div&gt;\n\n                        &lt;hr&gt;\n\n                        &lt;!-- Update Product --&gt;\n                        &lt;div class=\"mb-3\"&gt;\n                            &lt;h6&gt;Update Product&lt;/h6&gt;\n                            &lt;input type=\"number\" class=\"form-control form-control-sm mb-1\" id=\"updateId\" placeholder=\"Product ID\"&gt;\n                            &lt;input type=\"text\" class=\"form-control form-control-sm mb-1\" id=\"updateName\" placeholder=\"New Name (optional)\"&gt;\n                            &lt;input type=\"number\" class=\"form-control form-control-sm mb-1\" id=\"updatePrice\" placeholder=\"New Price (optional)\" step=\"0.01\"&gt;\n                            &lt;button class=\"btn btn-warning btn-sm\" onclick=\"updateProduct()\"&gt;PUT /api/products/{id}&lt;/button&gt;\n                        &lt;/div&gt;\n\n                        &lt;hr&gt;\n\n                        &lt;!-- Delete Product --&gt;\n                        &lt;div class=\"mb-3\"&gt;\n                            &lt;h6&gt;Delete Product&lt;/h6&gt;\n                            &lt;div class=\"input-group input-group-sm\"&gt;\n                                &lt;input type=\"number\" class=\"form-control\" id=\"deleteId\" placeholder=\"Product ID\"&gt;\n                                &lt;button class=\"btn btn-danger\" onclick=\"deleteProduct()\"&gt;DELETE /api/products/{id}&lt;/button&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col-md-6\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header d-flex justify-content-between align-items-center\"&gt;\n                        &lt;h5&gt;API Response&lt;/h5&gt;\n                        &lt;button class=\"btn btn-sm btn-outline-secondary\" onclick=\"clearResponse()\"&gt;Clear&lt;/button&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;div id=\"responseContainer\" class=\"json-response p-3\"&gt;Make an API call to see the response...&lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        const API_BASE = '/t/example/product_api';\n\n        function showResponse(data, status = 200) {\n            const container = document.getElementById('responseContainer');\n            const statusClass = status &gt;= 200 &amp;&amp; status &lt; 300 ? 'border-success' : 'border-danger';\n            container.className = `json-response p-3 border ${statusClass}`;\n            container.textContent = JSON.stringify(data, null, 2);\n        }\n\n        function showError(message) {\n            showResponse({ error: message }, 500);\n        }\n\n        async function listProducts() {\n            try {\n                const params = new URLSearchParams();\n                const page = document.getElementById('listPage').value;\n                const limit = document.getElementById('listLimit').value;\n                const category = document.getElementById('listCategory').value;\n                const search = document.getElementById('listSearch').value;\n\n                if (page) params.append('page', page);\n                if (limit) params.append('limit', limit);\n                if (category) params.append('category', category);\n                if (search) params.append('search', search);\n\n                const response = await fetch(`${API_BASE}/list?${params}`);\n                const data = await response.json();\n                showResponse(data, response.status);\n            } catch (error) {\n                showError(error.message);\n            }\n        }\n\n        async function getProduct() {\n            try {\n                const id = document.getElementById('getProductId').value;\n                if (!id) {\n                    showError('Product ID is required');\n                    return;\n                }\n\n                const response = await fetch(`${API_BASE}/get?id=${id}`);\n                const data = await response.json();\n                showResponse(data, response.status);\n            } catch (error) {\n                showError(error.message);\n            }\n        }\n\n        async function createProduct() {\n            try {\n                const formData = new FormData();\n                formData.append('name', document.getElementById('createName').value);\n                formData.append('price', document.getElementById('createPrice').value);\n                formData.append('category', document.getElementById('createCategory').value);\n                formData.append('description', document.getElementById('createDescription').value);\n                formData.append('stock_quantity', document.getElementById('createStock').value || '0');\n                formData.append('is_active', document.getElementById('createActive').checked ? 'true' : 'false');\n\n                const response = await fetch(`${API_BASE}/create`, {\n                    method: 'POST',\n                    body: formData\n                });\n\n                const data = await response.json();\n                showResponse(data, response.status);\n\n                // Clear form on success\n                if (data.success) {\n                    document.getElementById('createName').value = '';\n                    document.getElementById('createPrice').value = '';\n                    document.getElementById('createCategory').value = '';\n                    document.getElementById('createDescription').value = '';\n                    document.getElementById('createStock').value = '';\n                }\n            } catch (error) {\n                showError(error.message);\n            }\n        }\n\n        async function updateProduct() {\n            try {\n                const id = document.getElementById('updateId').value;\n                if (!id) {\n                    showError('Product ID is required');\n                    return;\n                }\n\n                const formData = new FormData();\n                formData.append('id', id);\n\n                const name = document.getElementById('updateName').value;\n                const price = document.getElementById('updatePrice').value;\n\n                if (name) formData.append('name', name);\n                if (price) formData.append('price', price);\n\n                const response = await fetch(`${API_BASE}/update`, {\n                    method: 'POST',\n                    body: formData\n                });\n\n                const data = await response.json();\n                showResponse(data, response.status);\n            } catch (error) {\n                showError(error.message);\n            }\n        }\n\n        async function deleteProduct() {\n            try {\n                const id = document.getElementById('deleteId').value;\n                if (!id) {\n                    showError('Product ID is required');\n                    return;\n                }\n\n                if (!confirm('Are you sure you want to delete this product?')) {\n                    return;\n                }\n\n                const response = await fetch(`${API_BASE}/delete`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    body: `id=${id}`\n                });\n\n                const data = await response.json();\n                showResponse(data, response.status);\n            } catch (error) {\n                showError(error.message);\n            }\n        }\n\n        function clearResponse() {\n            const container = document.getElementById('responseContainer');\n            container.className = 'json-response p-3';\n            container.textContent = 'Make an API call to see the response...';\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"code-libraries/json-api.html#rest-api-features","title":"REST API Features","text":"<ul> <li>CRUD Operations: Complete Create, Read, Update, Delete functionality</li> <li>Pagination: Efficient pagination with metadata</li> <li>Search &amp; Filtering: Query parameters for searching and filtering</li> <li>Validation: Comprehensive input validation and error handling</li> <li>HTTP Status Codes: Proper status codes (200, 201, 400, 404, 500)</li> </ul>"},{"location":"code-libraries/json-api.html#api-with-authentication","title":"API with Authentication","text":"TransactionSQLTest ClientOutput secure_api.py<pre><code>from utils import render, Log\nfrom models import User, ApiKey\nimport json\nimport hashlib\nimport time\n\nclass Secure_api(object):\n    def authenticate(self, ctx):\n        \"\"\"POST /api/auth - Authenticate and get API key\"\"\"\n        try:\n            request = ctx.getRequest()\n            username = request.getParameter(\"username\")\n            password = request.getParameter(\"password\")\n\n            if not username or not password:\n                return self._error_response(ctx, \"Username and password required\", 401)\n\n            # Find user (in production, use proper password hashing)\n            user = User.findFirst(\"username = ? AND password = ?\", username, password)\n\n            if not user:\n                return self._error_response(ctx, \"Invalid credentials\", 401)\n\n            # Generate API key\n            api_key = self._generate_api_key(user.get(\"id\"))\n\n            # Store API key\n            api_key_record = ApiKey()\n            api_key_record.set(\"user_id\", user.get(\"id\"))\n            api_key_record.set(\"api_key\", api_key)\n            api_key_record.set(\"expires_at\", int(time.time()) + (7 * 24 * 60 * 60))  # 7 days\n            api_key_record.save()\n\n            response = {\n                \"success\": True,\n                \"data\": {\n                    \"api_key\": api_key,\n                    \"user_id\": user.get(\"id\"),\n                    \"username\": user.get(\"username\"),\n                    \"expires_in\": 7 * 24 * 60 * 60  # seconds\n                }\n            }\n\n            ctx.go_to = render.as_json(ctx, response)\n\n        except Exception as e:\n            Log.error(ctx, \"Error in authentication: %s\" % str(e))\n            self._error_response(ctx, \"Authentication failed\", 500)\n\n    def profile(self, ctx):\n        \"\"\"GET /api/profile - Get user profile (requires authentication)\"\"\"\n        user = self._authenticate_request(ctx)\n        if not user:\n            return  # Error already sent\n\n        try:\n            response = {\n                \"success\": True,\n                \"data\": {\n                    \"id\": user.get(\"id\"),\n                    \"username\": user.get(\"username\"),\n                    \"email\": user.get(\"email\"),\n                    \"full_name\": user.get(\"full_name\"),\n                    \"created_at\": str(user.get(\"created_at\"))\n                }\n            }\n\n            ctx.go_to = render.as_json(ctx, response)\n\n        except Exception as e:\n            Log.error(ctx, \"Error in profile API: %s\" % str(e))\n            self._error_response(ctx, \"Internal server error\", 500)\n\n    def update_profile(self, ctx):\n        \"\"\"PUT /api/profile - Update user profile\"\"\"\n        user = self._authenticate_request(ctx)\n        if not user:\n            return\n\n        try:\n            request = ctx.getRequest()\n\n            # Update allowed fields\n            email = request.getParameter(\"email\")\n            full_name = request.getParameter(\"full_name\")\n\n            if email:\n                if \"@\" not in email:\n                    return self._error_response(ctx, \"Invalid email format\", 400)\n                user.set(\"email\", email)\n\n            if full_name:\n                user.set(\"full_name\", full_name)\n\n            user.save()\n\n            response = {\n                \"success\": True,\n                \"message\": \"Profile updated successfully\",\n                \"data\": {\n                    \"id\": user.get(\"id\"),\n                    \"username\": user.get(\"username\"),\n                    \"email\": user.get(\"email\"),\n                    \"full_name\": user.get(\"full_name\"),\n                    \"updated_at\": str(user.get(\"updated_at\"))\n                }\n            }\n\n            ctx.go_to = render.as_json(ctx, response)\n\n        except Exception as e:\n            Log.error(ctx, \"Error in profile update: %s\" % str(e))\n            self._error_response(ctx, \"Internal server error\", 500)\n\n    def logout(self, ctx):\n        \"\"\"POST /api/logout - Invalidate API key\"\"\"\n        try:\n            request = ctx.getRequest()\n            api_key = request.getHeader(\"X-API-Key\") or request.getParameter(\"api_key\")\n\n            if api_key:\n                # Remove API key from database\n                ApiKey.delete(\"api_key = ?\", api_key)\n\n            response = {\n                \"success\": True,\n                \"message\": \"Logged out successfully\"\n            }\n\n            ctx.go_to = render.as_json(ctx, response)\n\n        except Exception as e:\n            Log.error(ctx, \"Error in logout: %s\" % str(e))\n            self._error_response(ctx, \"Internal server error\", 500)\n\n    def _authenticate_request(self, ctx):\n        \"\"\"Authenticate API request using API key\"\"\"\n        try:\n            request = ctx.getRequest()\n            api_key = request.getHeader(\"X-API-Key\") or request.getParameter(\"api_key\")\n\n            if not api_key:\n                self._error_response(ctx, \"API key required\", 401)\n                return None\n\n            # Find valid API key\n            api_key_record = ApiKey.findFirst(\"api_key = ? AND expires_at &gt; ?\", api_key, int(time.time()))\n\n            if not api_key_record:\n                self._error_response(ctx, \"Invalid or expired API key\", 401)\n                return None\n\n            # Get user\n            user = User.findById(api_key_record.get(\"user_id\"))\n\n            if not user:\n                self._error_response(ctx, \"User not found\", 401)\n                return None\n\n            return user\n\n        except Exception as e:\n            Log.error(ctx, \"Authentication error: %s\" % str(e))\n            self._error_response(ctx, \"Authentication failed\", 401)\n            return None\n\n    def _generate_api_key(self, user_id):\n        \"\"\"Generate unique API key\"\"\"\n        data = \"%s:%s:%s\" % (user_id, int(time.time()), \"secret_salt\")\n        return hashlib.sha256(data.encode()).hexdigest()\n\n    def _error_response(self, ctx, message, status_code=400):\n        \"\"\"Send error response\"\"\"\n        response = {\n            \"success\": False,\n            \"error\": {\n                \"message\": message,\n                \"code\": status_code\n            }\n        }\n        ctx.getResponse().setStatus(status_code)\n        ctx.go_to = render.as_json(ctx, response)\n</code></pre> <pre><code>CREATE TABLE user (\n    id int NOT NULL AUTO_INCREMENT,\n    username varchar(50) NOT NULL UNIQUE,\n    password varchar(255) NOT NULL,\n    email varchar(150),\n    full_name varchar(100),\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_username (username)\n);\n\nCREATE TABLE api_key (\n    id int NOT NULL AUTO_INCREMENT,\n    user_id int NOT NULL,\n    api_key varchar(64) NOT NULL UNIQUE,\n    expires_at int NOT NULL,\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_api_key (api_key),\n    KEY idx_user_id (user_id),\n    KEY idx_expires (expires_at),\n    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE\n);\n\nINSERT INTO user (username, password, email, full_name) VALUES\n('admin', 'admin123', 'admin@company.com', 'System Administrator'),\n('john_doe', 'password123', 'john@company.com', 'John Doe'),\n('jane_smith', 'secret456', 'jane@company.com', 'Jane Smith');\n</code></pre> auth_test.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Authenticated API Test&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        .api-key { font-family: monospace; font-size: 0.85em; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;h2&gt;Authenticated API Test&lt;/h2&gt;\n\n        &lt;!-- API Key Display --&gt;\n        &lt;div class=\"alert alert-info\" id=\"apiKeyAlert\" style=\"display: none;\"&gt;\n            &lt;strong&gt;API Key:&lt;/strong&gt; &lt;span id=\"apiKeyDisplay\" class=\"api-key\"&gt;&lt;/span&gt;\n            &lt;button class=\"btn btn-sm btn-outline-secondary ms-2\" onclick=\"clearApiKey()\"&gt;Clear&lt;/button&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-md-6\"&gt;\n                &lt;!-- Login --&gt;\n                &lt;div class=\"card mb-3\"&gt;\n                    &lt;div class=\"card-header\"&gt;&lt;h5&gt;Authentication&lt;/h5&gt;&lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;div class=\"mb-2\"&gt;\n                            &lt;input type=\"text\" class=\"form-control form-control-sm\" id=\"username\" placeholder=\"Username\" value=\"admin\"&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"mb-2\"&gt;\n                            &lt;input type=\"password\" class=\"form-control form-control-sm\" id=\"password\" placeholder=\"Password\" value=\"admin123\"&gt;\n                        &lt;/div&gt;\n                        &lt;button class=\"btn btn-primary btn-sm\" onclick=\"login()\"&gt;Login&lt;/button&gt;\n                        &lt;button class=\"btn btn-secondary btn-sm\" onclick=\"logout()\"&gt;Logout&lt;/button&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                &lt;!-- Profile Operations --&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header\"&gt;&lt;h5&gt;Profile Operations&lt;/h5&gt;&lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;button class=\"btn btn-info btn-sm mb-2\" onclick=\"getProfile()\"&gt;Get Profile&lt;/button&gt;&lt;br&gt;\n\n                        &lt;div class=\"mb-2\"&gt;\n                            &lt;input type=\"email\" class=\"form-control form-control-sm\" id=\"updateEmail\" placeholder=\"New Email\"&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"mb-2\"&gt;\n                            &lt;input type=\"text\" class=\"form-control form-control-sm\" id=\"updateFullName\" placeholder=\"New Full Name\"&gt;\n                        &lt;/div&gt;\n                        &lt;button class=\"btn btn-warning btn-sm\" onclick=\"updateProfile()\"&gt;Update Profile&lt;/button&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col-md-6\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header\"&gt;&lt;h5&gt;Response&lt;/h5&gt;&lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;pre id=\"response\" class=\"bg-light p-3\"&gt;Login to start testing...&lt;/pre&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        let apiKey = localStorage.getItem('apiKey');\n        if (apiKey) {\n            showApiKey(apiKey);\n        }\n\n        function showApiKey(key) {\n            apiKey = key;\n            localStorage.setItem('apiKey', key);\n            document.getElementById('apiKeyDisplay').textContent = key;\n            document.getElementById('apiKeyAlert').style.display = 'block';\n        }\n\n        function clearApiKey() {\n            apiKey = null;\n            localStorage.removeItem('apiKey');\n            document.getElementById('apiKeyAlert').style.display = 'none';\n            showResponse({message: 'API key cleared'});\n        }\n\n        function showResponse(data, status = 200) {\n            document.getElementById('response').textContent = JSON.stringify(data, null, 2);\n        }\n\n        async function login() {\n            try {\n                const username = document.getElementById('username').value;\n                const password = document.getElementById('password').value;\n\n                const formData = new FormData();\n                formData.append('username', username);\n                formData.append('password', password);\n\n                const response = await fetch('/t/example/secure_api/authenticate', {\n                    method: 'POST',\n                    body: formData\n                });\n\n                const data = await response.json();\n                showResponse(data, response.status);\n\n                if (data.success &amp;&amp; data.data.api_key) {\n                    showApiKey(data.data.api_key);\n                }\n            } catch (error) {\n                showResponse({error: error.message});\n            }\n        }\n\n        async function getProfile() {\n            if (!apiKey) {\n                showResponse({error: 'Please login first'});\n                return;\n            }\n\n            try {\n                const response = await fetch('/t/example/secure_api/profile', {\n                    headers: {\n                        'X-API-Key': apiKey\n                    }\n                });\n\n                const data = await response.json();\n                showResponse(data, response.status);\n            } catch (error) {\n                showResponse({error: error.message});\n            }\n        }\n\n        async function updateProfile() {\n            if (!apiKey) {\n                showResponse({error: 'Please login first'});\n                return;\n            }\n\n            try {\n                const formData = new FormData();\n                const email = document.getElementById('updateEmail').value;\n                const fullName = document.getElementById('updateFullName').value;\n\n                if (email) formData.append('email', email);\n                if (fullName) formData.append('full_name', fullName);\n\n                const response = await fetch('/t/example/secure_api/update_profile', {\n                    method: 'POST',\n                    headers: {\n                        'X-API-Key': apiKey\n                    },\n                    body: formData\n                });\n\n                const data = await response.json();\n                showResponse(data, response.status);\n            } catch (error) {\n                showResponse({error: error.message});\n            }\n        }\n\n        async function logout() {\n            if (!apiKey) {\n                showResponse({message: 'Not logged in'});\n                return;\n            }\n\n            try {\n                const response = await fetch('/t/example/secure_api/logout', {\n                    method: 'POST',\n                    headers: {\n                        'X-API-Key': apiKey\n                    }\n                });\n\n                const data = await response.json();\n                showResponse(data, response.status);\n\n                if (data.success) {\n                    clearApiKey();\n                }\n            } catch (error) {\n                showResponse({error: error.message});\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"code-libraries/json-api.html#authentication-features","title":"Authentication Features","text":"<ul> <li>API Key Authentication: Secure token-based authentication</li> <li>Session Management: API key generation and expiration</li> <li>Protected Endpoints: Authentication required for sensitive operations</li> <li>User Management: Profile updates and logout functionality</li> </ul>"},{"location":"code-libraries/json-api.html#api-with-cors-and-error-handling","title":"API with CORS and Error Handling","text":"TransactionSQLOutput cors_api.py<pre><code>from utils import render, Log\nfrom models import Article\nimport json\n\nclass Cors_api(object):\n    def __init__(self):\n        # CORS configuration\n        self.ALLOWED_ORIGINS = [\n            \"http://localhost:3000\",\n            \"http://localhost:8080\",\n            \"https://myapp.com\"\n        ]\n        self.ALLOWED_METHODS = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"]\n        self.ALLOWED_HEADERS = [\"Content-Type\", \"Authorization\", \"X-API-Key\"]\n\n    def options(self, ctx):\n        \"\"\"Handle CORS preflight requests\"\"\"\n        self._set_cors_headers(ctx)\n        ctx.getResponse().setStatus(200)\n        ctx.go_to = render.as_json(ctx, {\"status\": \"ok\"})\n\n    def list(self, ctx):\n        \"\"\"GET /api/articles - List articles with CORS support\"\"\"\n        self._set_cors_headers(ctx)\n\n        try:\n            request = ctx.getRequest()\n\n            # Pagination\n            page = int(request.getParameter(\"page\") or \"1\")\n            limit = min(int(request.getParameter(\"limit\") or \"10\"), 50)  # Max 50 items\n            offset = (page - 1) * limit\n\n            # Filters\n            status = request.getParameter(\"status\") or \"published\"\n            category = request.getParameter(\"category\")\n\n            # Build query\n            query_conditions = [\"status = ?\"]\n            query_params = [status]\n\n            if category:\n                query_conditions.append(\"category = ?\")\n                query_params.append(category)\n\n            query = \" AND \".join(query_conditions)\n\n            # Get articles\n            articles = Article.where(query, *query_params).offset(offset).limit(limit).orderBy(\"created_at DESC\")\n            total_count = Article.count(query, *query_params)\n\n            # Format response\n            article_list = []\n            for article in articles:\n                article_list.append({\n                    \"id\": article.get(\"id\"),\n                    \"title\": article.get(\"title\"),\n                    \"slug\": article.get(\"slug\"),\n                    \"excerpt\": article.get(\"excerpt\"),\n                    \"category\": article.get(\"category\"),\n                    \"author\": article.get(\"author\"),\n                    \"status\": article.get(\"status\"),\n                    \"published_at\": str(article.get(\"published_at\")),\n                    \"created_at\": str(article.get(\"created_at\"))\n                })\n\n            response = {\n                \"success\": True,\n                \"data\": article_list,\n                \"meta\": {\n                    \"page\": page,\n                    \"limit\": limit,\n                    \"total\": total_count,\n                    \"pages\": (total_count + limit - 1) // limit\n                }\n            }\n\n            ctx.go_to = render.as_json(ctx, response)\n\n        except ValueError as e:\n            self._validation_error(ctx, \"Invalid parameter format: %s\" % str(e))\n        except Exception as e:\n            Log.error(ctx, \"Error in articles list: %s\" % str(e))\n            self._server_error(ctx, \"Failed to fetch articles\")\n\n    def get(self, ctx):\n        \"\"\"GET /api/articles/{id} - Get single article\"\"\"\n        self._set_cors_headers(ctx)\n\n        try:\n            request = ctx.getRequest()\n            article_id = request.getParameter(\"id\")\n\n            if not article_id:\n                return self._validation_error(ctx, \"Article ID is required\")\n\n            article = Article.findById(article_id)\n\n            if not article:\n                return self._not_found_error(ctx, \"Article not found\")\n\n            response = {\n                \"success\": True,\n                \"data\": {\n                    \"id\": article.get(\"id\"),\n                    \"title\": article.get(\"title\"),\n                    \"slug\": article.get(\"slug\"),\n                    \"content\": article.get(\"content\"),\n                    \"excerpt\": article.get(\"excerpt\"),\n                    \"category\": article.get(\"category\"),\n                    \"author\": article.get(\"author\"),\n                    \"status\": article.get(\"status\"),\n                    \"published_at\": str(article.get(\"published_at\")),\n                    \"created_at\": str(article.get(\"created_at\")),\n                    \"updated_at\": str(article.get(\"updated_at\"))\n                }\n            }\n\n            ctx.go_to = render.as_json(ctx, response)\n\n        except Exception as e:\n            Log.error(ctx, \"Error in article get: %s\" % str(e))\n            self._server_error(ctx, \"Failed to fetch article\")\n\n    def create(self, ctx):\n        \"\"\"POST /api/articles - Create new article\"\"\"\n        self._set_cors_headers(ctx)\n\n        try:\n            request = ctx.getRequest()\n\n            # Validate required fields\n            title = request.getParameter(\"title\")\n            content = request.getParameter(\"content\")\n            author = request.getParameter(\"author\")\n\n            validation_errors = []\n\n            if not title or len(title.strip()) &lt; 3:\n                validation_errors.append(\"Title must be at least 3 characters long\")\n\n            if not content or len(content.strip()) &lt; 10:\n                validation_errors.append(\"Content must be at least 10 characters long\")\n\n            if not author or len(author.strip()) &lt; 2:\n                validation_errors.append(\"Author must be at least 2 characters long\")\n\n            if validation_errors:\n                return self._validation_error(ctx, validation_errors)\n\n            # Generate slug from title\n            slug = self._generate_slug(title)\n\n            # Check for duplicate slug\n            existing = Article.count(\"slug = ?\", slug)\n            if existing &gt; 0:\n                slug = \"%s-%s\" % (slug, int(time.time()))\n\n            # Create article\n            article = Article()\n            article.set(\"title\", title.strip())\n            article.set(\"slug\", slug)\n            article.set(\"content\", content.strip())\n            article.set(\"excerpt\", request.getParameter(\"excerpt\") or content.strip()[:200])\n            article.set(\"category\", request.getParameter(\"category\") or \"General\")\n            article.set(\"author\", author.strip())\n            article.set(\"status\", request.getParameter(\"status\") or \"draft\")\n            article.save()\n\n            response = {\n                \"success\": True,\n                \"message\": \"Article created successfully\",\n                \"data\": {\n                    \"id\": article.get(\"id\"),\n                    \"title\": article.get(\"title\"),\n                    \"slug\": article.get(\"slug\"),\n                    \"status\": article.get(\"status\"),\n                    \"created_at\": str(article.get(\"created_at\"))\n                }\n            }\n\n            ctx.getResponse().setStatus(201)\n            ctx.go_to = render.as_json(ctx, response)\n\n        except Exception as e:\n            Log.error(ctx, \"Error creating article: %s\" % str(e))\n            self._server_error(ctx, \"Failed to create article\")\n\n    def _set_cors_headers(self, ctx):\n        \"\"\"Set CORS headers for cross-origin requests\"\"\"\n        request = ctx.getRequest()\n        response = ctx.getResponse()\n\n        origin = request.getHeader(\"Origin\")\n\n        # Check if origin is allowed\n        if origin in self.ALLOWED_ORIGINS or \"*\" in self.ALLOWED_ORIGINS:\n            response.setHeader(\"Access-Control-Allow-Origin\", origin)\n\n        response.setHeader(\"Access-Control-Allow-Methods\", \", \".join(self.ALLOWED_METHODS))\n        response.setHeader(\"Access-Control-Allow-Headers\", \", \".join(self.ALLOWED_HEADERS))\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\")\n        response.setHeader(\"Access-Control-Allow-Credentials\", \"true\")\n\n    def _generate_slug(self, title):\n        \"\"\"Generate URL-friendly slug from title\"\"\"\n        import re\n        slug = title.lower()\n        slug = re.sub(r'[^a-z0-9\\s-]', '', slug)\n        slug = re.sub(r'[\\s-]+', '-', slug)\n        return slug.strip('-')\n\n    def _validation_error(self, ctx, errors):\n        \"\"\"Return validation error response\"\"\"\n        if isinstance(errors, str):\n            errors = [errors]\n\n        response = {\n            \"success\": False,\n            \"error\": {\n                \"type\": \"validation_error\",\n                \"message\": \"Validation failed\",\n                \"details\": errors\n            }\n        }\n        ctx.getResponse().setStatus(400)\n        ctx.go_to = render.as_json(ctx, response)\n\n    def _not_found_error(self, ctx, message=\"Resource not found\"):\n        \"\"\"Return 404 error response\"\"\"\n        response = {\n            \"success\": False,\n            \"error\": {\n                \"type\": \"not_found\",\n                \"message\": message\n            }\n        }\n        ctx.getResponse().setStatus(404)\n        ctx.go_to = render.as_json(ctx, response)\n\n    def _server_error(self, ctx, message=\"Internal server error\"):\n        \"\"\"Return 500 error response\"\"\"\n        response = {\n            \"success\": False,\n            \"error\": {\n                \"type\": \"server_error\",\n                \"message\": message\n            }\n        }\n        ctx.getResponse().setStatus(500)\n        ctx.go_to = render.as_json(ctx, response)\n</code></pre> <pre><code>CREATE TABLE article (\n    id int NOT NULL AUTO_INCREMENT,\n    title varchar(200) NOT NULL,\n    slug varchar(250) NOT NULL UNIQUE,\n    content longtext NOT NULL,\n    excerpt text,\n    category varchar(50) DEFAULT 'General',\n    author varchar(100) NOT NULL,\n    status enum('draft','published','archived') DEFAULT 'draft',\n    published_at timestamp NULL,\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_slug (slug),\n    KEY idx_status (status),\n    KEY idx_category (category),\n    KEY idx_author (author)\n);\n\nINSERT INTO article (title, slug, content, excerpt, category, author, status, published_at) VALUES\n('Getting Started with S\u00d8AD', 'getting-started-with-soad', 'This comprehensive guide will walk you through the basics of S\u00d8AD framework...', 'Learn the fundamentals of S\u00d8AD framework development', 'Tutorial', 'John Developer', 'published', NOW()),\n('Advanced Database Queries', 'advanced-database-queries', 'Explore advanced ActiveJDBC patterns and database optimization techniques...', 'Master database operations in S\u00d8AD', 'Advanced', 'Jane Expert', 'published', NOW()),\n('Building REST APIs', 'building-rest-apis', 'Complete guide to creating robust REST APIs using S\u00d8AD framework...', 'Create professional APIs with S\u00d8AD', 'API', 'Mike Architect', 'published', NOW()),\n('Frontend Integration', 'frontend-integration', 'Learn how to integrate modern frontend frameworks with S\u00d8AD backend...', 'Connect your frontend with S\u00d8AD', 'Frontend', 'Sarah Designer', 'draft', NULL),\n('Deployment Strategies', 'deployment-strategies', 'Best practices for deploying S\u00d8AD applications in production...', 'Deploy S\u00d8AD apps like a pro', 'DevOps', 'Tom Ops', 'published', NOW());\n</code></pre>"},{"location":"code-libraries/json-api.html#advanced-features","title":"Advanced Features","text":"<ul> <li>CORS Support: Cross-origin resource sharing for web applications</li> <li>Error Classification: Structured error responses with types and details</li> <li>Input Validation: Comprehensive validation with detailed error messages</li> <li>Slug Generation: SEO-friendly URL generation from titles</li> <li>Status Codes: Proper HTTP status codes for different scenarios</li> </ul> <p>Do you know?</p> <ul> <li>CORS headers enable your API to be consumed by web applications from different domains</li> <li>Structured errors make it easier for frontend developers to handle different error scenarios</li> <li>Slug generation creates SEO-friendly URLs for content-based applications</li> <li>Pagination metadata helps frontend applications build proper navigation controls</li> </ul>"},{"location":"code-libraries/listing.html","title":"Listing","text":"<p>One of the most common tasks in web development is displaying data from your database. S\u00d8AD makes this simple with ActiveJDBC models and Handlebars templates. This beginner-friendly recipe shows you how to fetch and display data in various ways.</p>"},{"location":"code-libraries/listing.html#simple-data-listing","title":"Simple Data Listing","text":"TransactionViewSQLOutput book_list.py<pre><code>from utils import render\nfrom models import Book\n\nclass Book_list(object):\n    def view(self, ctx):\n        # Get all books from database\n        books = Book.findAll()\n\n        # Pass books to the template\n        ctx.output[\"books\"] = books\n\n        # Render the view\n        ctx.go_to = render.as_view(ctx, \"book_list\")\n</code></pre> book_list.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Book List&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;h1&gt;My Book Collection&lt;/h1&gt;\n\n        {{#if books}}\n            &lt;div class=\"row\"&gt;\n                {{#each books}}\n                &lt;div class=\"col-md-4 mb-3\"&gt;\n                    &lt;div class=\"card\"&gt;\n                        &lt;div class=\"card-body\"&gt;\n                            &lt;h5 class=\"card-title\"&gt;{{title}}&lt;/h5&gt;\n                            &lt;p class=\"card-text\"&gt;\n                                &lt;strong&gt;Author:&lt;/strong&gt; {{author}}&lt;br&gt;\n                                &lt;strong&gt;Genre:&lt;/strong&gt; {{genre}}&lt;br&gt;\n                                &lt;strong&gt;Pages:&lt;/strong&gt; {{pages}}\n                            &lt;/p&gt;\n                            &lt;small class=\"text-muted\"&gt;Published: {{year_published}}&lt;/small&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                {{/each}}\n            &lt;/div&gt;\n        {{else}}\n            &lt;div class=\"alert alert-info\"&gt;\n                &lt;h4&gt;No books found&lt;/h4&gt;\n                &lt;p&gt;Your book collection is empty. Add some books to get started!&lt;/p&gt;\n            &lt;/div&gt;\n        {{/if}}\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE book (\n    id int NOT NULL AUTO_INCREMENT,\n    title varchar(200) NOT NULL,\n    author varchar(100) NOT NULL,\n    genre varchar(50),\n    pages int,\n    year_published int,\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id)\n);\n\nINSERT INTO book (title, author, genre, pages, year_published) VALUES\n('To Kill a Mockingbird', 'Harper Lee', 'Fiction', 281, 1960),\n('1984', 'George Orwell', 'Dystopian Fiction', 328, 1949),\n('Pride and Prejudice', 'Jane Austen', 'Romance', 279, 1813),\n('The Great Gatsby', 'F. Scott Fitzgerald', 'Classic', 180, 1925),\n('Harry Potter and the Sorcerer\\'s Stone', 'J.K. Rowling', 'Fantasy', 309, 1997),\n('The Lord of the Rings', 'J.R.R. Tolkien', 'Fantasy', 1216, 1954),\n('The Catcher in the Rye', 'J.D. Salinger', 'Coming-of-age', 234, 1951),\n('Brave New World', 'Aldous Huxley', 'Science Fiction', 268, 1932);\n</code></pre>"},{"location":"code-libraries/listing.html#how-it-works","title":"How It Works","text":"<ol> <li>Fetch Data: <code>Book.findAll()</code> gets all books from the database</li> <li>Pass to Template: <code>ctx.output[\"books\"] = books</code> makes data available in the view</li> <li>Display Data: Handlebars <code>{{#each books}}</code> loops through each book</li> <li>Show Fields: <code>{{title}}</code>, <code>{{author}}</code> display individual book properties</li> </ol>"},{"location":"code-libraries/listing.html#ordered-listing","title":"Ordered Listing","text":"TransactionViewSQLOutput student_list.py<pre><code>from utils import render\nfrom models import Student\n\nclass Student_list(object):\n    def view(self, ctx):\n        # Get students ordered by name\n        students = Student.findAll().orderBy(\"name ASC\")\n\n        # Pass to template\n        ctx.output[\"students\"] = students\n\n        ctx.go_to = render.as_view(ctx, \"student_list\")\n\n    def by_grade(self, ctx):\n        # Get students ordered by grade (highest first)\n        students = Student.findAll().orderBy(\"grade DESC, name ASC\")\n\n        ctx.output[\"students\"] = students\n        ctx.output[\"sort_by\"] = \"grade\"\n\n        ctx.go_to = render.as_view(ctx, \"student_list\")\n</code></pre> student_list.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Student List&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"d-flex justify-content-between align-items-center mb-4\"&gt;\n            &lt;h1&gt;Class Roster&lt;/h1&gt;\n            &lt;div&gt;\n                &lt;a href=\"/t/example/student_list\" class=\"btn btn-outline-primary btn-sm\"&gt;Sort by Name&lt;/a&gt;\n                &lt;a href=\"/t/example/student_list/by_grade\" class=\"btn btn-outline-success btn-sm\"&gt;Sort by Grade&lt;/a&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        {{#if sort_by}}\n            &lt;div class=\"alert alert-info\"&gt;\n                Students sorted by {{sort_by}}\n            &lt;/div&gt;\n        {{/if}}\n\n        {{#if students}}\n            &lt;div class=\"table-responsive\"&gt;\n                &lt;table class=\"table table-striped\"&gt;\n                    &lt;thead class=\"table-dark\"&gt;\n                        &lt;tr&gt;\n                            &lt;th&gt;Name&lt;/th&gt;\n                            &lt;th&gt;Age&lt;/th&gt;\n                            &lt;th&gt;Grade&lt;/th&gt;\n                            &lt;th&gt;Subject&lt;/th&gt;\n                            &lt;th&gt;Email&lt;/th&gt;\n                        &lt;/tr&gt;\n                    &lt;/thead&gt;\n                    &lt;tbody&gt;\n                        {{#each students}}\n                        &lt;tr&gt;\n                            &lt;td&gt;&lt;strong&gt;{{name}}&lt;/strong&gt;&lt;/td&gt;\n                            &lt;td&gt;{{age}}&lt;/td&gt;\n                            &lt;td&gt;\n                                {{#if grade}}\n                                    &lt;span class=\"badge bg-{{#ifgrade grade}}primary{{else}}secondary{{/ifgrade}}\"&gt;{{grade}}%&lt;/span&gt;\n                                {{else}}\n                                    &lt;span class=\"text-muted\"&gt;No grade&lt;/span&gt;\n                                {{/if}}\n                            &lt;/td&gt;\n                            &lt;td&gt;{{subject}}&lt;/td&gt;\n                            &lt;td&gt;{{email}}&lt;/td&gt;\n                        &lt;/tr&gt;\n                        {{/each}}\n                    &lt;/tbody&gt;\n                &lt;/table&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"mt-3\"&gt;\n                &lt;small class=\"text-muted\"&gt;Total students: {{students.length}}&lt;/small&gt;\n            &lt;/div&gt;\n        {{else}}\n            &lt;div class=\"alert alert-warning\"&gt;\n                &lt;h4&gt;No students found&lt;/h4&gt;\n                &lt;p&gt;The class roster is empty.&lt;/p&gt;\n            &lt;/div&gt;\n        {{/if}}\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE student (\n    id int NOT NULL AUTO_INCREMENT,\n    name varchar(100) NOT NULL,\n    age int,\n    grade decimal(5,2),\n    subject varchar(50),\n    email varchar(150),\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id)\n);\n\nINSERT INTO student (name, age, grade, subject, email) VALUES\n('Alice Johnson', 20, 85.5, 'Computer Science', 'alice.johnson@email.com'),\n('Bob Smith', 19, 92.0, 'Mathematics', 'bob.smith@email.com'),\n('Carol Davis', 21, 78.5, 'Physics', 'carol.davis@email.com'),\n('David Wilson', 20, 88.0, 'Chemistry', 'david.wilson@email.com'),\n('Emma Brown', 19, 95.5, 'Biology', 'emma.brown@email.com'),\n('Frank Miller', 22, 82.0, 'History', 'frank.miller@email.com'),\n('Grace Lee', 20, 90.5, 'English', 'grace.lee@email.com'),\n('Henry Taylor', 19, 87.0, 'Art', 'henry.taylor@email.com');\n</code></pre>"},{"location":"code-libraries/listing.html#key-features","title":"Key Features","text":"<ul> <li>Sorting: <code>orderBy(\"name ASC\")</code> sorts data before displaying</li> <li>Multiple Sort Options: Different sorting methods in different actions</li> <li>Table Display: Clean table layout for structured data</li> <li>Conditional Display: Show different content based on data availability</li> </ul>"},{"location":"code-libraries/listing.html#filtered-listing","title":"Filtered Listing","text":"TransactionViewSQLOutput product_catalog.py<pre><code>from utils import render\nfrom models import Product\n\nclass Product_catalog(object):\n    def view(self, ctx):\n        # Show all products\n        products = Product.findAll().orderBy(\"name ASC\")\n\n        ctx.output[\"products\"] = products\n        ctx.output[\"title\"] = \"All Products\"\n\n        ctx.go_to = render.as_view(ctx, \"product_catalog\")\n\n    def electronics(self, ctx):\n        # Show only electronics\n        products = Product.where(\"category = ?\", \"Electronics\").orderBy(\"name ASC\")\n\n        ctx.output[\"products\"] = products\n        ctx.output[\"title\"] = \"Electronics\"\n        ctx.output[\"filter\"] = \"Electronics\"\n\n        ctx.go_to = render.as_view(ctx, \"product_catalog\")\n\n    def books(self, ctx):\n        # Show only books\n        products = Product.where(\"category = ?\", \"Books\").orderBy(\"name ASC\")\n\n        ctx.output[\"products\"] = products\n        ctx.output[\"title\"] = \"Books\"\n        ctx.output[\"filter\"] = \"Books\"\n\n        ctx.go_to = render.as_view(ctx, \"product_catalog\")\n\n    def affordable(self, ctx):\n        # Show products under $50\n        products = Product.where(\"price &lt; ?\", 50.00).orderBy(\"price ASC\")\n\n        ctx.output[\"products\"] = products\n        ctx.output[\"title\"] = \"Affordable Products (Under $50)\"\n        ctx.output[\"filter\"] = \"affordable\"\n\n        ctx.go_to = render.as_view(ctx, \"product_catalog\")\n</code></pre> product_catalog.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{{title}} - Product Catalog&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;h1&gt;{{title}}&lt;/h1&gt;\n\n        &lt;!-- Filter Navigation --&gt;\n        &lt;nav class=\"mb-4\"&gt;\n            &lt;div class=\"btn-group\" role=\"group\"&gt;\n                &lt;a href=\"/t/example/product_catalog\" class=\"btn btn-outline-primary\"&gt;All Products&lt;/a&gt;\n                &lt;a href=\"/t/example/product_catalog/electronics\" class=\"btn btn-outline-info\"&gt;Electronics&lt;/a&gt;\n                &lt;a href=\"/t/example/product_catalog/books\" class=\"btn btn-outline-success\"&gt;Books&lt;/a&gt;\n                &lt;a href=\"/t/example/product_catalog/affordable\" class=\"btn btn-outline-warning\"&gt;Under $50&lt;/a&gt;\n            &lt;/div&gt;\n        &lt;/nav&gt;\n\n        {{#if filter}}\n            &lt;div class=\"alert alert-info\"&gt;\n                &lt;i class=\"fas fa-filter\"&gt;&lt;/i&gt; Showing filtered results: &lt;strong&gt;{{filter}}&lt;/strong&gt;\n            &lt;/div&gt;\n        {{/if}}\n\n        {{#if products}}\n            &lt;div class=\"row\"&gt;\n                {{#each products}}\n                &lt;div class=\"col-lg-4 col-md-6 mb-4\"&gt;\n                    &lt;div class=\"card h-100\"&gt;\n                        &lt;div class=\"card-body d-flex flex-column\"&gt;\n                            &lt;h5 class=\"card-title\"&gt;{{name}}&lt;/h5&gt;\n                            &lt;p class=\"card-text flex-grow-1\"&gt;{{description}}&lt;/p&gt;\n                            &lt;div class=\"mt-auto\"&gt;\n                                &lt;div class=\"d-flex justify-content-between align-items-center mb-2\"&gt;\n                                    &lt;span class=\"badge bg-secondary\"&gt;{{category}}&lt;/span&gt;\n                                    &lt;h6 class=\"text-primary mb-0\"&gt;${{price}}&lt;/h6&gt;\n                                &lt;/div&gt;\n                                &lt;div class=\"d-flex justify-content-between\"&gt;\n                                    &lt;small class=\"text-muted\"&gt;Stock: {{stock}}&lt;/small&gt;\n                                    {{#if (gt stock 0)}}\n                                        &lt;small class=\"text-success\"&gt;Available&lt;/small&gt;\n                                    {{else}}\n                                        &lt;small class=\"text-danger\"&gt;Out of Stock&lt;/small&gt;\n                                    {{/if}}\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                {{/each}}\n            &lt;/div&gt;\n\n            &lt;div class=\"alert alert-light mt-4\"&gt;\n                &lt;strong&gt;{{products.length}}&lt;/strong&gt; product(s) found\n            &lt;/div&gt;\n        {{else}}\n            &lt;div class=\"alert alert-warning\"&gt;\n                &lt;h4&gt;No products found&lt;/h4&gt;\n                &lt;p&gt;No products match the current filter criteria.&lt;/p&gt;\n                &lt;a href=\"/t/example/product_catalog\" class=\"btn btn-primary\"&gt;View All Products&lt;/a&gt;\n            &lt;/div&gt;\n        {{/if}}\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE product (\n    id int NOT NULL AUTO_INCREMENT,\n    name varchar(200) NOT NULL,\n    description text,\n    category varchar(50),\n    price decimal(10,2),\n    stock int DEFAULT 0,\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_category (category),\n    KEY idx_price (price)\n);\n\nINSERT INTO product (name, description, category, price, stock) VALUES\n('Laptop Computer', 'High-performance laptop for work and gaming', 'Electronics', 899.99, 15),\n('Wireless Mouse', 'Ergonomic wireless mouse with long battery life', 'Electronics', 29.99, 50),\n('Programming Book', 'Learn Python programming from basics to advanced', 'Books', 39.99, 25),\n('Smartphone', 'Latest model smartphone with great camera', 'Electronics', 699.99, 8),\n('Cookbook', 'Delicious recipes for everyday cooking', 'Books', 24.99, 30),\n('Tablet', 'Lightweight tablet perfect for reading and browsing', 'Electronics', 299.99, 12),\n('Novel', 'Bestselling fiction novel', 'Books', 14.99, 40),\n('Headphones', 'Noise-canceling wireless headphones', 'Electronics', 199.99, 20),\n('Textbook', 'University-level mathematics textbook', 'Books', 89.99, 10),\n('Phone Case', 'Protective case for smartphones', 'Electronics', 19.99, 100);\n</code></pre>"},{"location":"code-libraries/listing.html#filtering-features","title":"Filtering Features","text":"<ul> <li>Category Filtering: <code>where(\"category = ?\", \"Electronics\")</code> filters by category</li> <li>Price Filtering: <code>where(\"price &lt; ?\", 50.00)</code> filters by price range</li> <li>Navigation: Easy switching between different filters</li> <li>Dynamic Titles: Page title changes based on current filter</li> </ul>"},{"location":"code-libraries/listing.html#limited-listing-recent-items","title":"Limited Listing (Recent Items)","text":"TransactionViewSQLOutput recent_posts.py<pre><code>from utils import render\nfrom models import Post\n\nclass Recent_posts(object):\n    def view(self, ctx):\n        # Get the 5 most recent posts\n        recent_posts = Post.findAll().orderBy(\"created_at DESC\").limit(5)\n\n        # Get total count for reference\n        total_posts = Post.count()\n\n        ctx.output[\"posts\"] = recent_posts\n        ctx.output[\"total_posts\"] = total_posts\n\n        ctx.go_to = render.as_view(ctx, \"recent_posts\")\n\n    def all(self, ctx):\n        # Show all posts\n        all_posts = Post.findAll().orderBy(\"created_at DESC\")\n\n        ctx.output[\"posts\"] = all_posts\n        ctx.output[\"show_all\"] = True\n\n        ctx.go_to = render.as_view(ctx, \"recent_posts\")\n</code></pre> recent_posts.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Blog Posts&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"d-flex justify-content-between align-items-center mb-4\"&gt;\n            &lt;h1&gt;Blog Posts&lt;/h1&gt;\n            {{#if show_all}}\n                &lt;a href=\"/t/example/recent_posts\" class=\"btn btn-outline-primary\"&gt;Show Recent Only&lt;/a&gt;\n            {{else}}\n                &lt;a href=\"/t/example/recent_posts/all\" class=\"btn btn-outline-success\"&gt;Show All Posts&lt;/a&gt;\n            {{/if}}\n        &lt;/div&gt;\n\n        {{#unless show_all}}\n            {{#if total_posts}}\n                &lt;div class=\"alert alert-info\"&gt;\n                    Showing 5 most recent posts ({{total_posts}} total)\n                &lt;/div&gt;\n            {{/if}}\n        {{/unless}}\n\n        {{#if posts}}\n            {{#each posts}}\n            &lt;article class=\"card mb-4\"&gt;\n                &lt;div class=\"card-body\"&gt;\n                    &lt;h3 class=\"card-title\"&gt;\n                        &lt;a href=\"#\" class=\"text-decoration-none\"&gt;{{title}}&lt;/a&gt;\n                    &lt;/h3&gt;\n                    &lt;p class=\"card-text\"&gt;{{excerpt}}&lt;/p&gt;\n                    &lt;div class=\"d-flex justify-content-between align-items-center\"&gt;\n                        &lt;div&gt;\n                            &lt;small class=\"text-muted\"&gt;\n                                By &lt;strong&gt;{{author}}&lt;/strong&gt; \n                                in &lt;span class=\"badge bg-light text-dark\"&gt;{{category}}&lt;/span&gt;\n                            &lt;/small&gt;\n                        &lt;/div&gt;\n                        &lt;div&gt;\n                            &lt;small class=\"text-muted\"&gt;{{created_at}}&lt;/small&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/article&gt;\n            {{/each}}\n        {{else}}\n            &lt;div class=\"alert alert-warning\"&gt;\n                &lt;h4&gt;No posts found&lt;/h4&gt;\n                &lt;p&gt;There are no blog posts to display yet.&lt;/p&gt;\n            &lt;/div&gt;\n        {{/if}}\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE post (\n    id int NOT NULL AUTO_INCREMENT,\n    title varchar(200) NOT NULL,\n    excerpt text,\n    content longtext,\n    author varchar(100),\n    category varchar(50),\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_created (created_at)\n);\n\nINSERT INTO post (title, excerpt, content, author, category) VALUES\n('Getting Started with Web Development', 'Learn the basics of building websites...', 'Complete guide to web development fundamentals...', 'John Developer', 'Tutorial'),\n('Database Design Best Practices', 'Essential tips for designing efficient databases...', 'Comprehensive guide to database design patterns...', 'Jane DBA', 'Database'),\n('JavaScript Tips and Tricks', 'Improve your JavaScript skills with these tips...', 'Advanced JavaScript techniques and patterns...', 'Mike Coder', 'Programming'),\n('CSS Grid Layout Guide', 'Master CSS Grid for modern web layouts...', 'Complete tutorial on CSS Grid system...', 'Sarah Designer', 'CSS'),\n('API Development with REST', 'Building robust REST APIs for web applications...', 'Step-by-step guide to REST API development...', 'Tom Architect', 'API'),\n('Python for Beginners', 'Start your Python programming journey...', 'Introduction to Python programming language...', 'Lisa Teacher', 'Python'),\n('Mobile App Development', 'Creating apps for iOS and Android...', 'Guide to cross-platform mobile development...', 'Alex Mobile', 'Mobile'),\n('Security Best Practices', 'Keep your applications secure...', 'Essential security practices for web developers...', 'David Security', 'Security');\n</code></pre>"},{"location":"code-libraries/listing.html#limiting-features","title":"Limiting Features","text":"<ul> <li>Limited Results: <code>limit(5)</code> shows only the 5 most recent items</li> <li>Count Display: Show total vs displayed count</li> <li>View Toggle: Switch between limited and full view</li> <li>Chronological Order: <code>orderBy(\"created_at DESC\")</code> shows newest first</li> </ul> <p>Key Takeaways</p> <ul> <li><code>findAll()</code> gets all records from a table</li> <li><code>orderBy()</code> sorts the results (ASC = ascending, DESC = descending) </li> <li><code>where()</code> filters records based on conditions</li> <li><code>limit()</code> restricts the number of results returned</li> <li><code>ctx.output[\"key\"]</code> passes data from transaction to template</li> <li><code>{{#each}}</code> loops through data in Handlebars templates</li> </ul>"},{"location":"code-libraries/mail-api.html","title":"Sending Emails via External APIs","text":"<p>In addition to the built-in <code>mailer</code> utility, S\u00d8AD can integrate with third-party email providers such as Mailgun, SendGrid, or Amazon SES. These services provide reliable delivery and advanced features beyond simple SMTP.</p> <p>The following recipe demonstrates how to send email through the SendGrid API using a Jetty HttpClient (implemented as a singleton). The same approach can be applied to other REST-based providers by adjusting the endpoint, authentication, and parameters.</p> Transaction mail_sender.py<pre><code>from utils import render, Log\nfrom org.eclipse.jetty.client import HttpClient, WWWAuthenticationProtocolHandler\nfrom org.eclipse.jetty.client import StringRequestContent\nfrom java.util.concurrent.locks import ReentrantLock\nfrom java.util.function import Consumer\n\nimport json\n\n# this class is shared across transactions\nclass HttpClientProvider:\n    _client = None\n    _lock = ReentrantLock()\n\n    def get_client(self):\n        # Double-checked locking to be safe under concurrency\n        if self._client is None:\n            self._lock.lock()\n            try:\n                if self._client is None:\n                    client = HttpClient()\n                    client.start()\n                    # Disable default auth handler - if you have auth issue with mail API\n                    client.getProtocolHandlers().remove(WWWAuthenticationProtocolHandler.NAME)\n                    self._client = client\n            finally:\n                self._lock.unlock()\n        return self._client\n\nclass HeadersConsumer(Consumer):\n    def accept(self, fields):\n        # Prefer env var or secure config for API key\n        api_key = System.getenv(\"MAIL_API_KEY\")\n        fields.add(\"Authorization\", \"Bearer \" + api_key)\n        fields.add(\"Content-Type\", \"application/json\")\n\nclass Mail_sender(object):\n    def send(self, ctx):\n        api_url = \"https://api.sendgrid.com/v3/mail/send\"\n        fr = \"from@example.com\"\n        to = \"to@example.com\"\n        subject = \"Test Email\"\n        content = \"Hello, this is a test email.\"\n\n        try:\n            client = HttpClientProvider.get_client()\n            client_request = client.POST(api_url)\n\n            client_request.headers(HeadersConsumer())\n            mail_data = {\n                \"personalizations\": [{\"to\": [{\"email\": to}]}],\n                \"from\": {\"email\": fr},\n                \"subject\": subject,\n                \"content\": [\n                    {\n                        \"type\": \"text/plain\",\n                        \"value\": content\n                    }\n                ]\n            }\n            body = json.dumps(mail_data)\n            client_request.body(StringRequestContent(\"application/json\", body))\n            client_response = client_request.send()\n            Log.info(ctx, \"Mail API response: %s\" % client_response.getContentAsString())\n        except Exception as e:\n            Log.error(ctx, \"Mail API error: %s\" % str(e))\n</code></pre>"},{"location":"code-libraries/upload-download.html","title":"Upload/Download","text":"<p>File upload and download functionality is essential for many web applications. S\u00d8AD provides built-in support for handling file operations securely and efficiently. This recipe covers everything from simple file uploads to advanced features like image processing and download security.</p>"},{"location":"code-libraries/upload-download.html#simple-file-upload","title":"Simple File Upload","text":"TransactionViewSQL file_upload.py<pre><code>from utils import render\nfrom models import Document\nimport os\nfrom java.io import File\nfrom com.google.common.io import Files\n\nclass File_upload(object):\n    def view(self, ctx):\n        # Show upload form\n        ctx.go_to = render.as_view(ctx, \"file_upload\")\n\n    def upload(self, ctx):\n        try:\n            request = ctx.getRequest()\n\n            # Get uploaded file using S\u00d8AD's built-in file handling\n            file_content = request.getParameter(\"document\")     # File content as bytes\n            file_type = request.getParameter(\"document_ft\")     # MIME type\n            file_name = request.getParameter(\"document_fn\")     # Original filename\n\n            if file_content and file_name:\n                # Validate file size (approximate check on byte array)\n                file_size = len(file_content)\n                if file_size &gt; 5 * 1024 * 1024:  # 5MB limit\n                    ctx.output[\"error\"] = \"File size must be less than 5MB\"\n                    ctx.go_to = render.as_view(ctx, \"file_upload\")\n                    return\n\n                # Validate file type if needed\n                allowed_types = [\"application/pdf\", \"image/jpeg\", \"image/png\", \"image/gif\", \n                               \"text/plain\", \"application/msword\", \n                               \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"]\n\n                if file_type not in allowed_types:\n                    ctx.output[\"error\"] = \"File type '%s' is not allowed\" % file_type\n                    ctx.go_to = render.as_view(ctx, \"file_upload\")\n                    return\n\n                # Create upload directory if it doesn't exist\n                upload_dir = os.path.join(ctx.getRealPath(), \"uploads\", \"documents\")\n                if not os.path.exists(upload_dir):\n                    os.makedirs(upload_dir)\n\n                # Generate safe filename to prevent directory traversal\n                safe_filename = os.path.basename(file_name)  # Remove any path components\n                file_path = os.path.join(upload_dir, safe_filename)\n\n                # Save file to disk\n                file_obj = File(file_path)\n                Files.write(file_content, file_obj)\n\n                # Save file info to database\n                doc = Document()\n                doc.set(\"filename\", safe_filename)\n                doc.set(\"file_path\", file_path)\n                doc.set(\"file_size\", file_size)\n                doc.set(\"content_type\", file_type)\n\n                # Get description if provided\n                description = request.getParameter(\"description\")\n                if description:\n                    doc.set(\"description\", description)\n\n                doc.saveIt()\n\n                ctx.output[\"success\"] = \"File uploaded successfully!\"\n                ctx.output[\"document\"] = doc\n            else:\n                ctx.output[\"error\"] = \"Please select a file to upload\"\n\n        except Exception as e:\n            ctx.output[\"error\"] = \"Upload failed: \" + str(e)\n\n        ctx.go_to = render.as_view(ctx, \"file_upload\")\n</code></pre> file_upload.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;File Upload&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"row justify-content-center\"&gt;\n            &lt;div class=\"col-md-8\"&gt;\n                &lt;h2&gt;Upload Document&lt;/h2&gt;\n\n                {{#if error}}\n                    &lt;div class=\"alert alert-danger\"&gt;\n                        &lt;i class=\"fas fa-exclamation-circle\"&gt;&lt;/i&gt; {{error}}\n                    &lt;/div&gt;\n                {{/if}}\n\n                {{#if success}}\n                    &lt;div class=\"alert alert-success\"&gt;\n                        &lt;i class=\"fas fa-check-circle\"&gt;&lt;/i&gt; {{success}}\n                        {{#if document}}\n                            &lt;div class=\"mt-2\"&gt;\n                                &lt;strong&gt;File Details:&lt;/strong&gt;&lt;br&gt;\n                                &lt;small&gt;\n                                    Name: {{document.filename}}&lt;br&gt;\n                                    Size: {{document.file_size}} bytes&lt;br&gt;\n                                    Type: {{document.content_type}}\n                                &lt;/small&gt;\n                            &lt;/div&gt;\n                        {{/if}}\n                    &lt;/div&gt;\n                {{/if}}\n\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;form action=\"/t/example/file_upload/upload\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"document\" class=\"form-label\"&gt;Choose File&lt;/label&gt;\n                                &lt;input type=\"file\" class=\"form-control\" id=\"document\" name=\"document\" required&gt;\n                                &lt;div class=\"form-text\"&gt;Maximum file size: 5MB&lt;/div&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"mb-3\"&gt;\n                                &lt;label for=\"description\" class=\"form-label\"&gt;Description (Optional)&lt;/label&gt;\n                                &lt;textarea class=\"form-control\" id=\"description\" name=\"description\" rows=\"3\" placeholder=\"Enter file description...\"&gt;&lt;/textarea&gt;\n                            &lt;/div&gt;\n\n                            &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;\n                                &lt;i class=\"fas fa-upload\"&gt;&lt;/i&gt; Upload File\n                            &lt;/button&gt;\n                            &lt;a href=\"/t/example/file_list\" class=\"btn btn-secondary\"&gt;\n                                &lt;i class=\"fas fa-list\"&gt;&lt;/i&gt; View Files\n                            &lt;/a&gt;\n                        &lt;/form&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE document (\n    id int NOT NULL AUTO_INCREMENT,\n    filename varchar(255) NOT NULL,\n    file_path varchar(500) NOT NULL,\n    file_size bigint,\n    content_type varchar(100),\n    description text,\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_filename (filename),\n    KEY idx_created (created_at)\n);\n</code></pre>"},{"location":"code-libraries/upload-download.html#how-it-works","title":"How It Works","text":"<ol> <li>Form Setup: Use <code>enctype=\"multipart/form-data\"</code> for file uploads</li> <li>File Retrieval: S\u00d8AD automatically extracts file data into three parameters:</li> <li><code>document</code> \u2192 File content as byte array</li> <li><code>document_ft</code> \u2192 MIME type (e.g., <code>application/pdf</code>)</li> <li><code>document_fn</code> \u2192 Original filename (e.g., <code>report.pdf</code>)</li> <li>Validation: Check file size using <code>len(file_content)</code> and validate MIME type</li> <li>Save File: Use Java's <code>Files.write()</code> to save byte array to disk</li> <li>Database Record: Store file metadata for secure access control</li> </ol>"},{"location":"code-libraries/upload-download.html#image-upload-with-processing","title":"Image Upload with Processing","text":"TransactionViewSQL image_upload.py<pre><code>from utils import render\nfrom models import Image\nimport os\nfrom java.io import File, ByteArrayInputStream\nfrom javax.imageio import ImageIO\nfrom java.awt.image import BufferedImage\nfrom java.awt import RenderingHints\nfrom com.google.common.io import Files\n\nclass Image_upload(object):\n    def view(self, ctx):\n        # Show recent uploads\n        recent_images = Image.findAll().orderBy(\"created_at DESC\").limit(6)\n        ctx.output[\"recent_images\"] = recent_images\n        ctx.go_to = render.as_view(ctx, \"image_upload\")\n\n    def upload(self, ctx):\n        try:\n            request = ctx.getRequest()\n\n            # Get uploaded image using S\u00d8AD's built-in file handling\n            image_content = request.getParameter(\"image\")      # Image content as bytes\n            image_type = request.getParameter(\"image_ft\")      # MIME type\n            image_name = request.getParameter(\"image_fn\")      # Original filename\n\n            if image_content and image_name:\n                # Validate image type\n                if not image_type or not image_type.startswith(\"image/\"):\n                    ctx.output[\"error\"] = \"Please upload a valid image file\"\n                    ctx.go_to = render.as_view(ctx, \"image_upload\")\n                    return\n\n                # Validate file size (2MB for images)\n                file_size = len(image_content)\n                if file_size &gt; 2 * 1024 * 1024:\n                    ctx.output[\"error\"] = \"Image size must be less than 2MB\"\n                    ctx.go_to = render.as_view(ctx, \"image_upload\")\n                    return\n\n                # Create upload directories\n                upload_base = os.path.join(ctx.getRealPath(), \"uploads\", \"images\")\n                original_dir = os.path.join(upload_base, \"original\")\n                thumbnail_dir = os.path.join(upload_base, \"thumbnails\")\n\n                for directory in [original_dir, thumbnail_dir]:\n                    if not os.path.exists(directory):\n                        os.makedirs(directory)\n\n                # Generate safe filename\n                safe_filename = os.path.basename(image_name)\n                original_path = os.path.join(original_dir, safe_filename)\n\n                # Save original image\n                original_file = File(original_path)\n                Files.write(image_content, original_file)\n\n                # Create thumbnail\n                thumbnail_path = self.create_thumbnail(ctx, image_content, safe_filename, thumbnail_dir)\n\n                # Save to database\n                image = Image()\n                image.set(\"filename\", safe_filename)\n                image.set(\"original_path\", original_path)\n                image.set(\"thumbnail_path\", thumbnail_path)\n                image.set(\"file_size\", file_size)\n                image.set(\"content_type\", image_type)\n                image.saveIt()\n\n                ctx.output[\"success\"] = \"Image uploaded and processed successfully!\"\n                ctx.output[\"uploaded_image\"] = image\n            else:\n                ctx.output[\"error\"] = \"Please select an image to upload\"\n\n        except Exception as e:\n            ctx.output[\"error\"] = \"Upload failed: \" + str(e)\n\n        # Reload recent images\n        recent_images = Image.findAll().orderBy(\"created_at DESC\").limit(6)\n        ctx.output[\"recent_images\"] = recent_images\n        ctx.go_to = render.as_view(ctx, \"image_upload\")\n\n    def create_thumbnail(self, ctx, image_bytes, filename, thumbnail_dir):\n        \"\"\"Create a thumbnail version of the uploaded image\"\"\"\n        try:\n            # Read image from byte array\n            input_stream = ByteArrayInputStream(image_bytes)\n            original_image = ImageIO.read(input_stream)\n\n            if original_image:\n                # Calculate thumbnail dimensions (max 150x150)\n                orig_width = original_image.getWidth()\n                orig_height = original_image.getHeight()\n\n                thumb_width = 150\n                thumb_height = 150\n\n                # Maintain aspect ratio\n                if orig_width &gt; orig_height:\n                    thumb_height = int((float(orig_height) / orig_width) * thumb_width)\n                else:\n                    thumb_width = int((float(orig_width) / orig_height) * thumb_height)\n\n                # Create thumbnail\n                thumbnail = BufferedImage(thumb_width, thumb_height, BufferedImage.TYPE_INT_RGB)\n                graphics = thumbnail.createGraphics()\n                graphics.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR)\n                graphics.drawImage(original_image, 0, 0, thumb_width, thumb_height, None)\n                graphics.dispose()\n\n                # Save thumbnail\n                thumb_filename = \"thumb_\" + filename\n                thumbnail_path = os.path.join(thumbnail_dir, thumb_filename)\n\n                # Save as JPEG for consistent format\n                ImageIO.write(thumbnail, \"jpg\", File(thumbnail_path))\n                return thumbnail_path\n\n        except Exception as e:\n            print(\"Thumbnail creation failed: \" + str(e))\n\n        return None\n</code></pre> image_upload.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Image Upload&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        .image-preview {\n            max-width: 200px;\n            max-height: 200px;\n            object-fit: cover;\n            border-radius: 8px;\n        }\n        .upload-area {\n            border: 2px dashed #dee2e6;\n            border-radius: 8px;\n            padding: 2rem;\n            text-align: center;\n            transition: border-color 0.3s;\n        }\n        .upload-area:hover {\n            border-color: #0d6efd;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;h2 class=\"mb-4\"&gt;Image Upload &amp; Gallery&lt;/h2&gt;\n\n        {{#if error}}\n            &lt;div class=\"alert alert-danger\"&gt;\n                &lt;i class=\"fas fa-exclamation-triangle\"&gt;&lt;/i&gt; {{error}}\n            &lt;/div&gt;\n        {{/if}}\n\n        {{#if success}}\n            &lt;div class=\"alert alert-success\"&gt;\n                &lt;i class=\"fas fa-check-circle\"&gt;&lt;/i&gt; {{success}}\n            &lt;/div&gt;\n        {{/if}}\n\n        &lt;div class=\"row\"&gt;\n            &lt;!-- Upload Form --&gt;\n            &lt;div class=\"col-md-6\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header\"&gt;\n                        &lt;h5 class=\"mb-0\"&gt;&lt;i class=\"fas fa-cloud-upload-alt\"&gt;&lt;/i&gt; Upload New Image&lt;/h5&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;form action=\"/t/example/image_upload/upload\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n                            &lt;div class=\"upload-area mb-3\"&gt;\n                                &lt;input type=\"file\" class=\"form-control\" id=\"image\" name=\"image\" accept=\"image/*\" required onchange=\"previewImage(this)\"&gt;\n                                &lt;div class=\"mt-2\"&gt;\n                                    &lt;i class=\"fas fa-image fa-2x text-muted\"&gt;&lt;/i&gt;\n                                    &lt;p class=\"mb-0\"&gt;Choose an image file&lt;/p&gt;\n                                    &lt;small class=\"text-muted\"&gt;Max size: 2MB&lt;/small&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n\n                            &lt;!-- Image Preview --&gt;\n                            &lt;div id=\"imagePreview\" class=\"mb-3 text-center\" style=\"display: none;\"&gt;\n                                &lt;img id=\"preview\" class=\"image-preview\" alt=\"Preview\"&gt;\n                            &lt;/div&gt;\n\n                            &lt;button type=\"submit\" class=\"btn btn-primary w-100\"&gt;\n                                &lt;i class=\"fas fa-upload\"&gt;&lt;/i&gt; Upload Image\n                            &lt;/button&gt;\n                        &lt;/form&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;!-- Recent Uploads --&gt;\n            &lt;div class=\"col-md-6\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header\"&gt;\n                        &lt;h5 class=\"mb-0\"&gt;&lt;i class=\"fas fa-images\"&gt;&lt;/i&gt; Recent Uploads&lt;/h5&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        {{#if recent_images}}\n                            &lt;div class=\"row g-2\"&gt;\n                                {{#each recent_images}}\n                                &lt;div class=\"col-4\"&gt;\n                                    &lt;div class=\"position-relative\"&gt;\n                                        &lt;img src=\"{{thumbnail_path}}\" class=\"img-fluid rounded\" alt=\"{{filename}}\" \n                                             data-bs-toggle=\"modal\" data-bs-target=\"#imageModal{{id}}\" \n                                             style=\"cursor: pointer; height: 80px; width: 100%; object-fit: cover;\"&gt;\n                                        &lt;small class=\"d-block text-truncate mt-1\" title=\"{{filename}}\"&gt;{{filename}}&lt;/small&gt;\n                                    &lt;/div&gt;\n\n                                    &lt;!-- Modal for full size image --&gt;\n                                    &lt;div class=\"modal fade\" id=\"imageModal{{id}}\" tabindex=\"-1\"&gt;\n                                        &lt;div class=\"modal-dialog modal-lg\"&gt;\n                                            &lt;div class=\"modal-content\"&gt;\n                                                &lt;div class=\"modal-header\"&gt;\n                                                    &lt;h5 class=\"modal-title\"&gt;{{filename}}&lt;/h5&gt;\n                                                    &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"&gt;&lt;/button&gt;\n                                                &lt;/div&gt;\n                                                &lt;div class=\"modal-body text-center\"&gt;\n                                                    &lt;img src=\"{{original_path}}\" class=\"img-fluid\" alt=\"{{filename}}\"&gt;\n                                                    &lt;div class=\"mt-2\"&gt;\n                                                        &lt;small class=\"text-muted\"&gt;\n                                                            Size: {{file_size}} bytes | Type: {{content_type}}&lt;br&gt;\n                                                            Uploaded: {{created_at}}\n                                                        &lt;/small&gt;\n                                                    &lt;/div&gt;\n                                                &lt;/div&gt;\n                                                &lt;div class=\"modal-footer\"&gt;\n                                                    &lt;a href=\"{{original_path}}\" class=\"btn btn-primary\" download=\"{{filename}}\"&gt;\n                                                        &lt;i class=\"fas fa-download\"&gt;&lt;/i&gt; Download\n                                                    &lt;/a&gt;\n                                                    &lt;button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"&gt;Close&lt;/button&gt;\n                                                &lt;/div&gt;\n                                            &lt;/div&gt;\n                                        &lt;/div&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                                {{/each}}\n                            &lt;/div&gt;\n                        {{else}}\n                            &lt;div class=\"text-center text-muted\"&gt;\n                                &lt;i class=\"fas fa-images fa-3x mb-3\"&gt;&lt;/i&gt;\n                                &lt;p&gt;No images uploaded yet&lt;/p&gt;\n                            &lt;/div&gt;\n                        {{/if}}\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        function previewImage(input) {\n            if (input.files &amp;&amp; input.files[0]) {\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    document.getElementById('preview').src = e.target.result;\n                    document.getElementById('imagePreview').style.display = 'block';\n                };\n                reader.readAsDataURL(input.files[0]);\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE image (\n    id int NOT NULL AUTO_INCREMENT,\n    filename varchar(255) NOT NULL,\n    original_path varchar(500) NOT NULL,\n    thumbnail_path varchar(500),\n    file_size bigint,\n    content_type varchar(100),\n    alt_text varchar(255),\n    created_at timestamp DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY idx_filename (filename),\n    KEY idx_created (created_at)\n);\n</code></pre>"},{"location":"code-libraries/upload-download.html#advanced-features","title":"Advanced Features","text":"<ul> <li>Image Validation: Check file type and size</li> <li>Thumbnail Generation: Auto-create smaller versions</li> <li>Image Preview: Show preview before upload</li> <li>Gallery Display: View recent uploads</li> <li>Modal Viewer: Full-size image viewing</li> </ul>"},{"location":"code-libraries/upload-download.html#secure-file-download","title":"Secure File Download","text":"TransactionViewSQL file_download.py<pre><code>from utils import render\nfrom models import Document\nimport os\nfrom java.io import FileInputStream, BufferedInputStream\nfrom java.net import URLEncoder\n\nclass File_download(object):\n    def view(self, ctx):\n        # List all available files\n        documents = Document.findAll().orderBy(\"created_at DESC\")\n        ctx.output[\"documents\"] = documents\n        ctx.go_to = render.as_view(ctx, \"file_download\")\n\n    def download(self, ctx):\n        \"\"\"Secure file download with access control\"\"\"\n        try:\n            file_id = ctx.request.getParameter(\"id\")\n\n            if not file_id:\n                ctx.output[\"error\"] = \"File ID is required\"\n                ctx.go_to = render.as_view(ctx, \"file_download\")\n                return\n\n            # Get file record from database\n            document = Document.findById(file_id)\n\n            if not document:\n                ctx.output[\"error\"] = \"File not found\"\n                ctx.go_to = render.as_view(ctx, \"file_download\")\n                return\n\n            # Verify file exists on disk\n            file_path = str(document.get(\"file_path\"))\n            if not os.path.exists(file_path):\n                ctx.output[\"error\"] = \"File no longer exists on server\"\n                ctx.go_to = render.as_view(ctx, \"file_download\")\n                return\n\n            # Set download headers\n            response = ctx.response\n            filename = str(document.get(\"filename\"))\n            content_type = str(document.get(\"content_type\")) or \"application/octet-stream\"\n\n            # Set content type and disposition\n            response.setContentType(content_type)\n            response.setHeader(\"Content-Disposition\", \n                \"attachment; filename=\\\"\" + URLEncoder.encode(filename, \"UTF-8\") + \"\\\"\")\n\n            # Set content length if known\n            file_size = document.get(\"file_size\")\n            if file_size:\n                response.setContentLength(int(file_size))\n\n            # Stream file to client\n            with open(file_path, 'rb') as file:\n                output_stream = response.getOutputStream()\n                buffer = bytearray(8192)  # 8KB buffer\n\n                while True:\n                    bytes_read = file.readinto(buffer)\n                    if bytes_read == 0:\n                        break\n                    output_stream.write(buffer, 0, bytes_read)\n\n                output_stream.flush()\n\n            # Update download count (optional)\n            download_count = document.get(\"download_count\") or 0\n            document.set(\"download_count\", download_count + 1)\n            document.set(\"last_downloaded\", \"NOW()\")\n            document.saveIt()\n\n            # Don't render a view for downloads\n            ctx.go_to = None\n\n        except Exception as e:\n            ctx.output[\"error\"] = \"Download failed: \" + str(e)\n            ctx.go_to = render.as_view(ctx, \"file_download\")\n\n    def preview(self, ctx):\n        \"\"\"Preview file in browser (for images, PDFs, etc.)\"\"\"\n        try:\n            file_id = ctx.request.getParameter(\"id\")\n            document = Document.findById(file_id)\n\n            if not document:\n                ctx.response.sendError(404, \"File not found\")\n                return\n\n            file_path = str(document.get(\"file_path\"))\n            if not os.path.exists(file_path):\n                ctx.response.sendError(404, \"File not found on disk\")\n                return\n\n            # Set headers for inline display\n            content_type = str(document.get(\"content_type\")) or \"application/octet-stream\"\n            ctx.response.setContentType(content_type)\n            ctx.response.setHeader(\"Content-Disposition\", \"inline\")\n\n            # Stream file\n            with open(file_path, 'rb') as file:\n                output_stream = ctx.response.getOutputStream()\n                buffer = bytearray(8192)\n\n                while True:\n                    bytes_read = file.readinto(buffer)\n                    if bytes_read == 0:\n                        break\n                    output_stream.write(buffer, 0, bytes_read)\n\n                output_stream.flush()\n\n            ctx.go_to = None\n\n        except Exception as e:\n            ctx.response.sendError(500, \"Preview failed: \" + str(e))\n</code></pre> file_download.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;File Downloads&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;div class=\"d-flex justify-content-between align-items-center mb-4\"&gt;\n            &lt;h2&gt;Available Downloads&lt;/h2&gt;\n            &lt;a href=\"/t/example/file_upload\" class=\"btn btn-primary\"&gt;\n                &lt;i class=\"fas fa-upload\"&gt;&lt;/i&gt; Upload New File\n            &lt;/a&gt;\n        &lt;/div&gt;\n\n        {{#if error}}\n            &lt;div class=\"alert alert-danger\"&gt;\n                &lt;i class=\"fas fa-exclamation-circle\"&gt;&lt;/i&gt; {{error}}\n            &lt;/div&gt;\n        {{/if}}\n\n        {{#if documents}}\n            &lt;div class=\"row\"&gt;\n                {{#each documents}}\n                &lt;div class=\"col-md-6 col-lg-4 mb-4\"&gt;\n                    &lt;div class=\"card h-100\"&gt;\n                        &lt;div class=\"card-body d-flex flex-column\"&gt;\n                            &lt;div class=\"mb-3\"&gt;\n                                {{#if (eq content_type \"image/jpeg\" \"image/png\" \"image/gif\")}}\n                                    &lt;i class=\"fas fa-image fa-2x text-primary\"&gt;&lt;/i&gt;\n                                {{else if (eq content_type \"application/pdf\")}}\n                                    &lt;i class=\"fas fa-file-pdf fa-2x text-danger\"&gt;&lt;/i&gt;\n                                {{else if (includes content_type \"text/\")}}\n                                    &lt;i class=\"fas fa-file-alt fa-2x text-info\"&gt;&lt;/i&gt;\n                                {{else}}\n                                    &lt;i class=\"fas fa-file fa-2x text-secondary\"&gt;&lt;/i&gt;\n                                {{/if}}\n                            &lt;/div&gt;\n\n                            &lt;h5 class=\"card-title\"&gt;{{filename}}&lt;/h5&gt;\n\n                            &lt;div class=\"card-text flex-grow-1\"&gt;\n                                {{#if description}}\n                                    &lt;p class=\"text-muted\"&gt;{{description}}&lt;/p&gt;\n                                {{/if}}\n\n                                &lt;small class=\"text-muted\"&gt;\n                                    &lt;strong&gt;Size:&lt;/strong&gt; {{formatFileSize file_size}}&lt;br&gt;\n                                    &lt;strong&gt;Type:&lt;/strong&gt; {{content_type}}&lt;br&gt;\n                                    &lt;strong&gt;Uploaded:&lt;/strong&gt; {{formatDate created_at}}\n                                    {{#if download_count}}&lt;br&gt;&lt;strong&gt;Downloads:&lt;/strong&gt; {{download_count}}{{/if}}\n                                &lt;/small&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"mt-auto\"&gt;\n                                &lt;div class=\"btn-group w-100\" role=\"group\"&gt;\n                                    &lt;a href=\"/t/example/file_download/download?id={{id}}\" \n                                       class=\"btn btn-primary btn-sm\" title=\"Download file\"&gt;\n                                        &lt;i class=\"fas fa-download\"&gt;&lt;/i&gt; Download\n                                    &lt;/a&gt;\n\n                                    {{#if (or (includes content_type \"image/\") (eq content_type \"application/pdf\"))}}\n                                        &lt;a href=\"/t/example/file_download/preview?id={{id}}\" \n                                           class=\"btn btn-outline-secondary btn-sm\" \n                                           target=\"_blank\" title=\"Preview file\"&gt;\n                                            &lt;i class=\"fas fa-eye\"&gt;&lt;/i&gt; Preview\n                                        &lt;/a&gt;\n                                    {{/if}}\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                {{/each}}\n            &lt;/div&gt;\n\n            &lt;div class=\"mt-4\"&gt;\n                &lt;div class=\"alert alert-light\"&gt;\n                    &lt;strong&gt;{{documents.length}}&lt;/strong&gt; file(s) available for download\n                &lt;/div&gt;\n            &lt;/div&gt;\n        {{else}}\n            &lt;div class=\"alert alert-info text-center\"&gt;\n                &lt;i class=\"fas fa-folder-open fa-3x mb-3\"&gt;&lt;/i&gt;\n                &lt;h4&gt;No files available&lt;/h4&gt;\n                &lt;p&gt;Upload some files to get started!&lt;/p&gt;\n                &lt;a href=\"/t/example/file_upload\" class=\"btn btn-primary\"&gt;\n                    &lt;i class=\"fas fa-upload\"&gt;&lt;/i&gt; Upload First File\n                &lt;/a&gt;\n            &lt;/div&gt;\n        {{/if}}\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>-- Add download tracking columns to document table\nALTER TABLE document ADD COLUMN download_count int DEFAULT 0;\nALTER TABLE document ADD COLUMN last_downloaded timestamp NULL;\nALTER TABLE document ADD KEY idx_downloads (download_count);\n\n-- Sample data\nINSERT INTO document (filename, file_path, file_size, content_type, description) VALUES\n('user_manual.pdf', '/app/uploads/documents/user_manual.pdf', 2048576, 'application/pdf', 'Complete user manual for the application'),\n('sample_data.xlsx', '/app/uploads/documents/sample_data.xlsx', 1024000, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'Sample Excel file with demo data'),\n('company_logo.png', '/app/uploads/images/company_logo.png', 45678, 'image/png', 'Official company logo in PNG format'),\n('report_template.docx', '/app/uploads/documents/report_template.docx', 98765, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'Template for monthly reports');\n</code></pre>"},{"location":"code-libraries/upload-download.html#security-features","title":"Security Features","text":"<ul> <li>Database Verification: Check file exists in database</li> <li>File Existence Check: Verify file exists on disk</li> <li>Proper Headers: Set correct content-type and disposition</li> <li>Streaming: Efficient file streaming for large files</li> <li>Download Tracking: Track download counts and timestamps</li> <li>Preview Support: Safe preview for images and PDFs</li> </ul>"},{"location":"code-libraries/upload-download.html#multiple-file-upload","title":"Multiple File Upload","text":"TransactionView bulk_upload.py<pre><code>from utils import render\nfrom models import Document\nimport os\nfrom java.io import File\nfrom com.google.common.io import Files\n\nclass Bulk_upload(object):\n    def view(self, ctx):\n        ctx.go_to = render.as_view(ctx, \"bulk_upload\")\n\n    def upload(self, ctx):\n        \"\"\"Handle multiple file uploads using S\u00d8AD's file handling\"\"\"\n        uploaded_files = []\n        errors = []\n\n        try:\n            request = ctx.getRequest()\n\n            # S\u00d8AD automatically handles multiple files with same name\n            # For multiple files, we need to check for each file index\n            file_index = 0\n\n            while True:\n                # Try to get file at current index\n                file_param = \"files_%d\" % file_index\n                file_content = request.getParameter(file_param)\n                file_type = request.getParameter(\"%s_ft\" % file_param)\n                file_name = request.getParameter(\"%s_fn\" % file_param)\n\n                # If no file at this index, try the standard approach\n                if not file_content:\n                    # For single file or first file in multiple selection\n                    if file_index == 0:\n                        file_content = request.getParameter(\"files\")\n                        file_type = request.getParameter(\"files_ft\")\n                        file_name = request.getParameter(\"files_fn\")\n\n                if not file_content or not file_name:\n                    break  # No more files\n\n                try:\n                    # Validate file size\n                    file_size = len(file_content)\n                    if file_size &gt; 10 * 1024 * 1024:  # 10MB per file\n                        errors.append(\"%s: File too large (max 10MB)\" % file_name)\n                        file_index += 1\n                        continue\n\n                    # Create upload directory\n                    upload_dir = os.path.join(ctx.getRealPath(), \"uploads\", \"documents\")\n                    if not os.path.exists(upload_dir):\n                        os.makedirs(upload_dir)\n\n                    # Generate safe filename\n                    safe_filename = os.path.basename(file_name)\n                    file_path = os.path.join(upload_dir, safe_filename)\n\n                    # Save file to disk\n                    file_obj = File(file_path)\n                    Files.write(file_content, file_obj)\n\n                    # Save to database\n                    doc = Document()\n                    doc.set(\"filename\", safe_filename)\n                    doc.set(\"file_path\", file_path)\n                    doc.set(\"file_size\", file_size)\n                    doc.set(\"content_type\", file_type)\n                    doc.saveIt()\n\n                    uploaded_files.append({\n                        \"filename\": safe_filename,\n                        \"size\": file_size,\n                        \"type\": file_type,\n                        \"id\": doc.getId()\n                    })\n\n                except Exception as e:\n                    errors.append(\"%s: Upload failed - %s\" % (file_name, str(e)))\n\n                file_index += 1\n\n            # Check if no files were processed\n            if file_index == 0 or (not uploaded_files and not errors):\n                ctx.output[\"error\"] = \"Please select at least one file to upload\"\n                ctx.go_to = render.as_view(ctx, \"bulk_upload\")\n                return\n\n            # Set output messages\n            if uploaded_files:\n                ctx.output[\"success\"] = \"Successfully uploaded %d file(s)\" % len(uploaded_files)\n                ctx.output[\"uploaded_files\"] = uploaded_files\n\n            if errors:\n                ctx.output[\"errors\"] = errors\n\n        except Exception as e:\n            ctx.output[\"error\"] = \"Bulk upload failed: %s\" % str(e)\n\n        ctx.go_to = render.as_view(ctx, \"bulk_upload\")\n</code></pre> bulk_upload.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Bulk File Upload&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        .file-drop-zone {\n            border: 2px dashed #dee2e6;\n            border-radius: 8px;\n            padding: 3rem;\n            text-align: center;\n            transition: all 0.3s;\n            cursor: pointer;\n        }\n        .file-drop-zone:hover, .file-drop-zone.dragover {\n            border-color: #0d6efd;\n            background-color: #f8f9fa;\n        }\n        .file-list {\n            max-height: 200px;\n            overflow-y: auto;\n        }\n        .progress-container {\n            display: none;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;h2 class=\"mb-4\"&gt;Bulk File Upload&lt;/h2&gt;\n\n        {{#if error}}\n            &lt;div class=\"alert alert-danger\"&gt;\n                &lt;i class=\"fas fa-exclamation-circle\"&gt;&lt;/i&gt; {{error}}\n            &lt;/div&gt;\n        {{/if}}\n\n        {{#if success}}\n            &lt;div class=\"alert alert-success\"&gt;\n                &lt;i class=\"fas fa-check-circle\"&gt;&lt;/i&gt; {{success}}\n\n                {{#if uploaded_files}}\n                    &lt;div class=\"mt-3\"&gt;\n                        &lt;strong&gt;Uploaded files:&lt;/strong&gt;\n                        &lt;ul class=\"mb-0 mt-2\"&gt;\n                            {{#each uploaded_files}}\n                            &lt;li&gt;{{filename}} ({{size}} bytes)&lt;/li&gt;\n                            {{/each}}\n                        &lt;/ul&gt;\n                    &lt;/div&gt;\n                {{/if}}\n            &lt;/div&gt;\n        {{/if}}\n\n        {{#if errors}}\n            &lt;div class=\"alert alert-warning\"&gt;\n                &lt;i class=\"fas fa-exclamation-triangle\"&gt;&lt;/i&gt; Some files failed to upload:\n                &lt;ul class=\"mb-0 mt-2\"&gt;\n                    {{#each errors}}\n                    &lt;li&gt;{{this}}&lt;/li&gt;\n                    {{/each}}\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        {{/if}}\n\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-md-8\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header\"&gt;\n                        &lt;h5 class=\"mb-0\"&gt;&lt;i class=\"fas fa-cloud-upload-alt\"&gt;&lt;/i&gt; Select Multiple Files&lt;/h5&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;form action=\"/t/example/bulk_upload/upload\" method=\"post\" enctype=\"multipart/form-data\" id=\"uploadForm\"&gt;\n                            &lt;div class=\"file-drop-zone\" onclick=\"document.getElementById('fileInput').click()\"&gt;\n                                &lt;i class=\"fas fa-cloud-upload-alt fa-3x text-muted mb-3\"&gt;&lt;/i&gt;\n                                &lt;h5&gt;Drop files here or click to select&lt;/h5&gt;\n                                &lt;p class=\"text-muted mb-0\"&gt;You can select multiple files at once&lt;/p&gt;\n                                &lt;small class=\"text-muted\"&gt;Maximum 10MB per file&lt;/small&gt;\n                            &lt;/div&gt;\n\n                            &lt;input type=\"file\" id=\"fileInput\" name=\"files[]\" multiple style=\"display: none;\" onchange=\"showSelectedFiles(this)\"&gt;\n\n                            &lt;div id=\"selectedFiles\" class=\"mt-3\" style=\"display: none;\"&gt;\n                                &lt;h6&gt;Selected Files:&lt;/h6&gt;\n                                &lt;div id=\"fileList\" class=\"file-list border rounded p-2 bg-light\"&gt;&lt;/div&gt;\n                                &lt;div class=\"mt-3\"&gt;\n                                    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;\n                                        &lt;i class=\"fas fa-upload\"&gt;&lt;/i&gt; Upload All Files\n                                    &lt;/button&gt;\n                                    &lt;button type=\"button\" class=\"btn btn-secondary\" onclick=\"clearFiles()\"&gt;\n                                        &lt;i class=\"fas fa-times\"&gt;&lt;/i&gt; Clear Selection\n                                    &lt;/button&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n\n                            &lt;div class=\"progress-container mt-3\"&gt;\n                                &lt;div class=\"progress\"&gt;\n                                    &lt;div class=\"progress-bar\" role=\"progressbar\" style=\"width: 0%\"&gt;&lt;/div&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/form&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"col-md-4\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header\"&gt;\n                        &lt;h6 class=\"mb-0\"&gt;&lt;i class=\"fas fa-info-circle\"&gt;&lt;/i&gt; Upload Guidelines&lt;/h6&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;ul class=\"list-unstyled mb-0\"&gt;\n                            &lt;li&gt;&lt;i class=\"fas fa-check text-success\"&gt;&lt;/i&gt; Maximum 10MB per file&lt;/li&gt;\n                            &lt;li&gt;&lt;i class=\"fas fa-check text-success\"&gt;&lt;/i&gt; Multiple files supported&lt;/li&gt;\n                            &lt;li&gt;&lt;i class=\"fas fa-check text-success\"&gt;&lt;/i&gt; Drag and drop enabled&lt;/li&gt;\n                            &lt;li&gt;&lt;i class=\"fas fa-check text-success\"&gt;&lt;/i&gt; All file types accepted&lt;/li&gt;\n                        &lt;/ul&gt;\n\n                        &lt;hr&gt;\n\n                        &lt;div class=\"mt-3\"&gt;\n                            &lt;a href=\"/t/example/file_download\" class=\"btn btn-outline-primary btn-sm w-100\"&gt;\n                                &lt;i class=\"fas fa-list\"&gt;&lt;/i&gt; View Uploaded Files\n                            &lt;/a&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        function showSelectedFiles(input) {\n            const fileList = document.getElementById('fileList');\n            const selectedFiles = document.getElementById('selectedFiles');\n\n            if (input.files.length &gt; 0) {\n                let html = '';\n                for (let i = 0; i &lt; input.files.length; i++) {\n                    const file = input.files[i];\n                    const sizeKB = Math.round(file.size / 1024);\n                    html += `\n                        &lt;div class=\"d-flex justify-content-between align-items-center py-1 border-bottom\"&gt;\n                            &lt;div&gt;\n                                &lt;strong&gt;${file.name}&lt;/strong&gt;&lt;br&gt;\n                                &lt;small class=\"text-muted\"&gt;${sizeKB} KB - ${file.type || 'Unknown type'}&lt;/small&gt;\n                            &lt;/div&gt;\n                            &lt;i class=\"fas fa-file text-primary\"&gt;&lt;/i&gt;\n                        &lt;/div&gt;\n                    `;\n                }\n                fileList.innerHTML = html;\n                selectedFiles.style.display = 'block';\n            } else {\n                selectedFiles.style.display = 'none';\n            }\n        }\n\n        function clearFiles() {\n            document.getElementById('fileInput').value = '';\n            document.getElementById('selectedFiles').style.display = 'none';\n        }\n\n        // Drag and drop functionality\n        const dropZone = document.querySelector('.file-drop-zone');\n\n        dropZone.addEventListener('dragover', function(e) {\n            e.preventDefault();\n            this.classList.add('dragover');\n        });\n\n        dropZone.addEventListener('dragleave', function(e) {\n            e.preventDefault();\n            this.classList.remove('dragover');\n        });\n\n        dropZone.addEventListener('drop', function(e) {\n            e.preventDefault();\n            this.classList.remove('dragover');\n\n            const fileInput = document.getElementById('fileInput');\n            fileInput.files = e.dataTransfer.files;\n            showSelectedFiles(fileInput);\n        });\n\n        // Form submission progress\n        document.getElementById('uploadForm').addEventListener('submit', function() {\n            document.querySelector('.progress-container').style.display = 'block';\n            // Note: Real progress tracking would require AJAX\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"code-libraries/upload-download.html#bulk-upload-features","title":"Bulk Upload Features","text":"<ul> <li>Multiple Selection: HTML5 multiple file input</li> <li>Drag &amp; Drop: Modern file drop interface</li> <li>File Preview: Show selected files before upload</li> <li>Individual Validation: Check each file separately</li> <li>Partial Success: Continue even if some files fail</li> <li>Error Reporting: Detailed error messages per file</li> </ul> <p>Key Takeaways</p> <ul> <li>Security First: Always validate file types, sizes, and paths</li> <li>Error Handling: Provide clear feedback for upload failures</li> <li>User Experience: Show progress and preview capabilities</li> <li>Performance: Stream large files to avoid memory issues</li> <li>Database Integration: Store file metadata for easy retrieval</li> <li>Access Control: Verify permissions before allowing downloads</li> </ul>"},{"location":"components/cli.html","title":"S\u00d8AD CLI","text":"<p>S\u00d8AD CLI is a client for S\u00d8AD that allows you to manage your S\u00d8AD projects easily. It provides commands to pull and push transactions from the S\u00d8AD Server. By using the CLI, you get the ability to edit your transactions locally using your favorite editor and then push the changes back to the S\u00d8AD Server. You can pull single transaction or all transactions from the Server but you can push only single transaction to the Server.</p> <p>By using this CLI, you can leverage the full power of your local editor, such as Visual Studio Code, along with its extensions and features. This allows you to edit transactions with advanced tools like syntax highlighting, linting, and version control integration, ensuring a seamless and efficient development experience.</p>"},{"location":"components/cli.html#installation","title":"Installation","text":"<p>To install the S\u00d8AD CLI, you can download the latest release from the S\u00d8AD CLI GitHub repository. After downloading, extract the contents and add the <code>soad</code> executable to your system's PATH.</p>"},{"location":"components/cli.html#configuration","title":"Configuration","text":"<p>The CLI stores credentials and settings in <code>.config.json</code> in the current directory. It supports:</p> <ul> <li>Encrypted token storage (with passphrase)</li> <li>Multiple project folders with isolated config</li> </ul>"},{"location":"components/cli.html#usage","title":"Usage","text":"<p>To use the S\u00d8AD CLI, open your terminal and run the following command:</p> <pre><code>soad [command] [options]\n</code></pre> <pre><code>~ \u276f soad --help\nA CLI for S\u00d8AD Online IDE\n\nUsage:\n  soad [command]\n\nAvailable Commands:\n  changed     List transactions that have local changes\n  clean       Delete all files in the src directory\n  compare     Compare local and server version using Meld\n  completion  Generate the autocompletion script for the specified shell\n  config      Manage CLI configuration\n  create      Create a new transaction remotely and pull it locally\n  delete      Delete a transaction from the server and local copy\n  deploy      Copy local source code to deployment folder using original S\u00d8AD structure\n  help        Help about any command\n  list        List available transactions\n  login       Authenticate and save token\n  pull        Pull one or all transactions from the S\u00d8AD server\n  push        Push a transaction to the S\u00d8AD server\n  push-all    Push all locally changed transactions (safely)\n  push-remote Push selected transactions to another S\u00d8AD server with a specific version\n  release     Create a new release snapshot on remote server\n  rollback    Rollback server to a specific release version\n\nFlags:\n  -h, --help            help for soad\n      --insecure        Allow insecure server connections when using SSL\n      --server string   Base URL of S\u00d8AD Server (default \"http://localhost:8080\")\n\nUse \"soad [command] --help\" for more information about a command.\n</code></pre>"},{"location":"components/cli.html#commands","title":"Commands","text":""},{"location":"components/cli.html#login","title":"<code>login</code>","text":"<p>Login to S\u00d8AD Server. You need to login first before you can run any command.</p> <pre><code>soad login [options]\n</code></pre>"},{"location":"components/cli.html#options","title":"Options","text":"<ul> <li><code>--server</code>: Set the server's URL (e.g. https://playground.sufia.online). This option is required.</li> </ul>"},{"location":"components/cli.html#pull","title":"<code>pull</code>","text":"<p>Pulls transactions from the S\u00d8AD Server to your local machine.</p> <pre><code>soad pull [options]\n</code></pre>"},{"location":"components/cli.html#options_1","title":"Options","text":"<ul> <li><code>--all</code>: Pull all transactions from the server.</li> <li><code>--group &lt;group_name&gt; --code &lt;transaction_code&gt;</code>: Pull a specific transaction by its group and code.</li> </ul>"},{"location":"components/cli.html#push","title":"<code>push</code>","text":"<p>Pushes a transaction from your local machine to the S\u00d8AD Server.</p> <pre><code>soad push [options]\n</code></pre>"},{"location":"components/cli.html#options_2","title":"Options","text":"<ul> <li><code>--group &lt;group_name&gt; --code &lt;transaction_code&gt;</code>: Specify the group and code of the transaction.</li> </ul>"},{"location":"components/cli.html#compare","title":"<code>compare</code>","text":"<p>Compare the local version of a transaction with the server version using Meld by default. You can change the comparison tool by setting the <code>diff_tool</code> parameter in the CLI configuration. If Meld or your preferred tool is not in your system PATH, specify its full path in the <code>diff_tool</code> setting.</p> <pre><code>soad compare [options]\n</code></pre>"},{"location":"components/cli.html#options_3","title":"Options","text":"<ul> <li><code>--group &lt;group_name&gt; --code &lt;transaction_code&gt;</code>: Specify the group and code of the transaction to compare.</li> </ul>"},{"location":"components/cli.html#example","title":"Example","text":"<pre><code>soad compare --group &lt;group_name&gt; --code &lt;transaction_code&gt;\n\n# Set the diff tool to use for comparison (e.g., Meld)\nsoad config set diff_tool \"/path/to/meld\"\n\n# Set the diff tool to use for comparison (e.g., Visual Studio Code)\nsoad config set diff_tool \"code --diff\"\n</code></pre>"},{"location":"components/cli.html#help","title":"<code>help</code>","text":"<p>Get help for a specific command.</p> <pre><code>soad [command] --help\n</code></pre>"},{"location":"components/cli.html#options_4","title":"Options","text":"<ul> <li><code>command</code>: The specific command you want help with (e.g., <code>pull</code>, <code>push</code>).</li> </ul>"},{"location":"components/cli.html#examples","title":"Examples","text":"<ul> <li>Pull all transactions:   <pre><code>soad pull --all\nsoad pull &lt;group_name&gt;/*\n</code></pre></li> <li>Pull a specific transaction:   <pre><code>soad pull --group &lt;group_name&gt; --code &lt;transaction_code&gt;\nsoad pull &lt;group_name&gt;/&lt;transaction_code&gt;\n</code></pre></li> <li>Push a transaction to the server:   <pre><code>soad push --group &lt;group_name&gt; --code &lt;transaction_code&gt;\nsoad push &lt;group_name&gt;/&lt;transaction_code&gt;\n</code></pre></li> </ul>"},{"location":"components/cli.html#deployment-releases","title":"Deployment &amp; Releases","text":"<pre><code># Create a new release\nsoad release --version \"v1.0\" --notes \"Initial release\"\n\n# Rollback to a specific release version or \n# latest release if no version is specified\nsoad rollback --version \"v1.0\"\n\n# List all releases\nsoad release --list \n</code></pre> <ul> <li>Releases are snapshots of your transactions, allowing you to manage versions and rollbacks effectively.</li> <li>Releases are saved server-side with metadata and checksums.</li> <li>Rollback restores all transactions to a named release version.</li> </ul> <p>Note</p> <p>Occasionally, pushing a transaction might fail due to security restrictions such as those enforced by a Web Application Firewall (WAF). If this happens, try using the <code>--zip</code> option when pushing. This will compress the transaction into a zip file before uploading, which can help bypass WAF limitations. Using zip option might be faster sometimes, especially for larger transactions.</p>"},{"location":"components/database.html","title":"Database","text":"<p>S\u00d8AD Online IDE provides a built-in Database module that allows developers to manage database schema and interact with data directly within the IDE\u2014without needing external tools or installations.</p> <p>This module is useful for inspecting tables, writing SQL queries, and performing schema modifications in real-time while building your S\u00d8AD application.</p>"},{"location":"components/database.html#list-of-tables","title":"List of Tables","text":"<p>To display the list of tables, select the Database menu from the main navigation in the S\u00d8AD Online IDE. This opens the schema browser, where all tables in the current database are listed.</p> <p>A search bar at the top of the panel allows you to quickly locate a specific table by name. Just type part of the table name, and matching results will appear instantly\u2014making navigation efficient even in large schemas.</p> <p>The Action button next to a table type provides several management options, including:</p> <p></p> <ul> <li>View Data - Display the records stored in the selected table.</li> <li>View Table - Show the table structure, including columns and data types.</li> <li>Clone Table - Create a duplicate of the selected table.</li> <li>Generate CRUD - Automatically generate Create, Read, Update, and Delete operations for the table.</li> <li>Drop Table - Permanently delete the table from the database.</li> </ul>"},{"location":"components/database.html#create-new-table","title":"Create New Table","text":"<p>To create a new table, click on the Create New Table button located at the top right of the screen. This opens a modal window where you can define the table structure.</p> <p></p> Field Description Example Table Name Name of the table (max 64 characters) <code>hr_employee</code> Table Comments Useful description for table Employee Personal Record Column Name Column Name (max 64 characters) <code>staff_no</code> Data Type Data Type (Refer below) VARCHAR Length Length of data in integer (only applicable to type VARCHAR and DECIMAL) 20 NULL Column can accept NULL value or not NOT NULL Index Column is either PRIMARY (primary key), UNIQUE (unique index), INDEX (normal index) or NONE (normal column) Auto Inc Column is auto increment or not (only applicable to type NUMBER and key PRIMARY) Comment Useful description of column Staff No <ul> <li> <p>To add more columns, click the {+} button.</p> </li> <li> <p>To delete a column, click the {-} button.</p> </li> <li> <p>To move a column to the top, click the {arrow up} button.</p> </li> <li> <p>To move a column to the bottom, click the {arrow down} button.</p> </li> </ul>"},{"location":"components/database.html#supported-data-types","title":"Supported Data Types","text":"<p>The following data types are available:</p> <ul> <li><code>VARCHAR</code></li> <li><code>TEXT</code></li> <li><code>MEDIUMTEXT</code></li> <li><code>INT</code></li> <li><code>BIGINT</code></li> <li><code>BIT</code></li> <li><code>DECIMAL</code></li> <li><code>DATE</code></li> <li><code>DATETIME</code></li> <li><code>TIME</code></li> <li><code>BLOB</code></li> <li><code>MEDIUMBLOB</code></li> </ul>"},{"location":"components/database.html#sad-conventions","title":"S\u00d8AD Conventions","text":"<p>S\u00d8AD has a special treatment for handling BLOB (Binary Large Object) data types, which are used to store large binary files such as images or documents. When creating a BLOB column, S\u00d8AD automatically generates three related columns:</p> <ul> <li>Column to store the binary data (BLOB)</li> <li>Column to store the file name (VARCHAR)</li> <li>Column to store the file type (VARCHAR)</li> </ul> <p>This convention simplifies file handling in the application, allowing you to easily manage file uploads and retrievals. For example, if you create a column named <code>resume</code>, S\u00d8AD will automatically create three columns: <code>resume</code>, <code>resume_fn</code> (for file name), and <code>resume_ft</code> (for file type).</p> <p>Best Practice</p> <p>Use prefix for table name for easy maintenance. Normally the group name is a good candidate for prefix name e.g. prefix HR Group's table with <code>hr_</code>.</p> <p>S\u00d8AD Convention</p> <p>Every table must have a primary key column named <code>id</code>. A model class representing the table will be generated with class name same with table name (ORM) e.g. table <code>person</code> will have a correspondent class <code>Person</code>. Refer to the Data Type Mapping section below for details on how MySQL data types are mapped to Java types.</p>"},{"location":"components/database.html#data-type-mapping","title":"Data Type Mapping","text":"<p>Below is a reference table mapping common MySQL data types to the Java types used in S\u00d8AD:</p> MySQL Data Type Java Type VARCHAR String TEXT String MEDIUMTEXT String INT Integer BIGINT java.math.BigInteger BIT Boolean DECIMAL java.math.BigDecimal DATE java.sql.Date DATETIME java.time.LocalDateTime TIME java.sql.Time BLOB byte[] MEDIUMBLOB byte[]"},{"location":"components/database.html#alter-table","title":"Alter Table","text":"<p>To edit an existing table, click on the View Table link and click Edit Table button at the bottom. The table structure will be displayed, allowing modifications to the table structure.</p> <p></p> <ul> <li> <p>To add a new column, click the {+} symbol.</p> </li> <li> <p>To delete an unnecessary column, click the {-} symbol.</p> </li> <li> <p>To modify a column, click the pencil icon. This allows editing of the data type, length, nullability, and comments.</p> </li> </ul> <p>After making the necessary changes, click Execute on the right side of the table to apply the modifications.</p>"},{"location":"components/database.html#clone-table","title":"Clone Table","text":"<p>To clone a table, click on the Clone Table link as below:</p> <p></p> <p>The Clone Table feature allows users to duplicate an existing table along with its structure and data. This is useful for creating backups, testing modifications, or setting up similar tables without manually recreating them.</p> <p>When cloning a table, the system will generate a new table with the same columns, data types, and constraints as the original table. Users can modify the cloned table as needed after creation.</p>"},{"location":"components/database.html#generate-crud","title":"Generate CRUD","text":"<p>To Generate CRUD functions, click on the Generate CRUD link as below:</p> <p></p> <p>After filling in the Group, Code, and Name, it will generate a new Transaction with listing, create, update, and delete operations for the table. This feature automates the creation of basic CRUD (Create, Read, Update, Delete) operations for the selected table.</p> <p></p>"},{"location":"components/database.html#drop-table","title":"Drop Table","text":"<p>To drop a table, click on the Drop Table link as below:</p> <p></p> <p>Before dropping a table, ensure it is no longer needed, as this action cannot be undone. Use this feature with caution to avoid accidental data loss.</p>"},{"location":"components/database.html#introspect","title":"Introspect","text":"<p>Click on the Introspect link as below to trigger introspection process:</p> <p></p> <p>The Introspect feature in S\u00d8AD automatically generates Java classes from database tables by reading the table structure. This process runs automatically and ensures that the generated files reflect the latest database scheme. </p> <p>However, if any modifications are made directly to the database outside of S\u00d8AD, it will not detect these changes. Therefore, manual introspection is necessary to synchronize the system with the updated table structure, similar to restarting a server.</p>"},{"location":"components/database.html#open-query","title":"Open Query","text":"<p>Open Query function allows users to interact with the database by retrieving, adding, updating, or deleting data.</p> <p>To open the SQL query editor, click on the Open Query button located at the top right of the Database module. This opens a text area where you can write and execute SQL queries directly against your database.</p> <p></p>"},{"location":"components/database.html#common-sql-operations-supported","title":"Common SQL Operations Supported","text":"<p>1. Retrieving Data - Use the <code>SELECT</code> statement to fetch record form the table. <pre><code>SELECT * FROM table_name;\n</code></pre></p> <p>2. Inserting Data - Use the <code>INSERT INTO</code> statement to add new records. <pre><code>INSERT INTO table_name (column1, column2) VALUES (value1, value2);\n</code></pre></p> <p>3. Updating Data - Modify existing records using the <code>UPDATE</code> statement. <pre><code>UPDATE table_name SET column1 = value1 WHERE condition;\n</code></pre></p> <p>4. Deleting Data - Remove specific records using the <code>DELETE</code> statement. <pre><code>DELETE FROM table_name WHERE condition;\n</code></pre></p> <p>By selecting and executing a query, users can see the results displayed in the table at the bottom of the screen.</p>"},{"location":"components/file-manager.html","title":"File Manager","text":"<p>The File Manager allows developers to manage the file structure of their application directly within the IDE. It provides access to all folders and files located under the <code>/webapp/</code> directory, which includes assets, templates, and static resources used by the application.</p> <p>You can use it for uploading and organizing additional files such as stylesheets, JavaScript scripts, images, and documents\u2014without requiring direct access to the file system or deployment infrastructure.</p> <p></p>"},{"location":"components/file-manager.html#overview-of-features","title":"Overview of Features","text":""},{"location":"components/file-manager.html#1-directory-navigation","title":"1. Directory Navigation","text":"<ul> <li>Browse through the <code>/webapp</code> folder and its subdirectories.</li> <li>Expand folders to view their contents and file structure.</li> <li>Easily locate and manage static resources like HTML, CSS, or JS files.</li> </ul>"},{"location":"components/file-manager.html#2-file-upload","title":"2. File Upload","text":"<ul> <li>Upload new files (e.g., <code>.css</code>, <code>.js</code>, <code>.jpg</code>, <code>.pdf</code>, etc.) to any directory.</li> <li>Supports multiple uploads in one action.</li> <li>Uploaded files are immediately accessible to the application through relative URLs.</li> </ul>"},{"location":"components/file-manager.html#3-file-management","title":"3. File Management","text":"<ul> <li>Rename or delete existing files.</li> <li>Create new folders or move files between directories.</li> <li>View or edit plain text files such as <code>.html</code>, <code>.txt</code>, <code>.json</code>, or <code>.xml</code>.</li> </ul>"},{"location":"components/file-manager.html#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Uploading Assets: Add custom stylesheets, JavaScript libraries, or images used in HTML templates.</li> <li>Serving Static HTML: Store and serve standalone <code>.html</code> files outside the transaction system.</li> <li>Documentation: Upload terms of use, privacy policy, or help documents as downloadable resources.</li> <li>Custom Fonts or Icons: Add font packs or SVG icon files as needed by your design.</li> </ul> <p>Did You Know?</p>"},{"location":"components/file-manager.html#zip-file-upload-extraction","title":"ZIP File Upload &amp; Extraction","text":"<p>When you upload a ZIP archive through the File Manager, it will appear in the file list with an Unzip button next to it. Clicking this button will extract the contents of the ZIP file directly into the current folder.</p> <p>This feature is useful for:</p> <ul> <li>Uploading entire directories of assets (e.g., CSS frameworks, JavaScript plugins).</li> <li>Migrating static sites or bulk resource files.</li> <li>Quickly setting up new asset packs without manually uploading individual files.</li> </ul> <p>After extraction, all files and folders inside the ZIP will be immediately accessible under the current directory in /webapp.</p>"},{"location":"components/overview.html","title":"S\u00d8AD Online IDE","text":"<p>The S\u00d8AD Online IDE is a web-based development environment tailored specifically for building applications using the S\u00d8AD Framework. It simplifies the development process by providing integrated tools that let you work with transactions, models, server logs, and static assets\u2014all from your browser.</p> <p>Whether you're prototyping or maintaining a full-scale enterprise app, the S\u00d8AD Online IDE eliminates the need to set up a local development environment, making development faster and more accessible.</p>"},{"location":"components/overview.html#features","title":"Features","text":""},{"location":"components/overview.html#1-database-editor","title":"1. Database Editor","text":"<p>The Database module acts as an online schema and data editor for your application:</p> <ul> <li>Create, alter, or drop tables using a visual interface or raw SQL queries.</li> <li>Run SQL statements directly to explore or manipulate your data.</li> <li>Any table created or modified here will automatically generate (or update) the corresponding ActiveJDBC Model class, ready for use in your transactions.</li> </ul>"},{"location":"components/overview.html#2-transaction-editor","title":"2. Transaction Editor","text":"<p>The Transaction editor is a central feature of the IDE. It allows you to:</p> <ul> <li>Create new transactions via a guided modal that prompts for group, code, and transaction name.</li> <li>Automatically generate folder and file structures based on S\u00d8AD conventions.</li> <li>Edit existing transaction logic with a built-in editor that supports:</li> <li>Syntax highlighting</li> <li>Code snippets for common patterns</li> <li>Helper functions and simple auto-completion</li> </ul> <p>This ensures that developers can quickly build and modify controllers (transactions) without leaving the browser.</p>"},{"location":"components/overview.html#3-server-log-viewer","title":"3. Server Log Viewer","text":"<p>This feature provides real-time access to the embedded application server's logs:</p> <ul> <li>Trace log statements and logging output from your transaction code.</li> <li>View errors, stack traces, and debugging information.</li> <li>Download logs for offline review or audit purposes.</li> </ul> <p>This tool is essential for diagnosing issues or confirming application behavior without restarting or redeploying.</p>"},{"location":"components/overview.html#4-file-manager","title":"4. File Manager","text":"<p>The built-in file manager lets you manage assets within your project:</p> <ul> <li>Navigate directories and view/download files.</li> <li>Upload files such as images, CSS, JavaScript, or downloadable assets.</li> <li>Organize your static resources as needed for frontend rendering.</li> </ul> <p>The file manager simplifies static asset handling in a server-side rendered environment, keeping everything you need accessible in one place.</p> <p>The S\u00d8AD Online IDE helps you with the framework\u2019s convention-based approach. It streamlines common tasks and gives developers everything they need to build, test, and debug\u2014all from the browser.</p>"},{"location":"components/server_log.html","title":"Server Log Viewer","text":"<p>S\u00d8AD Online IDE includes a built-in Server Log Viewer that allows developers to monitor application behavior, debug issues, and trace transaction flow in real time. It provides a clear view into the internal server activity during application runtime.</p>"},{"location":"components/server_log.html#log-panel-overview","title":"Log Panel Overview","text":"<p>The Server Log Viewer can be accessed from the Server Log tab in the top navigation menu of the S\u00d8AD Online IDE.</p> <p></p>"},{"location":"components/server_log.html#features","title":"Features","text":"<ul> <li>Live Log View: Displays recent logs, including application events, transaction traces, errors, and log output from transaction code.</li> <li>Line Limit: You can specify how many of the latest lines you want to view. By default, the system shows the last 800 lines.</li> <li>Scroll Support: You can scroll through logs to explore older entries in the current range.</li> <li>Download Full Log: A Download button is available to export the entire log for offline analysis, team sharing, or archival purposes.</li> </ul>"},{"location":"components/server_log.html#use-cases","title":"Use Cases","text":"<ul> <li>Debugging: Trace log output or inspect transaction execution.</li> <li>Monitoring: Track server events, startup information, and servlet activity.</li> <li>Error Analysis: Quickly locate stack traces or failure messages.</li> </ul> <p>The Server Log Viewer is a valuable tool during development, testing, and diagnosing issues without needing to access the file system directly.</p>"},{"location":"components/server_log.html#example-usage","title":"Example Usage","text":"<p>When you run a transaction, any <code>print()</code> statements or logging calls will appear in the Server Log Viewer. This allows you to see real-time output from your transaction code, making it easier to debug and understand application behavior.</p> <pre><code>from sufia.util import Log\n\nclass MyTransaction:\n    def view(self, ctx):\n        Log.info(ctx, \"Starting my transaction\")\n        # Your transaction logic here\n        print(\"This will appear in the server log\")\n        Log.print(ctx, \"Transaction completed successfully\") #same as info()\n</code></pre> <p>Note</p> <p><code>print()</code> statements in your transaction will appear in the server log. However, for more structured and consistent logging, it is recommended to use the <code>Log.info()</code>, <code>Log.debug()</code>, or <code>Log.print()</code> methods.</p> <p>If S\u00d8AD is running in a containerized environment, the <code>print()</code> output cannot be captured by the IDE. Therefore, you should use the <code>Log.info()</code>, <code>Log.debug()</code>, or <code>Log.print()</code> methods, as these work well inside containers.</p>"},{"location":"components/transactions/create-transactions.html","title":"Transaction Editor","text":"<p>The Transaction Editor in S\u00d8AD Online IDE is a central feature that allows you to create, edit, and manage transaction files directly in your browser. A transaction consists of Jython code (controller logic) and associated HTML view templates, which are tightly coupled through S\u00d8AD's convention-based routing system.</p> <p>This editor is designed to streamline development by offering an intuitive interface, syntax highlighting, and automatic file management\u2014all without requiring local development setup.</p> <p>This guide provides step-by-step instructions on how to create a new Transaction using the Transaction Editor. It covers the Transaction creation process, available fields, and an overview of the code editor interface.</p>"},{"location":"components/transactions/create-transactions.html#creating-a-new-transaction","title":"Creating a New Transaction","text":"<p>To create a new Transaction, follow these steps:</p> <ol> <li> <p>Navigate to Home &gt; Application &gt; Open &gt; Transaction &gt; Create New Transaction.</p> </li> <li> <p>Click on Create New Transaction to initiate the process.</p> </li> <li> <p>A modal will appear where you can enter the Transaction details.</p> </li> </ol> <p></p> <p>Create New Transaction</p>"},{"location":"components/transactions/create-transactions.html#transaction-details","title":"Transaction Details","text":"<p>Upon initiating the creation of a new Transaction, a modal window will be displayed:</p> <p></p> <p>Create New Transaction Modal</p>"},{"location":"components/transactions/create-transactions.html#transaction-fields","title":"Transaction Fields","text":"<ul> <li> <p>Group Transaction   This field allows you to categorize the Transaction into a specific folder for better organization.</p> </li> <li> <p>Code Transaction   The Code Transaction serves as a unique identifier for the Transaction, facilitating efficient tracking and management.</p> </li> <li> <p>Named Transaction   This field is used to specify the name of the Transaction.</p> </li> </ul> <p>Once the details are filled in, confirm and proceed to create the Transaction.</p>"},{"location":"components/transactions/create-transactions.html#code-editor-and-interface","title":"Code Editor and Interface","text":"<p>After successfully creating the Transaction, the Transaction code will be listed in the Transaction list explorer.</p> <p>Click on the Transaction code to open the Transaction in Code Editor Interface:</p> <p></p> <p>Code Editor Interface</p>"},{"location":"components/transactions/create-transactions.html#code-editor-buttons-and-functions","title":"Code Editor Buttons and Functions","text":""},{"location":"components/transactions/create-transactions.html#primary-functions","title":"Primary Functions","text":"<p>The code editor provides a range of options to manage and develop the Transaction:</p> <ol> <li> <p>Create New Transaction    Initiates the creation of another new Transaction.</p> </li> <li> <p>Save    Saves the Transaction or the current code progress.</p> </li> <li> <p>Add New View    Allows users to add an additional view (HTML) to the Transaction.</p> </li> <li> <p>Fullscreen    Expands the code editor to full-screen mode for an enhanced viewing experience.</p> </li> <li> <p>Run    Executes the Transaction and displays it in a new tab.</p> </li> </ol>"},{"location":"components/transactions/create-transactions.html#additional-options-hamburger-menu","title":"Additional Options - Hamburger Menu","text":"<p>The Hamburger Button provides access to more features:</p> <p></p> <p>Hamburger Button</p> <ul> <li>Clone: Duplicates the Transaction for easier modifications.</li> <li>Close: Closes the currently opened Transaction.</li> <li>Delete: Permanently removes the Transaction.</li> <li>Help: Opens the documentation for guidance on using Transactions.</li> </ul>"},{"location":"components/transactions/create-transactions.html#code-editor-sections","title":"Code Editor Sections","text":"<p>The Code Editor is divided into two main sections:</p>"},{"location":"components/transactions/create-transactions.html#1-transaction-code-editor-backend-no7","title":"1. Transaction Code Editor (Backend) No.7","text":"<p>This section is dedicated to the backend logic of the Transaction.</p> <ul> <li>The backend logic includes data processing, database operations, and business logic.</li> <li>The language used is Jython.</li> <li>Code snippets and templates are available to help developers quickly implement common functionalities (e.g. Model data setter).</li> </ul>"},{"location":"components/transactions/create-transactions.html#2-transaction-code-editor-frontend-no8","title":"2. Transaction Code Editor (Frontend) No.8","text":"<p>This section is dedicated to the frontend logic of the Transaction.</p> <ul> <li>The frontend logic includes HTML, CSS, and JavaScript.</li> </ul>"},{"location":"components/transactions/versioning.html","title":"Versioning in S\u00d8AD","text":"<p>S\u00d8AD includes a built-in versioning system that automatically tracks changes to each transaction. Every time a transaction is modified and saved, a new version is recorded. This mechanism acts as a lightweight backup and change history, making it easy to review past edits or recover from accidental overwrites.</p> <p>In addition to version tracking, S\u00d8AD provides a Diff Mode feature that allows developers to compare different versions of a transaction side by side. This helps during code reviews, debugging, or identifying when and how changes were introduced.</p>"},{"location":"components/transactions/versioning.html#accessing-version-history","title":"Accessing Version History","text":"<p>Version management is integrated into the Transaction Panel within the S\u00d8AD Online IDE. Here\u2019s how it works:</p>"},{"location":"components/transactions/versioning.html#transaction-panel-overview","title":"Transaction Panel Overview","text":"<p>The Transaction Panel shows the current transaction list and provides access to versioning features.</p> <p></p> <p>Transaction Panel</p> <ul> <li>Last Updated: Located at the bottom-left of the panel. Displays the most recent modification timestamp.</li> <li>Version Button: Located at the bottom-right. Clicking this button opens the Versioning Panel, which lists all available versions of the current transaction.</li> </ul>"},{"location":"components/transactions/versioning.html#working-with-the-versioning-panel","title":"Working with the Versioning Panel","text":"<p>The Versioning Panel offers a chronological list of all saved versions of a transaction, including metadata like timestamps and author names.</p> <p></p> <p>Transaction Panel</p>"},{"location":"components/transactions/versioning.html#key-components","title":"Key Components","text":"<ol> <li> <p>Version List</p> <ul> <li>Displays versions with associated date and author.</li> <li>Click a version to preview its contents.</li> </ul> </li> <li> <p>All Versions</p> <ul> <li>Button located at the top-right of the Versioning Panel.</li> <li>Displays a complete list of all stored versions for the current transaction. By default, it shows versions with label only.</li> </ul> </li> <li> <p>Diff Mode</p> <ul> <li>Also accessible via a button at the top-right of the panel.</li> <li>Allows you to select two versions for side-by-side comparison.</li> </ul> </li> </ol>"},{"location":"components/transactions/versioning.html#using-diff-mode","title":"Using Diff Mode","text":"<p>Diff Mode is designed to help developers visually compare two versions of the same transaction.</p> <p></p> <p>Diff Mode</p>"},{"location":"components/transactions/versioning.html#how-diff-mode-works","title":"How Diff Mode Works:","text":"<ul> <li>Displays two versions side by side for direct comparison.</li> <li>Highlights differences in teal color, making it easy to spot changes.</li> <li>The current version is displayed on the left side of the panel.</li> </ul>"},{"location":"framework/api.html","title":"Runtime API","text":""},{"location":"framework/api.html#ctx-the-webcontext-object","title":"<code>ctx</code> \u2014 The WebContext Object","text":"<p>In S\u00d8AD, every transaction method receives a single parameter named <code>ctx</code>, which stands for WebContext. This object encapsulates all information and utility methods relevant to the current request lifecycle.</p> <p>The <code>ctx</code> object gives developers access to:</p> <ul> <li>Session management</li> <li>Input parameters and headers</li> <li>Output data for views (via <code>ctx.output</code>)</li> <li>Redirection, file upload handling, and more</li> </ul> <p>The <code>ctx</code> object is automatically passed into each method of your transaction class (e.g., <code>view(self, ctx)</code>, <code>submit(self, ctx)</code>) and serves as the primary interface for handling request-response logic.</p>"},{"location":"framework/api.html#available-methods-and-properties","title":"Available Methods and Properties","text":"Feature Description <code>ctx.getRequest()</code> Returns the underlying <code>HttpServletRequest</code> object. Use this to get request parameters. <code>ctx.getResponse()</code> Returns the <code>HttpServletResponse</code> object. <code>ctx.output</code> A map used to pass values into the view layer (used by Handlebars templates). <code>ctx.go_to</code> The response object that will be rendered (e.g., <code>render.as_view(...)</code>). <code>ctx.ctxPath</code> The context path of the deployed application (useful for building URLs). <code>ctx.getAppName()</code> Returns the name of the application. <code>ctx.getGroup()</code> Returns the group name of the current transaction. <code>ctx.getCode()</code> Returns the name of the current transaction code. <code>ctx.getMethod()</code> Returns the HTTP method used for the request (GET, POST, etc.)."},{"location":"framework/api.html#example-usage","title":"Example Usage","text":"<pre><code>def view(self, ctx):\n    request = ctx.getRequest()\n    user_id = request.getParameter(\"id\")\n    ctx.output[\"user\"] = User.findById(user_id)\n    ctx.go_to = render.as_view(ctx, \"profile\")\n</code></pre> <pre><code>def login(self, ctx):\n    request = ctx.getRequest()\n    username = request.getParameter(\"username\")\n    password = request.getParameter(\"password\")\n\n    if Auth.validate(username, password):\n        session = ctx.getRequest().getSession(True)\n        session.setAttribute(\"user\", username)\n        ctx.go_to = \"%s/t/dashboard/home\" % ctx.ctxPath\n    else:\n        ctx.output[\"error\"] = \"Invalid credentials\"\n        ctx.go_to = render.as_view(ctx, \"login\")\n</code></pre>"},{"location":"framework/api.html#integration-with-view","title":"Integration with View","text":"<p>The <code>ctx.output</code> map is what feeds data into the Handlebars views.</p> <pre><code>ctx.output[\"user_name\"] = \"Borhan\"\nctx.go_to = render.as_view(ctx, \"welcome\")\n</code></pre> <p>In your HTML:</p> <pre><code>&lt;h1&gt;Welcome, {{user_name}}&lt;/h1&gt;\n</code></pre>"},{"location":"framework/api.html#how-to-access-ctx-in-a-servlet-filter","title":"How to Access ctx in a Servlet Filter","text":"<p>If you need to access the ctx object from within a component like a Servlet Filter, you can retrieve it directly from the request attribute.</p> <p>Use the following method to get the ctx object:</p> <pre><code>ctx = request.getAttribute(\"soadContext\")\n</code></pre>"},{"location":"framework/api.html#render-response-output-utilities","title":"<code>render</code> \u2014 Response Output Utilities","text":"<p>The <code>render</code> module defines how a transaction responds to a request. These utilities help return HTML, JSON, string, files, or binary content from the server. Each render method should be assigned to <code>ctx.go_to</code>.</p>"},{"location":"framework/api.html#1-renderas_view","title":"1. <code>render.as_view()</code>","text":"<p>Renders a Handlebars HTML template as the response. This is the most common way to return a page to the browser in S\u00d8AD.</p> <p>This function uses the view name to locate the appropriate <code>.html</code> file within the transaction's corresponding <code>_group</code> folder. If not specified, it defaults to the current transaction's group and code.</p> <p>Function Signature: <pre><code>render.as_view(ctx, view, group=None, code=None, loc=None, file=None, combine_map=None)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>ctx</code>: The transaction context object.</li> <li><code>view</code> (str): The name of the view (HTML template) to render.</li> <li><code>group</code> (str, optional): The group/module name. Defaults to the current transaction\u2019s group.</li> <li><code>code</code> (str, optional): The transaction code. Defaults to the current transaction.</li> <li><code>loc</code> (str, optional): Alternative path location override.</li> <li><code>file</code> (str, optional): Direct path to an HTML file.</li> <li><code>combine_map</code> (Map, optional): Extra data to merge into the Handlebars context.</li> </ul> <p>Basic usage:</p> <pre><code>ctx.output[\"title\"] = \"Welcome\"\nctx.go_to = render.as_view(ctx, \"home\")\n</code></pre> <p>This will render <code>_home/home.html</code> and pass <code>title</code> as a Handlebars variable.</p> <p>Render from another transaction group:</p> <pre><code>ctx.go_to = render.as_view(ctx, \"register\", group=\"auth\", code=\"signup\")\n</code></pre> <p>This will look for <code>_auth/signup/register.html</code>.</p>"},{"location":"framework/api.html#2-renderas_json","title":"2. <code>render.as_json()</code>","text":"<p>Returns a JSON-formatted response to the client. Useful for AJAX or API-style interactions.</p> <p>Function Signature: <pre><code>render.as_json(ctx, obj=None)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>obj</code> (optional): a dictionary or serializable object to return as JSON. If not provided, <code>ctx.output</code> is used.</li> </ul> <p>Basic usage: <pre><code>ctx.output[\"message\"] = \"Operation successful\"\nctx.go_to = render.as_json(ctx)\n</code></pre></p> <pre><code>data = {\"status\": \"success\", \"user\": {\"id\": 1, \"name\": \"Borhan\"}}\nctx.go_to = render.as_json(ctx, data)\n</code></pre> <p>Example with ActiveJDBC model:</p> <pre><code>users = Tb_user.findAll().toMaps()\nctx.go_to = render.as_json(ctx, users)\n</code></pre>"},{"location":"framework/api.html#3-renderas_html","title":"3. <code>render.as_html()</code>","text":"<p>Returns a raw HTML file directly from the filesystem, bypassing the Handlebars rendering engine. Ideal for serving pre-rendered static content.</p> <p>Function Signature: <pre><code>render.as_html(ctx, code=None, loc=None)\n</code></pre> Parameters:</p> <ul> <li><code>code</code> (str, optional): The code of the HTML file to render. If not provided, it defaults to the current transaction code.</li> <li><code>loc</code> (str, optional): Alternative path location override.</li> </ul> <p>Basic usage: <pre><code>ctx.go_to = render.as_html(ctx, \"dashboard\")\n</code></pre></p> <p>Render from a custom folder:</p> <pre><code>ctx.go_to = render.as_html(ctx, code=\"faq\", loc=\"/web/static/pages\")\n</code></pre> <p>This will look for <code>/web/static/pages/&lt;app_name&gt;/&lt;group&gt;/faq.html</code></p>"},{"location":"framework/api.html#4-renderas_string","title":"4. <code>render.as_string()</code>","text":"<p>Returns raw string content (HTML or plain text) directly to the browser. Bypasses any view engine or file lookup.</p> <p>Use case: Error messages, short inline content, quick HTML feedback.</p> <p>Function Signature: <pre><code>render.as_string(ctx, text)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code>: The string content to return. This can be HTML or plain text.</li> </ul> <p>Example: <pre><code>ctx.go_to = render.as_string(ctx, \"Access Denied\")\n</code></pre></p>"},{"location":"framework/api.html#5-renderas_file","title":"5. <code>render.as_file()</code>","text":"<p>Sends a file to the client for download or inline viewing.</p> <p>Function Signature: <pre><code>render.as_file(ctx, file, content_type, filename=None, attachment=True)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>file</code>: a Java <code>File</code> object or file path (string)</li> <li><code>content_type</code>: MIME type (e.g., <code>application/pdf</code>, <code>image/png</code>)</li> <li><code>filename</code> (optional): custom filename for the download</li> <li><code>attachment</code> (bool): if <code>True</code>, forces download; if <code>False</code>, displays inline. Default is <code>True</code>.</li> </ul> <p>Example:</p> <pre><code>ctx.go_to = render.as_file(ctx, reportFile, \"application/pdf\", filename=\"report.pdf\", attachment=True)\n</code></pre> <p>Display an image:</p> <pre><code>ctx.go_to = render.as_file(ctx, \"/path/to/image.png\", \"image/png\")\n</code></pre>"},{"location":"framework/api.html#6-renderas_blob","title":"6. <code>render.as_blob()</code>","text":"<p>Returns raw binary content such as images, audio, or PDF streams.</p> <p>Use case: Useful when file content is stored in memory (e.g., in a database blob).</p> <p>Function Signature: <pre><code>render.as_blob(ctx, data, content_type, filename=None, attachment=True)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code>: binary data (bytes) to return</li> <li><code>content_type</code>: MIME type (e.g., <code>image/png</code>, <code>application/pdf</code>)</li> <li><code>filename</code> (optional): name of the file to suggest for download</li> <li><code>attachment</code> (bool): if <code>True</code>, forces download; if <code>False</code>, displays inline. Default is <code>True</code>.</li> </ul> <p>Example:</p> <pre><code>attachment = Attachment.findById(123)\nfile_content = attachment.get(\"content\")  # Assuming content is stored as blob\nctx.go_to = render.as_blob(ctx, file_content, \"application/pdf\", \"preview.pdf\", attachment=False)\n</code></pre>"},{"location":"framework/api.html#7-renderas_pdf","title":"7. <code>render.as_pdf()</code>","text":"<p>Renders a Handlebars-based HTML template into a PDF document. Can be served inline or as a download. The PDF generation is handled by the Flying Saucer library, which converts well-formed XML (or XHTML) to PDF format.</p> <p>Function Signature: <pre><code>render.as_pdf(ctx, view, group=None, code=None, filename=None, combine_map=None, attachment=False)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>view</code>: the Handlebars view name (required)</li> <li><code>group</code>: the transaction group name (optional, defaults to current group)</li> <li><code>code</code>: the transaction code (optional, defaults to current code)</li> <li><code>filename</code>: name of the PDF file returned to client</li> <li><code>attachment</code>: if <code>True</code>, triggers download</li> </ul> <p>Example:</p> report.py<pre><code>ctx.output[\"attendance\"] = Attendance.findAll()\nctx.output[\"date\"] = \"2023-10-01\"\nctx.go_to = render.as_pdf(ctx, \"report\")\n</code></pre> report.html<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;PDF Report&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Attendance Report&lt;/h1&gt;\n    &lt;p&gt;Date: {{date}}&lt;/p&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Name&lt;/th&gt;\n            &lt;th&gt;Status&lt;/th&gt;\n        &lt;/tr&gt;\n        {{#each attendance}}\n        &lt;tr&gt;\n            &lt;td&gt;{{name}}&lt;/td&gt;\n            &lt;td&gt;{{status}}&lt;/td&gt;\n        &lt;/tr&gt;\n        {{/each}}\n    &lt;/table&gt;\n    &lt;p&gt;End of Report&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"framework/architecture.html","title":"Architecture","text":""},{"location":"framework/architecture.html#mvc","title":"MVC","text":"<p>S\u00d8AD Framework is based on the well-known Model-View-Controller (MVC) pattern, which helps separate application concerns:</p> <ul> <li>Model: Database interaction is handled using ActiveJDBC, which allows for POJO-style models mapped directly from database tables. These models are automatically generated at startup.</li> <li>View: Presentation logic is written in HTML and rendered using handlebars.java, a powerful templating engine that integrates seamlessly with Java.</li> <li>Controller (Transaction): Instead of the traditional term \"controller,\" S\u00d8AD uses the term Transaction to represent controller logic. Transactions are written in Jython, allowing Pythonic syntax while leveraging the power of Java underneath.</li> </ul>"},{"location":"framework/architecture.html#system-architecture","title":"System Architecture","text":"<p>S\u00d8AD System Architecture</p> <p>The architecture diagram shows the internal structure of the S\u00d8AD Framework. Incoming HTTP requests are routed through a Transaction Manager, which maps the request URL to a corresponding Jython transaction file. The transaction executes business logic, interacts with the Model (via ActiveJDBC), and prepares a response context (<code>ctx.output</code>). This context is then passed to the View layer where Handlebars templates generate the final HTML output.</p> <p>Key components:</p> <ul> <li>Embedded Application Server</li> <li>Java Servlet API</li> <li>Jython Runtime</li> <li>ActiveJDBC for ORM</li> <li>Handlebars.java for templating</li> <li>Pre-bundled static assets (CSS, JS, HTML)</li> </ul>"},{"location":"framework/base.html","title":"S\u00d8AD Base","text":"<p>S\u00d8AD Base provides foundational features to jumpstart enterprise web applications.</p>"},{"location":"framework/base.html#built-in-modules","title":"Built-in Modules","text":"<ul> <li>User Management: Create, update, and manage users.</li> <li>Role Management: Assign roles to users and define their scope.</li> <li>Menu Management: Dynamic menu system with visibility control.</li> <li>Access Control: Permission-based routing and visibility.</li> <li>Login/Logout: Built-in authentication cycle.</li> <li>Dashboard: Default home with placeholders for KPIs and user info.</li> </ul> <p>These modules serve as a starting point and can be extended or replaced based on your application needs.</p>"},{"location":"framework/buildingblocks.html","title":"Building Blocks","text":""},{"location":"framework/buildingblocks.html#jython","title":"Jython","text":"<p>Jython is a Java implementation of Python. It allows developers to write Python code that interacts with Java libraries. In S\u00d8AD, all Transactions (controller logic) are written in Jython.</p>"},{"location":"framework/buildingblocks.html#mysql","title":"MySQL","text":"<p>MySQL is the default database used in S\u00d8AD, chosen for its reliability, performance, and community support. However, S\u00d8AD supports any RDBMS with a JDBC driver.</p>"},{"location":"framework/buildingblocks.html#activejdbc","title":"ActiveJDBC","text":"<p>ActiveJDBC is a Java-based ORM that follows the Active Record pattern. It automatically maps database tables to model classes and includes powerful query methods such as <code>findAll()</code>, <code>where()</code>, <code>first()</code>, and <code>saveIt()</code>.</p> <p>S\u00d8AD will auto-generate a Model class for each table on startup or via the introspection API.</p>"},{"location":"framework/buildingblocks.html#handlebarsjava","title":"handlebars.java","text":"<p>handlebars.java is a Java port of the popular Handlebars templating language. It powers the View layer in S\u00d8AD and uses <code>ctx.output</code> (a Java <code>Map</code>) to populate template variables.</p>"},{"location":"framework/buildingblocks.html#html-css-and-javascript","title":"HTML, CSS, and JavaScript","text":"<p>S\u00d8AD comes bundled with carefully selected front-end libraries so developers can hit the ground running. While defaults are provided, the framework remains flexible enough to integrate with other libraries.</p>"},{"location":"framework/buildingblocks.html#bootstrap","title":"bootstrap","text":"<p>Bootstrap is included for responsive design and prebuilt UI components.</p>"},{"location":"framework/buildingblocks.html#htmx","title":"htmx","text":"<p>htmx is included to enable dynamic HTML updates without needing heavy frontend frameworks.</p> <p>Other integrated JavaScript libraries:</p> <ul> <li>jQuery</li> <li>FullCalendar</li> <li>DataTables</li> </ul>"},{"location":"framework/components.html","title":"S\u00d8AD Framework Components","text":""},{"location":"framework/components.html#transaction-the-controller-layer","title":"Transaction: The Controller Layer","text":"<p>Transactions in S\u00d8AD act as the primary entry point for executing business logic in response to a URL request. Each transaction is mapped to a URL using a structured convention:</p> <pre><code>/t/{group}/{code}/{action}\n</code></pre> <ul> <li>Group: A logical folder that represents a module or feature set, used to organize related transactions (e.g., <code>web</code>, <code>admin</code>, <code>user</code>).</li> <li>Code: The transaction identifier, which corresponds to the <code>.py</code> file and class name (e.g., <code>home</code> maps to <code>home.py</code> and <code>Home</code> class).</li> </ul> <p>For instance, the URL <code>/t/web/home</code> translates to:</p> <ul> <li><code>web</code> as the group (folder)</li> <li><code>home</code> as the code (Python file and class name)</li> <li><code>view()</code> as the default method executed, unless an alternative action is specified</li> </ul> <p>This pattern keeps your codebase modular and consistent, supporting better project organization as your application grows.</p> <p>When a client sends a request such as <code>/t/web/home/view</code>, the framework handles it through the following flow:</p> <p></p> <p>S\u00d8AD Transaction Flow</p> <ol> <li>Start a Database Transaction \u2013 The framework initiates a connection using ActiveJDBC's <code>Base.openTransaction()</code>. This ensures all operations are enclosed in a database transaction.</li> <li>Locate the Transaction Class \u2013 The request is mapped to a specific Jython file and class. For example, <code>/t/web/home/view</code> maps to <code>web/home.py</code>, class <code>Home</code>, method <code>view()</code>.</li> <li>Execute Transaction Logic \u2013 The defined method (<code>view(ctx)</code> or any other action) is executed.</li> <li>Exception Handling \u2013 If any exception is thrown during execution, the framework performs a rollback using <code>Base.rollbackTransaction()</code> to ensure no partial writes corrupt the database.</li> <li>Commit and Close \u2013 If execution completes without exception, changes are committed using <code>Base.commitTransaction()</code> and the connection is closed with <code>Base.close()</code>.</li> </ol> <p>This transactional structure ensures data integrity and reduces boilerplate error-handling code for developers.</p> <p>Finally, the transaction method defines how the response should be returned to the client. This is done by setting <code>ctx.go_to</code> to a render method, which determines the output format\u2014typically an HTML view or JSON response.</p> <p>Example:</p> <p>URL: <code>/t/web/home</code></p> <p>File: <code>web/home.py</code> <pre><code>from utils import render\n\nclass Home(Layout):\n    def __init__(self):\n        pass\n\n    def view(self, ctx):\n        ctx.go_to = render.as_view(ctx, \"home\")\n</code></pre></p> <p>This Transaction maps directly to the folder structure:</p> <ul> <li>Python file: <code>web/home.py</code></li> <li>HTML template: <code>web/_home/home.html</code></li> </ul> <p>Convention:</p> <ul> <li><code>Transaction Class</code>: Class name = code name (capitalized)</li> <li><code>Action Method</code>: Any method in the class (e.g., <code>view</code>, <code>submit</code>, <code>register</code>)</li> <li><code>Default Method</code>: <code>view()</code> is called if no action is specified in URL</li> </ul> <p>View (HTML) example: <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;h1&gt;Registration Form&lt;/h1&gt;\n    &lt;form action=\"/t/web/home/register\" method=\"post\"&gt;\n        &lt;input type=\"text\" name=\"email\" /&gt;\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>In this example, submit button will invoke <code>register(ctx)</code> method in <code>Home</code> class.</p> <p>In S\u00d8AD, all methods defined inside a Transaction class are treated as actions, which can be invoked directly through corresponding URLs.</p> <p>Each action method must include the <code>ctx</code> parameter. The framework automatically calls the specified method and injects the current WebContext object, allowing your transaction to handle requests with full access to parameters, session, and others (e.g. HTTP Request &amp; Response).</p>"},{"location":"framework/components.html#transaction-folder-structure","title":"Transaction Folder Structure","text":"<pre><code>web/\n  home.py\n  _home/\n    home.html\n</code></pre> <ul> <li><code>.py</code> file handles logic</li> <li>Folder prefixed with <code>_</code> holds the view templates</li> <li>The main view file must match the transaction name</li> </ul> <p>In addition to the default view, each transaction can define and render multiple views. For example, a Person transaction might have:</p> <pre><code>web/\n  person.py\n  _person/\n    person.html     (default view for `view()`)\n    add.html        (additional view to display new form)\n    edit.html       (additional view to display edit form)\n</code></pre> <p>Each method can explicitly render its corresponding template using:</p> <pre><code>ctx.go_to = render.as_view(ctx, \"add\")\n</code></pre> <p>This approach makes it easy to organize multiple page variations under the same transaction and supports clean separation of logic and presentation.</p>"},{"location":"framework/components.html#routing","title":"Routing","text":"<p>S\u00d8AD routes every request through a clean, convention-based URL structure to the Transaction:</p> <pre><code>/t/{group}/{code}/{action}\n</code></pre> <ul> <li><code>/t</code> \u2014 transaction prefix</li> <li><code>{group}</code> \u2014 folder/module name</li> <li><code>{code}</code> \u2014 transaction file/class</li> <li><code>{action}</code> \u2014 method inside the class; defaults to <code>view</code></li> </ul> <p>Example URL Mapping:</p> <ul> <li><code>/t/base/login</code> \u2192 calls <code>Login.view()</code></li> <li><code>/t/web/home/register</code> \u2192 calls <code>Home.register()</code></li> <li><code>/t/app/user/edit?user_id=5</code> \u2192 calls <code>User.edit()</code> with query param</li> </ul>"},{"location":"framework/components.html#context-path","title":"Context Path","text":"<p>In Java Servlet architecture, the context path refers to the root path of a deployed web application. It is the prefix added to all URLs served by the application.</p> <p>In S\u00d8AD Framework, the context path can be retrieved within a transaction using:</p> <pre><code>ctx.ctxPath\n</code></pre> <p>By default, S\u00d8AD assumes the context path is an empty string (<code>\"\"</code>) when running as a standalone application. However, if the application is deployed with a context (for example, under <code>/myapp</code>), then this value will reflect that path.</p> <p>Example:</p> <p>Given a deployed application URL:</p> <pre><code>https://www.sufia.online/myapp/t/web/welcome\n</code></pre> <ul> <li>Context Path: <code>/myapp</code></li> <li>Transaction URL: <code>/t/web/welcome</code></li> </ul> <p>This context path is useful when constructing links or redirecting within views and templates to ensure consistency across environments.</p>"},{"location":"framework/components.html#view","title":"View","text":"<p>Each transaction ends by setting <code>ctx.go_to</code> to a function that define the response. The most common output is an HTML page rendered using the <code>render.as_view()</code> function:</p> <pre><code>ctx.go_to = render.as_view(ctx, \"home\")\n</code></pre> <p>This will render the <code>home.html</code> view inside the <code>_home</code> folder.</p> <p>Note</p> <p>The <code>ctx.go_to</code> parameter can accept either a string or a function. When a string is provided, it is treated as a URL path, and the framework redirects the user to that URL using <code>response.sendRedirect()</code>. If a function is provided, it is executed, and its output is returned to the user. The function is responsible for processing the response, including setting the content type, status code, and writing the response body to the <code>HttpServletResponse</code> object.</p>"},{"location":"framework/components.html#view-files","title":"View Files","text":"<p>Views in S\u00d8AD are typically HTML files enhanced with Handlebars syntax. Handlebars allows dynamic content rendering by using placeholders and control logic directly within the HTML.</p> <p>You can:</p> <ul> <li>Insert variables: <code>{{user_name}}</code></li> <li>Perform loops: <code>{{#each items}}...{{/each}}</code></li> <li>Add conditions: <code>{{#if isAdmin}}...{{else}}...{{/if}}</code></li> <li>Use helpers: such as <code>select</code>, <code>dateFmt</code>, or <code>ref_lookup</code></li> </ul> <p>This makes the HTML highly flexible and data-driven while remaining clean and readable.</p>"},{"location":"framework/components.html#output-render-methods","title":"Output Render Methods","text":"<p>S\u00d8AD provides multiple output render methods through <code>utils.render</code>:</p> <ul> <li><code>render.as_view(ctx, view)</code> - Render Handlebars HTML</li> <li><code>render.as_json(ctx, obj)</code> - Render JSON</li> <li><code>render.as_html(ctx, code)</code> - Raw HTML</li> <li><code>render.as_string(ctx, text)</code> - Plain string</li> <li><code>render.as_file(ctx, file)</code> - File download</li> <li><code>render.as_blob(ctx, blob)</code> - Binary data</li> <li><code>render.as_pdf(ctx, view)</code> - PDF output</li> </ul> <p>You can find examples of how to use these render functions in the Code Library section of this documentation.</p>"},{"location":"framework/components.html#handlebars-helpers","title":"handlebars helpers","text":"<p>Handlebars supports built-in helpers and custom helpers for advanced functionality. You can use these helpers to manipulate data, format output, and control rendering logic directly within your templates.</p> <p>Built-in helpers:</p> <ul> <li><code>if</code>, <code>else</code>, <code>unless</code>, <code>each</code>, <code>and</code>, <code>or</code>, <code>not</code>, <code>eq</code></li> </ul> <p>Custom helpers:</p> <ul> <li><code>ref_lookup</code></li> <li><code>select</code>, <code>option</code></li> <li><code>dateFmt</code></li> <li><code>in</code></li> <li><code>html</code></li> <li><code>session</code></li> <li><code>get</code></li> </ul> <p>You can find more details about these helpers in the Utilities chapter of this documentation.</p>"},{"location":"framework/components.html#model","title":"Model","text":"<p>In S\u00d8AD Framework, Model classes are automatically generated from the database tables using ActiveJDBC. Once generated, these classes are automatically instrumented.</p> <p>Instrumentation in ActiveJDBC refers to the process of enhancing the compiled Java Model classes so they are ActiveJDBC-aware. This means they gain access to methods such as <code>saveIt()</code>, <code>findAll()</code>, <code>first()</code>, <code>where()</code>, and many others provided by the ActiveJDBC framework.</p> <p>S\u00d8AD handles this behind the scenes. At runtime, after introspecting the database schema and generating the Model classes, the framework runs ActiveJDBC\u2019s instrumentation process to inject the necessary metadata and behaviors. This allows you to interact with your database tables as if they were regular Java classes, making CRUD operations straightforward and intuitive.</p> <p>Given a <code>person</code> table: <pre><code>package models;\n\nimport org.javalite.activejdbc.Model;\n\npublic class Person extends Model {}\n</code></pre></p> <p>Usage in Transaction: <pre><code>from models import Person\n\nclass Home(Layout):\n    def view(self, ctx):\n        persons = Person.findAll()\n        ctx.output[\"all_person\"] = persons\n        ctx.go_to = render.as_view(ctx, \"home\")\n</code></pre></p>"},{"location":"framework/components.html#example-hello-world","title":"Example: Hello World","text":"<p>Folder structure: <pre><code>web/\n  hello.py\n  _hello/\n    hello.html\n</code></pre></p> <p><code>hello.py</code> <pre><code>from utils import render\n\nclass Hello(Layout):\n    def view(self, ctx):\n        ctx.go_to = render.as_view(ctx, \"hello\")\n</code></pre></p> <p><code>_hello/hello.html</code> <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, S\u00d8AD&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"framework/file-upload.html","title":"File Upload","text":"<p>S\u00d8AD makes file uploads easy and straightforward using standard HTML form input and built-in request handling. Uploaded files are automatically processed by the framework and made available through named request parameters.</p>"},{"location":"framework/file-upload.html#1-html-form-setup","title":"1. HTML Form Setup","text":"<p>To enable file upload in a form, two requirements must be met:</p> <ul> <li>The <code>&lt;form&gt;</code> element must have the <code>enctype</code> attribute set to <code>multipart/form-data</code></li> <li>An <code>&lt;input&gt;</code> element of <code>type=\"file\"</code> must be included with a <code>name</code> attribute</li> </ul>"},{"location":"framework/file-upload.html#example-html","title":"Example HTML:","text":"<pre><code>&lt;form action=\"/t/upload/image\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input type=\"file\" name=\"photo\" required&gt;\n    &lt;button type=\"submit\"&gt;Upload&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>In this example:</p> <ul> <li>The input field is named <code>photo</code></li> <li> <p>S\u00d8AD will handle this input and extract the following parameters:</p> <ul> <li><code>photo</code> \u2192 the file content as bytes</li> <li><code>photo_ft</code> \u2192 the MIME type (e.g., <code>image/png</code>)</li> <li><code>photo_fn</code> \u2192 the original filename (e.g., <code>myphoto.jpg</code>)</li> </ul> </li> </ul>"},{"location":"framework/file-upload.html#2-handling-the-upload-in-transaction","title":"2. Handling the Upload in Transaction","text":"<p>The uploaded file content and its metadata can be retrieved from <code>ctx.getRequest()</code>.</p>"},{"location":"framework/file-upload.html#example-transaction","title":"Example Transaction:","text":"<pre><code>from utils import render\n\nfrom java.io import File\nfrom com.google.common.io import Files\n\nclass Image(object):\n    def upload(self, ctx):\n        request = ctx.getRequest()\n        file_content = request.getParameter(\"photo\") # byte[] content\n        file_type = request.getParameter(\"photo_ft\") # MIME type\n        file_name = request.getParameter(\"photo_fn\") # Original filename\n\n        # Check if file has been uploaded\n        if file_content:\n\n            # Validate file type\n            if file_type not in [\"image/png\", \"image/jpeg\"]:\n                ctx.output[\"message\"] = \"Invalid file type. Only PNG and JPEG are allowed.\"\n                ctx.go_to = render.as_view(ctx, \"upload_status\")\n                return\n\n            # Save file to a directory\n            path = \"/tmp/uploads/\" + file_name\n            file = File(path)\n\n            Files.write(file_content, file)\n\n            ctx.output[\"message\"] = \"File uploaded successfully: \" + file_name\n            ctx.go_to = render.as_view(ctx, \"upload_status\")\n</code></pre>"},{"location":"framework/helpers.html","title":"Handlebars.java Helpers","text":"<p>Handlebars.java provides built-in helpers that extend the templating capabilities, making HTML templates dynamic and easier to manage. S\u00d8AD Framework also includes custom helpers to further enhance your templates. This chapter explains the most common helpers and custom S\u00d8AD-specific helpers available.</p>"},{"location":"framework/helpers.html#helper-quick-reference","title":"Helper Quick Reference","text":"Helper Category What it does <code>if</code>, <code>unless</code> Built-in Conditional blocks that render or skip markup based on a truthy value. <code>each</code> Built-in Iterates over collections and renders children for every item. <code>eq</code>, <code>neq</code> Logical Compare two values for equality or inequality inside inline conditions. <code>gt</code>, <code>gte</code>, <code>lt</code>, <code>lte</code> Logical Evaluate greater-than and less-than comparisons without writing Java code. <code>and</code>, <code>or</code>, <code>not</code> Logical Combine boolean expressions to keep template logic concise. <code>ref_lookup</code> Data Fetch a labeled value from a referenced table or object using a key. <code>select</code>, <code>option</code> Form Generate dropdown elements populated from tables, collections, or filters. <code>dateFmt</code> Formatting Render dates using any <code>java.time</code>-style format pattern. <code>in</code> Logical Check whether a value exists in an array, list, or delimited string. <code>html</code> Formatting Sanitize rich text, expose basic formatting, and auto-link URLs. <code>session</code> Context Read an attribute directly from the current HTTP session. <code>get</code> Context Access keys in <code>ctx.output</code> that contain spaces or special characters. <code>i18n</code> Localization Resolve a translation key from the active locale resource bundle."},{"location":"framework/helpers.html#built-in-handlebars-helpers","title":"Built-in Handlebars Helpers","text":"<p>Below are basic built-in Handlebars helpers commonly used:</p>"},{"location":"framework/helpers.html#1-conditional-helpers","title":"1. Conditional Helpers","text":"<ul> <li>if: Conditionally renders content.</li> </ul> <pre><code>{{#if loggedIn}}\n  &lt;p&gt;Welcome back, {{username}}!&lt;/p&gt;\n{{/if}}\n</code></pre> <ul> <li>unless: Inverse of <code>if</code>.</li> </ul> <pre><code>{{#unless loggedIn}}\n  &lt;p&gt;Please log in.&lt;/p&gt;\n{{/unless}}\n</code></pre>"},{"location":"framework/helpers.html#2-iteration-helper","title":"2. Iteration Helper","text":"<ul> <li>each: Iterates over a collection.</li> </ul> <pre><code>&lt;ul&gt;\n  {{#each items}}\n    &lt;li&gt;{{this}}&lt;/li&gt;\n  {{/each}}\n&lt;/ul&gt;\n</code></pre>"},{"location":"framework/helpers.html#3-logical-helpers","title":"3. Logical Helpers","text":"<ul> <li>eq: Checks equality.</li> </ul> <pre><code>{{#eq role \"admin\"}}\n  &lt;p&gt;Admin Panel&lt;/p&gt;\n{{/eq}}\n\n{{#if (eq role \"admin\")}}\n  &lt;p&gt;Admin Panel&lt;/p&gt;\n{{/if}}\n</code></pre> <p>For more information on the Handlebars templating language and available features, visit the official documentation at https://jknack.github.io/handlebars.java/.</p>"},{"location":"framework/helpers.html#sad-custom-helpers","title":"S\u00d8AD Custom Helpers","text":"<p>S\u00d8AD provides additional custom helpers to simplify common tasks:</p>"},{"location":"framework/helpers.html#1-ref_lookup","title":"1. <code>ref_lookup</code>","text":"<p>Lookup a value from a database table using a given key.</p> <pre><code>{{ref_lookup key table=\"tableName\"? refs=\"object\"? label=\"name\"? value=\"id\"?}}\n</code></pre> <p>Parameters:</p> <ul> <li><code>table</code>: The name of the database table to query.</li> <li><code>refs</code>: The object containing the key to look up. If <code>table</code> is not specified, then <code>refs</code> must be provided.</li> <li><code>label</code>: The column to retrieve from the table. Defaults to <code>name</code>. For more than one column, use a pipe-separated list (e.g., <code>label=\"name|email\"</code>).</li> <li><code>value</code>: The column to match against the provided key. Defaults to <code>id</code>. This column is typically the primary key of the table.</li> </ul> <p>Example Usage</p> <pre><code>{{ref_lookup user.id table=\"user\" label=\"login_id\" value=\"id\"}}\n</code></pre> <p>This will look up the <code>login_id</code> for the user with the specified <code>id</code> in the <code>user</code> table.</p> <pre><code>{{#each users}}\n  &lt;p&gt;{{ref_lookup this.id table=\"user_details\" label=\"full_name\" value=\"user_id\"}}&lt;/p&gt;\n{{/each}}\n</code></pre> <p>This iterates over a list of <code>users</code> and retrieves the <code>full_name</code> from the <code>user_details</code> table for each user.</p>"},{"location":"framework/helpers.html#2-select-and-option","title":"2. <code>select</code> and <code>option</code>","text":"<p>Generate dropdown menus (<code>&lt;select&gt;</code>) and their options.</p> <pre><code>{{select table=\"tableName\"? refs=\"object\"? filter=\"\"? id=\"\"? name=\"\"? class=\"\"? label=\"name\" value=\"id\" selected=context? required=\"true\"? readonly? sel_text=\"\"?}}\n</code></pre> <p>Parameters:</p> <ul> <li><code>table</code>: The name of the database table to query.</li> <li><code>refs</code>: The object containing the key to look up. If <code>table</code> is not specified, then <code>refs</code> must be provided.</li> <li><code>filter</code>: Optional filter to apply to the query. e.g., <code>filter=\"active=1\"</code>.</li> <li><code>id</code>: The ID of the <code>&lt;select&gt;</code> element.</li> <li><code>name</code>: The name of the <code>&lt;select&gt;</code> element.</li> <li><code>class</code>: CSS class for the <code>&lt;select&gt;</code> element.</li> <li><code>label</code>: The column to display as the option text. Defaults to <code>name</code>.</li> <li><code>value</code>: The column to match against the provided key. Defaults to <code>id</code>.</li> <li><code>selected</code>: The value to pre-select in the dropdown.</li> <li><code>required</code>: If set to <code>true</code>, the dropdown will be required.</li> <li><code>readonly</code>: If set, the tag will turn to label.</li> <li><code>sel_text</code>: Text to display when no option is selected. Defaults to \"Please Select\".</li> </ul> <p>Generate <code>&lt;option&gt;</code> elements based on the specified table or object.</p> <pre><code>{{option table=\"tableName\"? refs=\"object\"? filter=\"\"? label=\"name\" value=\"id\" selected=context? required=\"true\"? sel_text=\"\"?}}\n</code></pre> <p>Uses the same parameters as <code>select</code>, but generates individual <code>&lt;option&gt;</code> elements instead of a full <code>&lt;select&gt;</code>. This is useful when you need to customize the <code>&lt;select&gt;</code> tag.</p> <p>Example Usage</p> <pre><code>{{select table=\"countries\" selected=selected_country label=\"name\" value=\"code\"}}\n</code></pre> <pre><code>&lt;select id=\"sel_country\" name=\"country_code\" class=\"form-select\" data-live-search=\"true\" required&gt;\n    {{option table=\"countries\" selected=selectedCountry label=\"name\" value=\"code\"}}\n&lt;/select&gt;\n</code></pre>"},{"location":"framework/helpers.html#3-datefmt","title":"3. <code>dateFmt</code>","text":"<p>Format a date object into a human-readable format.</p> <pre><code>{{dateFmt registration_date \"yyyy-MM-dd\"}}\n</code></pre> <p>Formats the <code>registration_date</code> into a day/month/year format. If no format is specified, it defaults to <code>dd/MM/yyyy</code>.</p>"},{"location":"framework/helpers.html#4-in","title":"4. <code>in</code>","text":"<p>Check if a value exists within a list or a string.</p> <pre><code>{{#if (in user_role_id allowed_roles)}}\n  &lt;p&gt;Access Granted&lt;/p&gt;\n{{else}}\n  &lt;p&gt;Access Denied&lt;/p&gt;\n{{/if}}\n</code></pre>"},{"location":"framework/helpers.html#5-html","title":"5. <code>html</code>","text":"<p>Sanitize HTML content, convert newlines to <code>&lt;br&gt;</code> and generate anchor for links.</p> <pre><code>&lt;div&gt;{{html content}}&lt;/div&gt;\n</code></pre>"},{"location":"framework/helpers.html#6-session","title":"6. <code>session</code>","text":"<p>Access session attributes.</p> <pre><code>&lt;p&gt;User ID: {{session \"user_id\"}}&lt;/p&gt;\n</code></pre>"},{"location":"framework/helpers.html#7-get","title":"7. <code>get</code>","text":"<p>Retrieve values from <code>ctx.output</code> by keys containing special characters or spaces.</p> <pre><code>&lt;p&gt;{{get \"complex key-name\"}}&lt;/p&gt;\n</code></pre>"},{"location":"framework/helpers.html#8-i18n","title":"8. <code>i18n</code>","text":"<p>Internationalization helper to fetch localized strings. This helper retrieves strings from the i18n resource files (<code>messages.properties</code>) based on the current locale or <code>__locale__</code> value from session attributes. To use this helper, you need to have a <code>messages.properties</code> file in your resources directory with the appropriate key-value pairs.</p> <pre><code>{{i18n \"welcome.message\"}}\n</code></pre> <p>Properties files example:</p> messages.properties<pre><code>welcome.message=Welcome to S\u00d8AD\n</code></pre> messages_ms.properties<pre><code>welcome.message=Selamat datang ke S\u00d8AD\n</code></pre> <p>To set the locale, you can use the <code>__locale__</code> session attribute:</p> <pre><code>request = ctx.getRequest()\nrequest.getSession(True).setAttribute(\"__locale__\", \"ms\")\n</code></pre> <p>Refer to the Multi-language Support section for more details on how to set up and use i18n in S\u00d8AD.</p>"},{"location":"framework/logging.html","title":"Logging","text":"<p>S\u00d8AD uses SLF4J as the logging API, with Log4j 2 as the underlying implementation. This setup provides flexible, high-performance logging for transactions, models, and other framework components.</p> <p>Logging is essential for diagnosing issues, auditing activity, and understanding application behavior\u2014especially in production environments or when running inside containers.</p>"},{"location":"framework/logging.html#using-logging-in-transactions","title":"Using Logging in Transactions","text":"<p>Within your Jython Transactions, you can use the <code>Log</code> class to write log entries. Supported levels include <code>info</code>, <code>debug</code>, <code>warn</code>, and <code>error</code>. These methods integrate seamlessly with SLF4J and Log4j\u2019s configuration.</p>"},{"location":"framework/logging.html#example-using-logging-in-a-transaction","title":"Example: Using Logging in a Transaction","text":"<pre><code>from sufia.util import Log\n\nclass Example(Layout):\n    def view(self, ctx):\n        Log.info(ctx, \"Example view called.\")\n        Log.debug(ctx, \"Request parameters: %s\" % ctx.getAllParameters())\n\n        try:\n            # Transaction logic\n            Log.info(ctx, \"Processing completed successfully.\")\n        except Exception as e:\n            Log.error(ctx, \"Error occurred: %s\" % str(e))\n            raise e\n</code></pre> Method Usage <code>Log.print(ctx, string)</code> For general informational messages. <code>Log.info(ctx, string)</code> For general informational messages. <code>Log.debug(ctx, string)</code> For detailed debugging output (helpful during development). <code>Log.trace(ctx, string)</code> For tracing detailed information. <code>Log.warn(ctx, string)</code> For warning messages. <code>Log.error(ctx, string, exception)</code> For capturing unexpected exceptions or failures."},{"location":"framework/logging.html#logging-in-container-environments","title":"Logging in Container Environments","text":"<p>Did You Know?</p> <p>If S\u00d8AD is running in a containerized environment, the standard <code>print()</code> output may not appear in the IDE. Instead, always use <code>Log.info()</code>, <code>Log.debug()</code>, or <code>Log.print()</code>, which are routed through SLF4J and work reliably inside containers.</p>"},{"location":"framework/logging.html#using-slf4j-logger-directly","title":"Using SLF4J <code>Logger</code> Directly","text":"<p>While S\u00d8AD provides the <code>Log</code> utility for simplicity, you can also create your own SLF4J <code>Logger</code> instances if you need class-specific loggers, advanced features, or consistent Java logging practices.</p>"},{"location":"framework/logging.html#example-slf4j-logger-in-a-transaction","title":"Example: SLF4J Logger in a Transaction","text":"<pre><code>from org.slf4j import LoggerFactory\n\nclass Orders(object):\n    # Create a class-specific logger instance\n    logger = LoggerFactory.getLogger(\"OrdersTransaction\")\n\n    def view(self, ctx):\n        request = ctx.getRequest()\n        Orders.logger.info(\"Orders view accessed.\")\n        Orders.logger.debug(\"Request parameters: %s\" % request.getParameterMap())\n\n        try:\n            # Transaction logic here\n            Orders.logger.info(\"Order listing completed successfully.\")\n        except Exception as e:\n            Orders.logger.error(\"Failed to process orders: %s\" % str(e))\n            raise e\n</code></pre> <p>This pattern is for developers familiar with enterprise Java, or when you need finer control over logging granularity.</p>"},{"location":"framework/logging.html#default-log4j-configuration","title":"Default Log4j Configuration","text":"<p>Below is the default <code>log4j2.properties</code> included with S\u00d8AD. This configuration outputs logs both to the console and to rolling log files saved under <code>${SUFIA_HOME}/logs/</code>.</p> <pre><code># Appenders\nappender.console.type = Console\nappender.console.name = STDOUT\nappender.console.layout.type = PatternLayout\nappender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} [%T] %-5level %c{1} - %msg%n\n\nappender.rolling.type = RollingFile\nappender.rolling.name = LOGFILE\nappender.rolling.fileName = ${env:SUFIA_HOME}/logs/soad.log\nappender.rolling.filePattern = ${env:SUFIA_HOME}/logs/soad-%d{yyyy-MM-dd}.log\nappender.rolling.layout.type = PatternLayout\nappender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} [%T] %-5level %c{1} - %msg%n\nappender.rolling.policies.type = Policies\nappender.rolling.policies.time.type = TimeBasedTriggeringPolicy\nappender.rolling.policies.time.interval = 1\nappender.rolling.policies.time.modulate = true\nappender.rolling.strategy.type = DefaultRolloverStrategy\nappender.rolling.strategy.max = 30\n\n# Root Logger\nrootLogger.level = INFO\nrootLogger.appenderRef.rolling.ref = LOGFILE\nrootLogger.appenderRef.console.ref = STDOUT\n\n# keep activejdbc logs at minimum\nlogger.activejdbc.name = org.javalite.activejdbc\nlogger.activejdbc.level = WARN\n</code></pre>"},{"location":"framework/overview.html","title":"Overview","text":"<p>S\u00d8AD Framework is a lightweight, Java-based<sup>1</sup> web framework designed for rapid application development. It is a successor to the SUFIA Framework, enhanced and refined to better serve modern enterprise application needs.</p> <p>The primary goal of S\u00d8AD Framework is to let developers focus on what truly matters: building the business logic of their application\u2014without getting bogged down by the technical intricacies of integrating multiple frameworks, tools, or libraries.</p> <p>S\u00d8AD is convention-based, action-driven, and sits on top of the Java Servlet specification, working conceptually similar to frameworks like Apache Struts 2 or Spring MVC. It comes bundled with an embedded application server and can run as a standalone server application. It is also container-ready and integrates seamlessly into Kubernetes environments.</p> <p></p> <ol> <li> <p>Oracle and Java are registered trademarks of Oracle and/or its affiliates. Other names may be trademarks of their respective owners\u00a0\u21a9</p> </li> </ol>"},{"location":"framework/page-layout.html","title":"Page Layout","text":"<p>S\u00d8AD supports a layout system similar to SiteMesh, allowing developers to define a common page template that wraps around individual views. This is useful for applying a consistent structure across multiple pages\u2014such as a shared header, navigation menu, and footer.</p> <p>A Page Layout is a standard HTML file that includes special placeholders using Handlebars helpers:</p> <ul> <li><code>{{&amp;title}}</code></li> <li><code>{{&amp;head}}</code></li> <li><code>{{&amp;body}}</code></li> </ul> <p>These placeholders are automatically filled by the framework when rendering a view that uses layout integration.</p> <p></p> <p>Page Layout Concept</p>"},{"location":"framework/page-layout.html#how-it-works","title":"How It Works","text":"<p>To define a layout in a transaction, simply include a method named:</p> <pre><code>def page_layout(self):\ndef page_layout(self, ctx):\n</code></pre> <p>This method name is conventional. Any transaction class with a method by this name will be recognized by the framework as providing layout support.</p> <p>The <code>page_layout</code> method should return a tuple containing:</p> <ul> <li>The group name (e.g., <code>\"web\"</code>)</li> <li>The code name (e.g., <code>\"base\"</code>)</li> <li>(Optional) The layout file name (e.g., <code>\"layout\"</code>) - If not specified, it defaults to the default view of the Transaction.</li> </ul> <p>This tells the framework which layout file to use when rendering the view.</p> <p>The content returned by the view method (e.g., <code>view(self, ctx)</code>) is extracted and injected into the corresponding layout placeholder (e.g. <code>{{&amp;body}}</code>).</p>"},{"location":"framework/page-layout.html#example-transaction-with-layout","title":"Example Transaction with Layout","text":"base.py<pre><code>from utils import render\n\nclass Base(object):\n    def page_layout(self, ctx):\n        return (\"web\", \"base\", \"layout\")\n</code></pre> <p>This method will render <code>_base/layout.html</code> and merge the content of the view into the layout.</p> <p>Example HTML:</p> _base/layout.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;[MyApp] - {{&amp;title}}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;main&gt;\n        {{&amp;body}}\n    &lt;/main&gt;\n\n    &lt;script src=\"...\"&gt;&lt;/script&gt;\n    {{&amp;head}} &lt;!-- Moved the script section to the bottom of the page --&gt;\n&lt;/body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"framework/page-layout.html#sharing-layouts-via-inheritance","title":"Sharing Layouts via Inheritance","text":"<p>To apply a layout to multiple transactions, you can define the layout in a base transaction class and have others inherit from it:</p> dashboard.py<pre><code>from utils import render\nfrom default.web.base import Base\n\nclass Dashboard(Base):\n    def view(self, ctx):\n        ctx.go_to = render.as_view(ctx, \"dashboard\")\n</code></pre> _dashboard/dashboard.html<pre><code>&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Dashboard&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Dashboard&lt;/h1&gt;\n    &lt;p&gt;Welcome to your dashboard!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Final Output:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;[MyApp] - Dashboard&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;main&gt;\n        &lt;h1&gt;Dashboard&lt;/h1&gt;\n        &lt;p&gt;Welcome to your dashboard!&lt;/p&gt;\n    &lt;/main&gt;\n\n    &lt;script src=\"...\"&gt;&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In this example, the <code>Dashboard</code> transaction inherits from <code>Base</code>, which provides the layout functionality. The <code>view</code> method will render <code>_dashboard/dashboard.html</code>, and the content will be injected into the layout defined in <code>_base/layout.html</code>.</p> <p>This promotes consistency and reduces duplication in layout structure across views.</p>"},{"location":"framework/utils.html","title":"Utilities in S\u00d8AD","text":"<p>S\u00d8AD Framework provides several utility functions that help streamline common tasks like sending emails, generating PDFs, and others. </p>"},{"location":"framework/utils.html#1-email","title":"1. Email","text":"<p>S\u00d8AD includes a simple API to send emails using the <code>mailer</code> class.</p>"},{"location":"framework/utils.html#function-signature","title":"Function Signature","text":"<pre><code>send(sender_email, receiver_email, subject, content, cc=[], bcc=[], html=False, attachment=[], reply_to=None)\n</code></pre>"},{"location":"framework/utils.html#parameters","title":"Parameters:","text":"<ul> <li><code>sender_email</code>: The sender's email address.</li> <li><code>receiver_email</code>: The recipient's email address.</li> <li><code>subject</code>: Email subject line.</li> <li><code>content</code>: The body of the email (text or HTML).</li> <li><code>html</code>: Optional flag (<code>True</code> or <code>False</code>). If <code>True</code>, the content will be treated as HTML.</li> <li><code>cc</code>: Optional list of CC email addresses.</li> <li><code>bcc</code>: Optional list of BCC email addresses.</li> <li><code>attachment</code>: Optional list of file paths to attach to the email.</li> <li><code>reply_to</code>: Optional email address for reply-to header.</li> </ul>"},{"location":"framework/utils.html#example","title":"Example:","text":"<pre><code>from utils import mailer\n\nemail_content = \"\"\"\n&lt;h1&gt;Welcome&lt;/h1&gt;\n&lt;p&gt;Your account has been created.&lt;/p&gt;\n\"\"\"\n\nmailer.send(\"noreply@soad.app\", \"user@example.com\", \"Welcome to S\u00d8AD\", email_content, html=True)\n</code></pre> <p>You can also use <code>render.as_view(...)()</code> to generate email content from a view template.</p>"},{"location":"framework/utils.html#2-pdf-generator","title":"2. PDF Generator","text":"<p>You can generate a PDF file from any XHTML-compatible HTML string using the <code>pdf</code> utility.</p>"},{"location":"framework/utils.html#function-signature_1","title":"Function Signature","text":"<pre><code>generate(content, pdf_file=None, outstream=None)\n</code></pre>"},{"location":"framework/utils.html#parameters_1","title":"Parameters:","text":"<ul> <li><code>content</code>: XHTML content as a string (typically generated using <code>render.as_view(...)()</code>)</li> <li><code>pdf_file</code>: Optional File (<code>java.io.File</code> object) where the PDF will be saved.</li> <li><code>outstream</code>: Optional output stream to write the PDF content to. If not provided, it defaults to writing to <code>pdf_file</code>.</li> </ul>"},{"location":"framework/utils.html#example_1","title":"Example:","text":"<pre><code>from utils import pdf, render\n\nhtml = render.as_view(ctx, \"invoice\")()\npdf.generate(html, \"/tmp/invoice.pdf\")\n</code></pre> <p>This generates a PDF file containing the rendered invoice.</p>"},{"location":"framework/utils.html#3-google-guava-library","title":"3. Google Guava Library","text":"<p>S\u00d8AD bundles Google Guava, a powerful set of Java core libraries that offer advanced capabilities for working with collections, IO, caching, and more.</p>"},{"location":"framework/utils.html#common-use-cases","title":"Common Use Cases:","text":""},{"location":"framework/utils.html#a-reading-and-writing-files","title":"a. Reading and Writing Files","text":"<pre><code>from com.google.common.io import Files\nfrom java.io import File\n\nfile = File(\"/tmp/example.txt\")\ncontent = Files.toString(file, \"UTF-8\")\nprint(content)\n\nFiles.write(\"Hello World\".getBytes(), file)\n</code></pre>"},{"location":"framework/utils.html#b-base64-encoding-and-decoding","title":"b. Base64 Encoding and Decoding","text":"<pre><code>from com.google.common.io import BaseEncoding\n\nencoded = BaseEncoding.base64().encode(\"hello world\".getBytes())\nprint(encoded)  # aGVsbG8gd29ybGQ=\n\ndecoded = BaseEncoding.base64().decode(encoded)\nprint(String(decoded))\n</code></pre>"},{"location":"framework/utils.html#c-io-streams","title":"c. IO Streams","text":"<pre><code>from com.google.common.io import ByteStreams\nfrom java.io import FileInputStream, FileOutputStream\n\nin_stream = FileInputStream(\"input.txt\")\nout_stream = FileOutputStream(\"output.txt\")\n\nByteStreams.copy(in_stream, out_stream)\n\nin_stream.close()\nout_stream.close()\n</code></pre> <p>These utilities make working with lower-level Java APIs much easier and more expressive, and they integrate smoothly into your S\u00d8AD transactions and utilities.</p>"},{"location":"framework/utils.html#4-apache-commons-apache-poi-support","title":"4. Apache Commons &amp; Apache POI Support","text":"<p>S\u00d8AD also bundles other powerful libraries to enhance backend functionality:</p>"},{"location":"framework/utils.html#a-apache-commons","title":"a. Apache Commons","text":"<p>S\u00d8AD includes several Apache Commons libraries such as:</p> <ul> <li>commons-lang3 \u2013 string manipulation, object utilities, etc.</li> <li>commons-io \u2013 input/output stream helpers</li> </ul> <p>These can be imported and used directly in your transaction or utility classes to simplify everyday Java operations.</p>"},{"location":"framework/utils.html#b-apache-poi-excel-manipulation","title":"b. Apache POI (Excel Manipulation)","text":"<p>Apache POI enables you to read from and write to Microsoft Excel files (both .xls and .xlsx). It is useful for generating reports or importing/exporting spreadsheet data.</p> <p>Please refer to Cookbook for examples on how to use Apache POI with S\u00d8AD.</p> <p>If you need additional functionality beyond what\u2019s provided out-of-the-box, you can upload custom .jar libraries into the <code>/webapp/WEB-INF/lib/</code> folder. These JAR files will be loaded into the classpath at runtime, allowing you to use external Java libraries in your S\u00d8AD transactions.</p>"},{"location":"framework/whyjython.html","title":"Why Jython?","text":"<p>Jython is a JVM-based implementation of Python. Its goal is to allow seamless integration between Java and Python, offering the simplicity of Python with the full power of Java.</p>"},{"location":"framework/whyjython.html#key-advantages-of-jython","title":"Key Advantages of Jython","text":"<ul> <li>Runs on the JVM</li> <li>Access to Java libraries and ecosystem</li> <li>No compile-redeploy cycle: write and run instantly</li> <li>Python syntax = less boilerplate</li> <li>High performance through Java integration</li> </ul>"},{"location":"framework/whyjython.html#why-jython_1","title":"Why Jython","text":"<p>Java web development often involves long feedback loops due to compile, build, and redeploy cycles. Jython solves this by enabling an interpreted, instant-execution workflow within the Java ecosystem. This is ideal for rapid development and immediate testing.</p>"},{"location":"getting-started/directory-struct.html","title":"S\u00d8AD Directory Structure","text":"<p>This chapter outlines the structure of a typical S\u00d8AD project directory. Understanding this layout helps developers know where to place configuration files, transactions, views, and libraries.</p> <pre><code>app\n\u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 log4j2.properties\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sufia.properties\n\u251c\u2500\u2500 console.log\n\u251c\u2500\u2500 lib\n\u251c\u2500\u2500 logs\n\u251c\u2500\u2500 s0adm\n\u251c\u2500\u2500 server\n\u251c\u2500\u2500 shutdown.sh\n\u251c\u2500\u2500 startup.sh\n\u2514\u2500\u2500 webapp\n    \u251c\u2500\u2500 assets\n    \u251c\u2500\u2500 index.html\n    \u2514\u2500\u2500 WEB-INF\n        \u251c\u2500\u2500 classes\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 models\n        \u251c\u2500\u2500 jython\n        \u2514\u2500\u2500 lib\n</code></pre>"},{"location":"getting-started/directory-struct.html#directory-overview","title":"Directory Overview","text":""},{"location":"getting-started/directory-struct.html#app","title":"<code>/app/</code>","text":"<p>The root directory of the application.</p> <ul> <li>conf/ \u2013 Contains configuration files.<ul> <li><code>log4j2.properties</code> \u2013 Logging configuration.</li> <li><code>sufia.properties</code> \u2013 Core framework properties and application-level settings.</li> </ul> </li> <li>console.log \u2013 Main log file capturing console output from the server.</li> <li>lib/ \u2013 Folder for core libraries.</li> <li>logs/ \u2013 Folder for log archives.</li> <li>s0adm/ \u2013 S\u00d8AD IDE.</li> <li>server/ \u2013 Server runtime files.</li> <li>startup.sh / shutdown.sh \u2013 Scripts to start or stop the application.</li> </ul>"},{"location":"getting-started/directory-struct.html#appwebapp","title":"<code>/app/webapp/</code>","text":"<p>This is the main web application folder (similar to <code>webapps/ROOT</code> in traditional servlet apps).</p> <ul> <li>assets/ \u2013 Static assets like CSS, JS, fonts, images, etc.</li> <li>index.html \u2013 Optional landing page or placeholder HTML.</li> <li>WEB-INF/ \u2013 Protected folder not directly accessible via URL. Contains:<ul> <li>classes/ \u2013 Compiled Java classes and generated model classes.<ul> <li>models/ \u2013 ActiveJDBC model classes automatically generated.</li> </ul> </li> <li>jython/ \u2013 The location for your Jython transaction files and packages.</li> <li>lib/ \u2013 Additional JAR files required by the app (internal classpath).</li> </ul> </li> </ul> <p>This structure allows S\u00d8AD applications to be easily managed, containerized, or deployed with minimal setup. Transactions are typically placed under <code>/webapp/WEB-INF/jython</code>, and views under <code>/webapp/WEB-INF/jython/_group</code> folders.</p>"},{"location":"getting-started/directory-struct.html#transaction-file-structure","title":"Transaction File Structure","text":"<p>The directory structure for transaction files is organized as follows:</p> <ul> <li>The parent directory represents a group, containing transaction files with a .py extension.</li> <li>Each transaction file has a corresponding subdirectory named identically to the transaction file.</li> <li>This subdirectory contains views associated with the transaction, with the default view being an .html file named the same as the transaction file.</li> </ul> Transaction File Structure"},{"location":"getting-started/first-application.html","title":"Build your first application","text":""},{"location":"getting-started/first-application.html#your-first-sad-application-address-book","title":"Your First S\u00d8AD Application: Address Book","text":"<p>This chapter guides you through building a simple web application using the S\u00d8AD Framework. We\u2019ll develop an Address Book where users can:</p> <ul> <li>View a list of contacts</li> <li>Add a new contact</li> <li>Edit an existing contact</li> <li>Delete a contact</li> </ul>"},{"location":"getting-started/first-application.html#step-1-create-the-database-table","title":"Step 1: Create the Database Table","text":"<p>First, create a table to store contact details in your database.</p>"},{"location":"getting-started/first-application.html#table-schema","title":"Table Schema","text":"<p>Create a new table named <code>contact</code> with the following schema:</p> Column Name Data Type Constraints id INT NOT NULL, PRIMARY KEY, AUTO_INCREMENT name VARCHAR(100) NOT NULL contact_no VARCHAR(20) email VARCHAR(100) created_date DATETIME updated_date DATETIME <p>Example SQL Script: <pre><code>CREATE TABLE contact (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) NOT NULL,\n    contact_no VARCHAR(20),\n    email VARCHAR(100),\n    created_date DATETIME,\n    updated_date DATETIME\n);\n</code></pre></p> <p>After creating the table, S\u00d8AD automatically generates a corresponding model class named <code>Contact</code>.</p>"},{"location":"getting-started/first-application.html#step-2-create-the-transaction","title":"Step 2: Create the Transaction","text":"<p>Next, create a transaction that manages the contacts. The transaction group is <code>example</code>, and the transaction code is <code>address_book</code>.</p>"},{"location":"getting-started/first-application.html#create-transaction","title":"Create Transaction","text":"<p>In the S\u00d8AD Online IDE, go to the Transaction tab, and create:</p> <ul> <li>Group: <code>example</code></li> <li>Code: <code>address_book</code></li> <li>Transaction Name: <code>Address Book</code></li> </ul> <p>This action generates:</p> <pre><code>example/address_book.py\nexample/_address_book/address_book.html\n</code></pre>"},{"location":"getting-started/first-application.html#jython-code-address_bookpy","title":"Jython Code: <code>address_book.py</code>","text":"<pre><code>from utils import render\nfrom models import Contact\nfrom java.time import LocalDateTime\n\nclass Address_book(object):\n    def view(self, ctx):\n        contacts = Contact.findAll().orderBy(\"name ASC\")\n        ctx.output[\"contacts\"] = contacts\n        ctx.go_to = render.as_view(ctx, \"address_book\")\n\n    def save(self, ctx):\n        \"\"\"POST\"\"\"\n        request = ctx.getRequest()\n        id = request.getParameter(\"id\")\n        name = request.getParameter(\"name\")\n        contact_no = request.getParameter(\"contact_no\")\n        email = request.getParameter(\"email\")\n\n        if id:\n            contact = Contact.findById(id)\n        else:\n            contact = Contact()\n            contact.set(\"created_date\", LocalDateTime.now())\n\n        contact.set(\"name\", name)\n        contact.set(\"contact_no\", contact_no)\n        contact.set(\"email\", email)\n        contact.set(\"updated_date\", LocalDateTime.now())\n        contact.saveIt()\n\n        # Redirect to the view after saving\n        ctx.go_to = \"/t/example/address_book\"  \n\n    def edit(self, ctx):\n        request = ctx.getRequest()\n        id = request.getParameter(\"id\")\n        ctx.output[\"contact\"] = Contact.findById(id)\n        self.view(ctx)\n\n    def delete(self, ctx):\n        \"\"\"POST\"\"\"\n        request = ctx.getRequest()\n        id = request.getParameter(\"id\")\n        contact = Contact.findById(id)\n        if contact:\n            contact.delete()\n\n        # Redirect to the view after deletion\n        ctx.go_to = \"/t/example/address_book\"\n</code></pre> <p>Tip</p> <ol> <li> <p>Use <code>\"\"\"POST\"\"\"</code> at the beginning of methods like <code>save</code> and <code>delete</code> to indicate that they only accept POST requests. This is particularly useful for handling form submissions securely.</p> </li> <li> <p>Implement <code>ctx.go_to = \"/t/example/address_book\"</code> after save or delete actions to redirect users back to the main view. This follows the Post/Redirect/Get (PRG) pattern, preventing unintended form resubmissions when the page is refreshed.</p> </li> </ol>"},{"location":"getting-started/first-application.html#html-view-_exampleaddress_bookhtml","title":"HTML View: <code>_example/address_book.html</code>","text":"<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;Address Book&lt;/title&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=\"container my-4\"&gt;\n    &lt;h1 class=\"mb-4\"&gt;Address Book&lt;/h1&gt;\n\n    &lt;form action=\"{{ctxPath}}/t/example/address_book/save\" method=\"post\" class=\"mb-4\"&gt;\n        &lt;input type=\"hidden\" name=\"id\" value=\"{{contact.id}}\" /&gt;\n\n        &lt;div class=\"mb-3\"&gt;\n            &lt;label class=\"form-label\"&gt;Name&lt;/label&gt;\n            &lt;input type=\"text\" class=\"form-control\" name=\"name\" value=\"{{contact.name}}\" required /&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"mb-3\"&gt;\n            &lt;label class=\"form-label\"&gt;Contact No&lt;/label&gt;\n            &lt;input type=\"text\" class=\"form-control\" name=\"contact_no\" value=\"{{contact.contact_no}}\" /&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"mb-3\"&gt;\n            &lt;label class=\"form-label\"&gt;Email&lt;/label&gt;\n            &lt;input type=\"email\" class=\"form-control\" name=\"email\" value=\"{{contact.email}}\" /&gt;\n        &lt;/div&gt;\n\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Save Contact&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;table class=\"table table-striped\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Contact No&lt;/th&gt;\n                &lt;th&gt;Email&lt;/th&gt;\n                &lt;th&gt;Actions&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {{#each contacts}}\n            &lt;tr&gt;\n                &lt;td&gt;{{name}}&lt;/td&gt;\n                &lt;td&gt;{{contact_no}}&lt;/td&gt;\n                &lt;td&gt;{{email}}&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;a class=\"btn btn-sm btn-warning\" href=\"{{../ctxPath}}/t/example/address_book/edit?id={{id}}\"&gt;Edit&lt;/a&gt;\n                    &lt;form action=\"{{../ctxPath}}/t/example/address_book/delete\" method=\"post\" style=\"display:inline;\"&gt;\n                        &lt;input type=\"hidden\" name=\"id\" value=\"{{id}}\"&gt;\n                        &lt;button type=\"submit\" class=\"btn btn-sm btn-danger\" onclick=\"return confirm('Delete this contact?')\"&gt;Delete&lt;/button&gt;\n                    &lt;/form&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            {{/each}}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n\n&lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This HTML leverages Bootstrap for styling the forms and tables to ensure a clean and responsive user interface.</p> <p>Tip</p> <ul> <li>Use <code>{{ctxPath}}</code> to dynamically generate the correct context path for your application.</li> <li><code>{{../ctxPath}}</code> is used to access the context path from within nested Handlebars templates.</li> </ul>"},{"location":"getting-started/first-application.html#step-3-open-in-browser","title":"Step 3: Open in Browser","text":"<p>After creating the table and transaction, open the following URL:</p> <pre><code>https://&lt;your-domain.com&gt;/t/example/address_book\n</code></pre> <p>You\u2019ll see:</p> <ul> <li>A form to add and edit contacts</li> <li>A responsive table listing contacts</li> <li>Edit and delete buttons</li> </ul> <p>Congratulations \u2014 you\u2019ve created your first web application in S\u00d8AD!</p> <p>Next, explore adding validations or integrating additional frontend enhancements.</p>"},{"location":"getting-started/installation.html","title":"S\u00d8AD Installation Guide","text":"<p>There are two types of packaging for S\u00d8AD, a standalone (default package) and container. Depending on your requirement, you have to choose what suits you best.</p> <p>S\u00d8AD Standalone package includes everything needed to run it as a server application, except the database. You have to manually install your database (default supported database is MySQL).</p> <p>S\u00d8AD can run on any OS that supports JVM, however currently the supported platforms are Linux and Windows only.</p> <p>Prerequisites:</p> <ul> <li>JVM/JDK version 11 or latest</li> <li>nginx</li> </ul>"},{"location":"getting-started/installation.html#instruction-for-standalone-package-installation","title":"Instruction for Standalone package installation","text":"Linux (Ubuntu/Debian)Windows"},{"location":"getting-started/installation.html#install-jvmjdk-11","title":"Install JVM/JDK 11","text":"<ol> <li> <p>Update package index:</p> <pre><code>sudo apt update\n</code></pre> </li> <li> <p>Install JDK 11</p> <pre><code>sudo apt install openjdk-11-jdk\n</code></pre> </li> <li> <p>Verify Installation:</p> <pre><code>java -version\n</code></pre> </li> </ol>"},{"location":"getting-started/installation.html#install-and-setup-mysql","title":"Install and setup MySQL","text":"<ol> <li>Get MySQL repository configuration package     <pre><code>wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb\n</code></pre></li> <li>Install MySQL repository configuration package     <pre><code>sudo dpkg -i mysql-apt-config_0.8.12-1_all.deb\n</code></pre></li> <li>Fetches a public GPG key     <pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B7B3B788A8D3785C\n</code></pre></li> <li>Update package list     <pre><code>sudo apt-get update\n</code></pre></li> <li>Install MySQL     <pre><code>sudo apt install -f mysql-client=5.7* mysql-community-server=5.7* mysql-server=5.7*\n</code></pre></li> <li>For setting MySQL run:     <pre><code>sudo mysql_secure_installation\n</code></pre></li> <li>Verify MySQL is installed     <pre><code>mysql -u root -p\n</code></pre></li> <li>Create database for S\u00d8AD IDE (soadmin) and default application:<ul> <li>Database <code>soadmin</code>:     <pre><code>CREATE DATABASE soadmin CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre></li> <li>Database <code>app</code> (replace with the name of application):     <pre><code>CREATE DATABASE app CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre></li> </ul> </li> <li> <p>Create two users:</p> <ul> <li>User <code>soadmin_user</code>:     <pre><code>CREATE USER 'soadmin_user'@'localhost' IDENTIFIED BY '&lt;password&gt;';\n</code></pre></li> <li>User <code>app_user</code> (replace with the name of application):     <pre><code>CREATE USER 'app_user'@'localhost' IDENTIFIED BY '&lt;password&gt;';\n</code></pre></li> </ul> <p>Tip</p> <p>Change the password to more secured phrase. You can use any name or password that you want, we are going to need these on the configuration file.</p> </li> <li> <p>Grant privileges on a database:</p> <pre><code>```mysql\nGRANT ALL PRIVILEGES ON soadmin.* TO 'soadmin_user'@'localhost';\nGRANT ALL PRIVILEGES ON app.* TO 'app_user'@'localhost';\nFLUSH PRIVILEGES;\n```\n</code></pre> </li> <li> <p>Create the tables for database soadmin using script file provided.     <pre><code>mysql -u root -p soadmin &lt; soadmin-db.sql\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation.html#setup-and-configure-sad","title":"Setup and configure S\u00d8AD","text":"<ol> <li>Install zip utility if not already installed:     <pre><code>sudo apt install zip\n</code></pre></li> <li>Unpack (unzip) S\u00d8AD standalone package in your preferred location. The location of S\u00d8AD package will need to be set as <code>SUFIA_HOME</code> later.:     <pre><code>unzip sufia.app.zip\n</code></pre></li> <li>Set database credential:<ol> <li>Open <code>sufia.app\\web\\WEB-INF\\classes\\sufia.properties</code> file using editor.</li> <li>Change the username and password accordingly:     <pre><code>db.default.url = jdbc:mysql://127.0.0.1:3306/app?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.default.driver_class = com.mysql.cj.jdbc.Driver\ndb.default.username = app_user\ndb.default.password = &lt;password&gt;\n\n#this is for S\u00d8AD IDE\ndb.s0adm.url = jdbc:mysql://127.0.0.1:3306/soadmin?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.s0adm.driver_class = com.mysql.cj.jdbc.Driver\ndb.s0adm.username = soadmin_user\ndb.s0adm.password = &lt;password&gt;\n</code></pre></li> </ol> </li> <li>Update <code>sufia.app\\startup.sh</code> file for <code>SUFIA_HOME</code> location:     <pre><code>set SUFIA_HOME=/home/ubuntu/sufia.app\n</code></pre></li> <li> <p>Test run S\u00d8AD:</p> <ul> <li> <p>Go to /home/ubuntu/sufia.app directory and run:     <pre><code>chmod +x *.sh\n./startup.sh\n</code></pre>     If everything goes well, you should see a console.log file created in the home folder. Check the log file and make sure the server is running successfully without any error.</p> <p>Now the server is running on default port (8080), go to your browser and open: http://localhost:8080. You should see the default S\u00d8AD home page</p> <p> S\u00d8AD IDE Login Page </p> </li> </ul> </li> <li> <p>Install S\u00d8AD as a service</p> <p>Copy the <code>sufia.service</code> file to <code>/etc/systemd/system/</code> directory: <pre><code>sudo cp sufia.service /etc/systemd/system/\n</code></pre> Then enable and start the service: <pre><code>sudo systemctl enable sufia.service\nsudo systemctl start sufia.service\n</code></pre> You can check the status of the service using: <pre><code>sudo systemctl status sufia.service\n</code></pre> You can also view the logs for the service using: <pre><code>journalctl -u sufia.service\n</code></pre></p> </li> <li> <p>Update License Information</p> <p>For first time login, only master user is allowed to login. You will be given a default username and password for S\u00d8AD master user. Use that for first time login.</p> <p>Upon successfully logging into the system, navigate to the Settings page and select the License menu. Retrieve the license key from the email you received, then click the Update License button. Paste the copied key into the designated field and click Verify to complete the activation process.</p> <p> License Page </p> </li> </ol>"},{"location":"getting-started/installation.html#install-jvmjdk-11-for-windows","title":"Install JVM/JDK 11 for Windows","text":"<ol> <li> <p>Before installing JDK 11, check if JDK is already installed on your system by running the following command:</p> <pre><code>java -version\n</code></pre> <p>If the command outputs a version number, JDK is already installed, and you can skip JVM installation step.</p> </li> <li> <p>Download JDK 11:</p> <ul> <li>Go to the official Oracle JDK Downloads or</li> <li>Eclipse Temurin by Adoptium</li> </ul> <p>Download the Windows x64 installer (e.g., <code>OpenJDK11U-jdk_x64_windows_*.msi</code>)  and run the installer to complete the installation process. </p> </li> <li> <p>Verify Installation:</p> <ul> <li>Open Command Prompt and run: <pre><code>java -version\n</code></pre></li> <li>Expected output: <pre><code>java version \"11.0.x\" 202x-xx-xx LTS\n</code></pre></li> </ul> </li> </ol>"},{"location":"getting-started/installation.html#install-and-setup-mysql-for-windows","title":"Install and setup MySQL for Windows","text":"<ol> <li>Download MySQL:<ul> <li>Go to the official MySQL Community Downloads</li> </ul> </li> <li> <p>Install MySQL:</p> <ol> <li> <p>Run the installer and choose the Server Only or Full Installation.</p> </li> <li> <p>Set up the root password when prompted.</p> </li> <li> <p>Complete the installation process.</p> </li> </ol> </li> <li> <p>Verify Installation:</p> <ol> <li>Open Command Prompt and run:     <pre><code>mysql -u root -p\n</code></pre></li> <li>Enter the password to access MySQL.</li> </ol> </li> <li>Create database soadmin and application:<ul> <li>Database <code>soadmin</code>:     <pre><code>CREATE DATABASE soadmin CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre></li> <li>Database <code>app</code> (replace with the name of application):     <pre><code>CREATE DATABASE app CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre></li> </ul> </li> <li> <p>Create two user soadmin and application:</p> <ul> <li>User <code>soadmin_user</code>:     <pre><code>CREATE USER 'soadmin_user'@'localhost' IDENTIFIED BY '&lt;password&gt;';\n</code></pre></li> <li>User <code>app_user</code> (replace with the name of application):     <pre><code>CREATE USER 'app_user'@'localhost' IDENTIFIED BY '&lt;password&gt;';\n</code></pre></li> </ul> <p>Tip</p> <p>Change the password to more secured phrase. You can use any name or password that you want, we are going to need these on the configuration file.</p> </li> <li> <p>Grant privileges on a database:</p> <ol> <li>Grant privileges to these databases using previously created user.     <pre><code>GRANT ALL PRIVILEGES ON soadmin.* TO 'soadmin_user'@'localhost';\nGRANT ALL PRIVILEGES ON app.* TO 'app_user'@'localhost';\nFLUSH PRIVILEGES;\n</code></pre></li> </ol> </li> <li>Create the tables for database soadmin using script file provided.     <pre><code>mysql -u root -p soadmin &lt; soadmin-db.sql\n</code></pre></li> </ol>"},{"location":"getting-started/installation.html#setup-and-configure-sad-for-windows","title":"Setup and configure S\u00d8AD for Windows","text":"<ol> <li>Download and install 7-Zip from 7-Zip official website.</li> <li>Unpack (unzip) S\u00d8AD standalone package in your preferred location. The location of S\u00d8AD package will need to be set as <code>SUFIA_HOME</code> later.<ul> <li>Right-click on the downloaded <code>sufia.app.zip</code> file and select \"Extract Here\" or \"Extract to sufia.app\\\".</li> </ul> </li> <li>Set database credential for S\u00d8AD:<ol> <li>Open <code>sufia.app\\web\\WEB-INF\\classes\\sufia.properties</code> file using editor.</li> <li>Change the username and password accordingly:     <pre><code>db.default.url = jdbc:mysql://127.0.0.1:3306/app?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.default.driver_class = com.mysql.cj.jdbc.Driver\ndb.default.username = app_user\ndb.default.password = &lt;password&gt;\n\n#this is for S\u00d8AD IDE\ndb.s0adm.url = jdbc:mysql://127.0.0.1:3306/soadmin?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.s0adm.driver_class = com.mysql.cj.jdbc.Driver\ndb.s0adm.username = soadmin_user\ndb.s0adm.password = &lt;password&gt;\n</code></pre></li> </ol> </li> <li>Update <code>sufia.app\\startup.cmd</code> file for <code>SUFIA_HOME</code> location:     <pre><code>set SUFIA_HOME=D:\\sufia.app\n</code></pre></li> <li> <p>Test run S\u00d8AD:</p> <ul> <li> <p>Launch Command Prompt in the D:\\sufia.app directory and run:     <pre><code>.\\startup.cmd\n</code></pre>     If everything goes well, you should see a console.log file created in the home folder. Check the log file and make sure the server is running successfully without any error.</p> <p>Now the server is running on default port (8080), go to your browser and open: http://localhost:8080. You should see the default S\u00d8AD home page</p> <p> S\u00d8AD Homepage </p> </li> </ul> </li> <li> <p>Update License Information</p> <p>For first time login, only master user is allowed to login. You will be given a default username and password for S\u00d8AD master user. Use that for first time login.</p> <p>Upon successfully logging into the system, navigate to the Settings page and select the License menu. Retrieve the license key from the email you received, then click the Update License button. Paste the copied key into the designated field and click Verify to complete the activation process.</p> <p> License Page </p> <p>Now your S\u00d8AD application is ready.</p> </li> </ol>"},{"location":"getting-started/installation.html#setup-web-server-as-proxy-to-sad-server","title":"Setup web server as proxy to S\u00d8AD server","text":"<p>You can now setup web server as proxy to SUFIA server (e.g. nginx, apache). You also can setup SSL on the web server.  Refer to these excellent articles:</p> <ol> <li> <p>Install Nginx on UBuntu</p> </li> <li> <p>Secure Nginx with Let's Encrypt</p> </li> <li> <p>Nginx Reverse Proxy</p> </li> </ol>"},{"location":"getting-started/installation.html#container","title":"Container","text":"<p>S\u00d8AD can be run in a container. The container is built using Docker and can be run on any platform that supports Docker.</p> <p>Prerequisites:</p> <ul> <li>Docker installed on your system</li> </ul>"},{"location":"getting-started/installation.html#pulling-the-sad-docker-image","title":"Pulling the S\u00d8AD Docker Image","text":"<p>To pull the S\u00d8AD Docker image, run the following command:</p> <p><pre><code>docker pull registry.gitlab.com/pakcusoft/soad-cloud\n</code></pre> This command will download the latest S\u00d8AD image from the GitLab registry.</p>"},{"location":"getting-started/installation.html#running-sad-in-a-container","title":"Running S\u00d8AD in a Container","text":"<p>Before running the container, ensure that you have a MySQL database set up and accessible. You will need to create a database named <code>soadmin</code> and another for your application (e.g., <code>app</code>), along with the necessary users and permissions as described in the standalone installation section.</p> <p>To setup the configuration for the S\u00d8AD container, you can create a <code>sufia.properties</code> file with the following content:</p> <pre><code>db.default.url=jdbc:mysql://&lt;mysql_host&gt;:3306/app?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.default.driver_class=com.mysql.cj.jdbc.Driver\ndb.default.username=app_user\ndb.default.password=&lt;app_password&gt;\n\ndb.s0adm.url=jdbc:mysql://&lt;mysql_host&gt;:3306/soadmin?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.s0adm.driver_class=com.mysql.cj.jdbc.Driver\ndb.s0adm.username=soadmin_user\ndb.s0adm.password=&lt;soadmin_password&gt;\n</code></pre> <p>Replace <code>&lt;mysql_host&gt;</code>, <code>&lt;app_password&gt;</code>, and <code>&lt;soadmin_password&gt;</code> with your actual MySQL host and credentials. You can mount this configuration file into the container when you run it. To run the S\u00d8AD container with the configuration file, use the following command:</p> <pre><code>docker run -d -p 8080:8080 \\\n    --name sufia \\\n    -v /path/to/sufia.properties:/app/conf/sufia.properties \\\n    -v /path/to/local/webapp:/app/webapp \\\n    registry.gitlab.com/pakcusoft/soad-cloud\n</code></pre> <p>Replace <code>/path/to/sufia.properties</code> with the actual path to your <code>sufia.properties</code> file and <code>/path/to/local/webapp</code> with the path to your local web application folder on your host machine. This command will run the S\u00d8AD container in detached mode, mapping port 8080 of the container to port 8080 on your host machine, mounting the configuration file, and mounting the local web application folder into the container.</p>"},{"location":"getting-started/installation.html#accessing-the-sad-application","title":"Accessing the S\u00d8AD Application","text":"<p>Once the container is running, you can access the S\u00d8AD application by navigating to <code>http://localhost:8080</code> in your web browser. You should see the S\u00d8AD IDE Login Page.</p>"}]}