var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"S\u00d8AD Documentation","text":"<p>Welcome to the official documentation for S\u00d8AD, which is divided into two main parts:</p> <ol> <li>S\u00d8AD Framework</li> <li>S\u00d8AD Online IDE</li> </ol> <p>This documentation is designed to help developers and technical teams quickly understand and adopt S\u00d8AD for building web applications efficiently. It covers core concepts, technical architecture, usage patterns, and tooling that together make S\u00d8AD a productive, modern development environment.</p>"},{"location":"index.html#1-sad-framework","title":"1. S\u00d8AD Framework","text":"<p>The S\u00d8AD Framework is a convention-over-configuration MVC web framework built on Java and Jython. It includes:</p> <ul> <li>An action-based routing model</li> <li>A transaction-centric controller design</li> <li>ActiveJDBC-powered models</li> <li>Handlebars.java for templating</li> <li>Embedded application server</li> <li>Container-ready deployment model</li> </ul> <p>Whether you are building enterprise back-office apps or modular microservices, S\u00d8AD helps you focus on business logic instead of glue code.</p>"},{"location":"index.html#2-sad-online-ide","title":"2. S\u00d8AD Online IDE","text":"<p>The S\u00d8AD Online IDE is a browser-based development platform built specifically for S\u00d8AD. It provides tools for:</p> <ul> <li>Managing your database schema and querying data</li> <li>Creating and editing transactions with code suggestions</li> <li>Viewing and downloading server logs for troubleshooting</li> <li>Uploading and organizing static files and assets</li> </ul> <p>This online environment streamlines common development tasks, letting you iterate faster and test instantly without installing anything locally.</p> <p>Each chapter in this documentation will guide you through different components of both the framework and the IDE, with practical examples and conventions.</p> <p>Let\u2019s begin by diving into the framework fundamentals.</p> <p>Copyright Notice</p> <p>All third-party components integrated in S\u00d8AD Framework, including but not limited to Java, MySQL, Jython, ActiveJDBC, Handlebars.java, Bootstrap, jQuery, FullCalendar, DataTables, and other libraries, are copyright of their respective owners. S\u00d8AD does not claim ownership of these components and uses them under their original licenses.</p>"},{"location":"advanced-usage/custom-error.html","title":"Custom Error Page","text":"<p>S\u00d8AD allows you to configure custom error pages for standard HTTP errors such as 404 (Not Found) or 500 (Internal Server Error).</p>"},{"location":"advanced-usage/custom-error.html#how-to-configure-custom-error-pages","title":"How to Configure Custom Error Pages","text":"<p>You can define them in the <code>sufia.properties</code> file like this:</p> <pre><code>error.page.404 = /404.html\nerror.page.500 = /500.html\n\nerror.page.403 = /t/page/err403\n</code></pre> <p>You can either link to a static HTML file or to a transaction. For example, the configuration <code>error.page.403 = /t/page/err403</code> will invoke the transaction at /t/page/err403, allowing you to render a dynamic error view from Python logic and Handlebars.</p> <p>These paths should point to static HTML files that reside under the <code>/webapp/</code> directory.</p>"},{"location":"advanced-usage/custom-error.html#example-404html","title":"Example: <code>404.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Page Not Found&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: sans-serif; text-align: center; padding: 5em; }\n        h1 { font-size: 3em; color: #cc0000; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;404 - Page Not Found&lt;/h1&gt;\n    &lt;p&gt;Sorry, the page you're looking for doesn't exist.&lt;/p&gt;\n    &lt;a href=\"/\"&gt;Back to Home&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"advanced-usage/custom-error.html#example-500html","title":"Example: <code>500.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Server Error&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: sans-serif; text-align: center; padding: 5em; }\n        h1 { font-size: 3em; color: #cc0000; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;500 - Internal Server Error&lt;/h1&gt;\n    &lt;p&gt;Something went wrong on the server.&lt;/p&gt;\n    &lt;a href=\"/\"&gt;Try Again&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>These custom pages enhance user experience and provide better error handling for production environments.</p>"},{"location":"advanced-usage/custom-response.html","title":"Custom Response","text":"<p>By default, when you use <code>render</code> to generate the response (e.g. <code>render.as_view()</code>, <code>render.as_json()</code>), the framework handles the HTTP response for you. It automatically sets status code <code>200</code>, assigns the correct content type (<code>text/html</code>, <code>application/json</code>, etc.), sets character encoding to UTF-8 and writes the output.</p> <p>However, if you need full control over the response\u2014such as returning a different status code, setting custom headers, or streaming raw output\u2014you can assign a function directly to <code>ctx.go_to</code>.</p>"},{"location":"advanced-usage/custom-response.html#example-custom-header","title":"Example: Custom Header","text":"<pre><code>class Export(object):\n    def image_viewer(self, ctx):\n        file_path = \"/path/to/image.jpg\"\n        def add_cache_header():\n            response = ctx.getResponse()\n            response.setStatus(200)  \n            response.setContentType(\"image/jpeg\")\n            # set cache for 1 hour\n            response.setHeader(\"Cache-Control\", \"public, max-age=3600\")\n            # write the file to the response output stream\n            with open(file_path, \"rb\") as file:\n                output_stream = response.getOutputStream()\n                output_stream.write(file.read())\n                output_stream.flush()\n            return None  # No further processing needed\n\n        ctx.go_to = add_cache_header\n</code></pre> <p>This method bypasses <code>render</code> and uses the raw <code>HttpServletResponse</code> object. You can stream files, return binary data, or generate server-push content by writing directly to the output stream.</p>"},{"location":"advanced-usage/filter.html","title":"Servlet Filter","text":"<p>S\u00d8AD allows you to define Servlet Filters that intercept incoming requests. Filters can be used to apply authentication checks, preprocess requests, or enforce headers.</p>"},{"location":"advanced-usage/filter.html#how-to-configure-a-filter","title":"How to Configure a Filter","text":"<p>To register a servlet filter, define it in your <code>sufia.properties</code> file:</p> <pre><code>filter.auth.mapping = /*\nfilter.auth.file = webapp/WEB-INF/jython/default/base/auth_filter.py\n</code></pre> <ul> <li><code>auth</code> is the filter name (each filter must have a unique name).</li> <li><code>mapping</code> defines the URL pattern the filter applies to (e.g., <code>/*</code> applies to all requests).</li> <li><code>file</code> points to the Python file containing the filter logic.</li> </ul> <p>You can define multiple filters by adding more entries with different names and mappings.</p>"},{"location":"advanced-usage/filter.html#filter-file-example-auth_filterpy","title":"Filter File Example: <code>auth_filter.py</code>","text":"<p>The filter class must implement the Java <code>javax.servlet.Filter</code> interface through Jython. This allows the filter to be managed by the servlet container and invoked automatically for each matching request.</p> <pre><code>from javax.servlet import Filter\n\nclass Auth_filter(Filter):\n    def doFilter(self, request, response, chain):\n        session = request.getSession()\n        user_id = session.getAttribute(\"user_id\")\n\n        # If url is for login, allow it to proceed without authentication\n        if request.getRequestURI().endswith(\"/t/auth/login\"):\n            chain.doFilter(request, response)\n            return\n\n        # Check if user is authenticated\n        if user_id is None:\n            # If not authenticated, redirect to login page\n            response.sendRedirect(request.getContextPath() + \"/t/auth/login\")\n            return\n\n        # If authenticated, continue processing the request\n        chain.doFilter(request, response)\n</code></pre>"},{"location":"advanced-usage/filter.html#how-it-works","title":"How It Works","text":"<ul> <li>The <code>doFilter(request, response, chain)</code> method is called automatically for each request that matches the configured mapping.</li> <li>The filter has access to the HTTP request and response objects.</li> <li>If the request should not proceed (e.g. user not authenticated), it can redirect or block.</li> <li>To allow the request to continue to the next filter or target transaction, call <code>chain.doFilter(request, response)</code>.</li> </ul> <p>Important Note</p> <p>To avoid infinite loops, ensure your filter logic does not redirect to a URL that triggers the same filter repeatedly. For example, if your filter redirects to a login page, ensure that the login URL is excluded from the filter's mapping.</p> <p>Filters give you full control to extend the request lifecycle without modifying each transaction manually. You can create multiple filters and map them to specific URL patterns, enabling clean separation of concerns in your application.</p>"},{"location":"advanced-usage/inheritance.html","title":"Transaction: Inheritance and Composition","text":"<p>In S\u00d8AD Framework, transactions are the primary way to handle web requests. Transactions often share common logic, such as master page layout, user authentication, or retrieving user information. To avoid code duplication and improve maintainability, S\u00d8AD supports usage of inheritance and composition in transaction classes.</p> <ul> <li>Inheritance: Extending a base transaction class to reuse common behavior.</li> <li>Composition: Incorporating other classes within a transaction class to establish a \"has-a\" relationship. This approach enables the transaction to delegate specific tasks to helper classes, promoting modularity and encapsulation of related functionality.</li> </ul> <p>Both techniques help keep your code DRY (Don't Repeat Yourself) and maintainable.</p>"},{"location":"advanced-usage/inheritance.html#inheritance","title":"Inheritance","text":"<p>Inheritance allows transactions to share and extend common behavior defined in a parent transaction class. This is particularly useful for common actions like authentication, fetching user details, or rendering standard layouts.</p>"},{"location":"advanced-usage/inheritance.html#example-of-inheritance","title":"Example of Inheritance:","text":"<p>Base Transaction:</p> base_transaction.py<pre><code>from utils import render\n\nclass BaseTransaction(object):\n    def __init__(self):\n        # Optional: initialize any common properties or methods\n        pass\n\n    def view(self, ctx):\n        pass\n\n    def get_user_info(self, ctx):\n        request = ctx.getRequest()\n        session = request.getSession()\n        user_id = session.getAttribute(\"user_id\")\n        return user_id\n</code></pre> <p>Derived Transaction:</p> dashboard.py<pre><code>from default.common.base_transaction import BaseTransaction\nfrom utils import render\n\nclass Dashboard(BaseTransaction):\n    def __init__(self):\n        # Optional: call parent constructor if needed\n        super(BaseTransaction, self).__init__()\n\n    def view(self, ctx):\n        # Use inherited method to get user ID\n        current_logged_in_user = self.get_user_info(ctx)\n\n        ctx.output[\"user_id\"] = current_logged_in_user\n        ctx.go_to = render.as_view(ctx, \"dashboard\")\n</code></pre> <p>In this example, <code>Dashboard</code> inherits from <code>BaseTransaction</code>. This setup ensures consistent user context is always passed to the view without redundant code.</p>"},{"location":"advanced-usage/inheritance.html#composition","title":"Composition","text":"<p>Composition in object-oriented programming represents a \"has-a\" relationship. Instead of inheriting behavior from a parent class, composition means that a class contains one or more objects from other classes as part of its structure.</p> <p>In S\u00d8AD, this allows a transaction to delegate responsibilities to composed objects. It promotes better separation of concerns and greater flexibility compared to inheritance.</p>"},{"location":"advanced-usage/inheritance.html#example-of-composition","title":"Example of Composition:","text":"<p>User Class: </p> user_service.py<pre><code>from models import User\n\nclass UserService(object):\n    def get_user_profile(user_id):\n        # Fetch user profile from the database\n        user = User.findById(user_id)\n        if not user:\n            raise Exception(\"User not found\")\n        return user\n\n    def update_user_profile(self, user, data):\n        #set user properties from data\n        ...\n        #other logic to update user profile\n        ...\n        user.saveIt()\n</code></pre> <p>Transaction Class using Composition:</p> profile.py<pre><code>from utils import render\nfrom default.service.user_service import UserService\n\nclass Profile(Layout):\n    def __init__(self):\n        self.user_service = UserService()\n\n    def view(self, ctx):\n        user_id = ...\n        user_profile = self.user_service.get_user_profile(user_id)\n        ctx.output[\"profile\"] = user_profile\n        ctx.go_to = render.as_view(ctx, \"profile\")\n\n    def update(self, ctx):\n        user_id = ...\n        #setup parameters from request\n        data = ...\n        user_profile = self.user_service.get_user_profile(user_id)\n        self.user_service.update_user_profile(user_profile, data)\n        ctx.go_to = render.as_view(ctx, \"profile\")\n</code></pre> <p>Here, <code>Profile</code> uses the <code>UserService</code> class to handle all user-related logic. This pattern keeps the transaction focused on request handling and delegates specific functionality to dedicated service classes. </p> <p>Important Note</p> <p>While S\u00d8AD supports inheritance and composition, it is crucial to use these features judiciously. Over-reliance on shared structures can lead to tightly coupled code, making it difficult to manage and debug transactions.</p> <p>S\u00d8AD promotes a discrete design style where transactions are ideally isolated and self-contained. While inheritance and composition are supported, overusing shared structures may introduce tight coupling, leading to unintended side effects when one transaction changes or fails. By keeping each transaction independent, the application becomes more robust, easier to debug, and safer to maintain in production environments.</p>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"code-libraries/ajax.html","title":"AJAX","text":"COMING SOON"},{"location":"code-libraries/auth0-integration.html","title":"Auth Integration","text":"COMING SOON"},{"location":"code-libraries/datatables.html","title":"Datatables","text":"<p>This code example shows how to build interactive tables using DataTables's server-side mode, with full support for paging, sorting, and column-specific search.</p> TransactionViewSQL employee.py<pre><code>from utils import render\nfrom models import Employee\n\nclass Employee_list(object):\n    def view(self, ctx):\n        # Loads the initial HTML page\n        ctx.go_to = render.as_view(ctx, \"employee_list\")\n\n    def ajax(self, ctx):\n        # DataTables standard parameters\n        request = ctx.getRequest()\n        draw = int(request.getParameter(\"draw\"))\n        start = int(request.getParameter(\"start\"))\n        length = int(request.getParameter(\"length\"))\n\n        # Build WHERE clause for global or column-specific search\n        query = \"1=1\"\n        params = []\n\n        # Global search\n        global_search = request.getParameter(\"search[value]\") or \"\"\n        if global_search:\n            query = query + \" AND (name LIKE ? OR department LIKE ? OR email LIKE ?)\"\n            wildcard = \"%s\" % global_search\n            params.extend([wildcard, wildcard, wildcard])\n\n        # Column-specific search\n        for i, col in enumerate([\"id\", \"name\", \"department\", \"email\"]):\n            search_value = request.getParameter(\"columns[%s][search][value]\" % i) or \"\"\n            if search_value:\n                query = query + \" AND %s LIKE ?\" % col\n                params.append(search_value)\n\n        # Sorting\n        order_col_index = request.getParameter(\"order[0][column]\")\n        order_col_name = [\"id\", \"name\", \"department\", \"email\"][int(order_col_index)] if order_col_index else \"name\"\n        order_dir = request.getParameter(\"order[0][dir]\") or \"asc\"\n        order_clause = \"%s %s\" % (order_col_name, order_dir.upper())\n\n        total_records = Employee.count()\n        filtered_records = Employee.count(query, *params) if query != \"1=1\" else total_records\n\n        employees = Employee.where(query, *params).offset(start).limit(length).orderBy(order_clause)\n\n        data = []\n        for emp in employees:\n            data.append([emp.get(\"id\"), emp.get(\"name\"), emp.get(\"department\"), emp.get(\"email\")])\n\n        result = {\n            \"draw\": draw,\n            \"recordsTotal\": total_records,\n            \"recordsFiltered\": filtered_records,\n            \"data\": data\n        }\n        ctx.go_to = render.as_json(ctx, result)\n</code></pre> employee_list.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Employee List&lt;/title&gt;\n    &lt;link href=\"https://cdn.datatables.net/v/dt/jq-3.7.0/dt-2.3.2/datatables.min.css\" rel=\"stylesheet\" integrity=\"sha384-dG72sN6C6+JA9moN/5eRa0GqXlYOpTivxgRRV4rTctUeb4ZNF6uuJ5NXmz+8+3Qi\" crossorigin=\"anonymous\"&gt;\n    &lt;script src=\"https://cdn.datatables.net/v/dt/jq-3.7.0/dt-2.3.2/datatables.min.js\" integrity=\"sha384-qLLX0jMaWXMZrun5/ry13tv5MX78CJNleGaaJVXRuJCDiAwyjhYWsTM3Qk3VaKC3\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Employee List&lt;/h1&gt;\n\n    &lt;table id=\"employeeTable\" class=\"display\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;ID&lt;/th&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Department&lt;/th&gt;\n                &lt;th&gt;Email&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tfoot&gt;\n            &lt;tr&gt;\n                &lt;th&gt;&lt;input type=\"text\" placeholder=\"Search ID\"&gt;&lt;/th&gt;\n                &lt;th&gt;&lt;input type=\"text\" placeholder=\"Search Name\"&gt;&lt;/th&gt;\n                &lt;th&gt;&lt;input type=\"text\" placeholder=\"Search Dept\"&gt;&lt;/th&gt;\n                &lt;th&gt;&lt;input type=\"text\" placeholder=\"Search Email\"&gt;&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/tfoot&gt;\n    &lt;/table&gt;\n\n    &lt;script&gt;\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            var table = $('#employeeTable').DataTable({\n                \"processing\": true,\n                \"serverSide\": true,\n                \"ajax\": \"/t/example/employee_list/ajax\",\n                \"columns\": [\n                    { \"title\": \"ID\" },\n                    { \"title\": \"Name\" },\n                    { \"title\": \"Department\" },\n                    { \"title\": \"Email\" }\n                ]\n            });\n\n            // Column-specific search\n            $('#employeeTable tfoot input').on('keyup change', function() {\n                let colIndex = $(this).parent().index();\n                table.column(colIndex).search(this.value).draw();\n            });\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>CREATE TABLE employee ( \n    id int NOT NULL AUTO_INCREMENT, \n    name varchar(300), \n    department varchar(300), \n    email varchar(300), \n    PRIMARY KEY (id) \n);\n\nINSERT INTO employee (name, department, email) VALUES\n('Olivia Chen', 'Marketing', 'olivia.chen@example.com'),\n('Benjamin Carter', 'IT', 'benjamin.carter@example.com'),\n('Sophia Rodriguez', 'Sales', 'sophia.rodriguez@example.com'),\n('Liam Goldberg', 'Finance', 'liam.goldberg@example.com'),\n('Ava Nguyen', 'HR', 'ava.nguyen@example.com'),\n('Noah Patel', 'IT', 'noah.patel@example.com'),\n('Isabella Kim', 'Marketing', 'isabella.kim@example.com'),\n('Mason Williams', 'Sales', 'mason.williams@example.com'),\n('Mia Garcia', 'Finance', 'mia.garcia@example.com'),\n('James Johnson', 'IT', 'james.johnson@example.com'),\n('Charlotte Martinez', 'HR', 'charlotte.martinez@example.com'),\n('William Davis', 'Sales', 'william.davis@example.com'),\n('Amelia Lee', 'Marketing', 'amelia.lee@example.com'),\n('Elijah Hernandez', 'IT', 'elijah.hernandez@example.com'),\n('Harper Gonzalez', 'Finance', 'harper.gonzalez@example.com'),\n('Lucas Wilson', 'Sales', 'lucas.wilson@example.com'),\n('Evelyn Anderson', 'HR', 'evelyn.anderson@example.com'),\n('Alexander Thomas', 'IT', 'alexander.thomas@example.com'),\n('Abigail Moore', 'Marketing', 'abigail.moore@example.com'),\n('Henry Taylor', 'Finance', 'henry.taylor@example.com'),\n('Emily Jackson', 'Sales', 'emily.jackson@example.com'),\n('Michael White', 'IT', 'michael.white@example.com'),\n('Sofia Harris', 'HR', 'sofia.harris@example.com'),\n('Daniel Martin', 'Marketing', 'daniel.martin@example.com'),\n('Madison Thompson', 'Finance', 'madison.thompson@example.com'),\n('Jacob Clark', 'IT', 'jacob.clark@example.com'),\n('Ella Lewis', 'Sales', 'ella.lewis@example.com'),\n('Logan Walker', 'Marketing', 'logan.walker@example.com'),\n('Victoria Hall', 'HR', 'victoria.hall@example.com'),\n('David Allen', 'IT', 'david.allen@example.com');\n</code></pre> <p>Transaction:</p> <ul> <li> Adds server-side sorting by reading the requested column index and sort direction</li> <li> Handles column-specific search by checking each column\u2019s <code>columns[i][search][value]</code></li> </ul> <p>View:</p> <ul> <li> Adds a footer row with input fields for each column</li> <li> Configures DataTables to trigger server-side column search on each input</li> <li> Fully supports sorting and pagination on the server</li> </ul>"},{"location":"code-libraries/datatables.html#how-it-works","title":"How It Works","text":"<ul> <li> Sorting: User clicks a column header \u2192 DataTables sends column index + sort direction \u2192 server applies <code>ORDER BY</code></li> <li> Column Search: User types in a footer field \u2192 DataTables sends column-specific <code>search[value]</code> \u2192 server filters results accordingly</li> <li> Global Search: Search bar above table triggers across all columns</li> </ul>"},{"location":"code-libraries/generate-excel.html","title":"Generate Excel","text":"COMING SOON"},{"location":"code-libraries/generate-pdf.html","title":"Generate PDF","text":"COMING SOON"},{"location":"code-libraries/htmx.html","title":"HTMX","text":"COMING SOON"},{"location":"code-libraries/json-api.html","title":"JSON API","text":"COMING SOON"},{"location":"code-libraries/listing.html","title":"Listing","text":"COMING SOON"},{"location":"code-libraries/upload-download.html","title":"Upload/Download","text":"COMING SOON"},{"location":"components/cli.html","title":"S\u00d8AD CLI","text":"<p>S\u00d8AD CLI is a client for S\u00d8AD that allows you to manage your S\u00d8AD projects easily. It provides commands to pull and push transactions from the S\u00d8AD Server. By using the CLI, you get the ability to edit your transactions locally using your favorite editor and then push the changes back to the S\u00d8AD Server. you can pull single transaction or all transactions from the Server but you can push only single transaction to the Server.</p> <p>By using this CLI, you can leverage the full power of your local editor, such as Visual Studio Code, along with its extensions and features. This allows you to edit transactions with advanced tools like syntax highlighting, linting, and version control integration, ensuring a seamless and efficient development experience.</p>"},{"location":"components/cli.html#installation","title":"Installation","text":"<p>To install the S\u00d8AD CLI, you can download the latest release from the S\u00d8AD CLI GitHub repository. After downloading, extract the contents and add the <code>sufia</code> executable to your system's PATH.</p>"},{"location":"components/cli.html#usage","title":"Usage","text":"<p>To use the S\u00d8AD CLI, open your terminal and run the following command:</p> <pre><code>sufia [command] [options]\n</code></pre>"},{"location":"components/cli.html#commands","title":"Commands","text":""},{"location":"components/cli.html#pull","title":"<code>pull</code>","text":"<p>Pulls transactions from the S\u00d8AD Server to your local machine.</p> <pre><code>sufia pull [options]\n</code></pre>"},{"location":"components/cli.html#options","title":"Options","text":"<ul> <li><code>--all</code>: Pull all transactions from the server.</li> <li><code>--group &lt;group_name&gt;</code>: Pull transactions from a specific group.</li> <li><code>--code &lt;transaction_code&gt;</code>: Pull a specific transaction by its code.</li> </ul>"},{"location":"components/cli.html#push","title":"<code>push</code>","text":"<p>Pushes a transaction from your local machine to the S\u00d8AD Server.</p> <pre><code>sufia push [options]\n</code></pre>"},{"location":"components/cli.html#options_1","title":"Options","text":"<ul> <li><code>--group &lt;group_name&gt;</code>: Specify the group of the transaction.</li> <li><code>--code &lt;transaction_code&gt;</code>: Specify the code of the transaction to push.</li> </ul> <pre><code>sufia help [command]\n</code></pre>"},{"location":"components/cli.html#options_2","title":"Options","text":"<ul> <li><code>command</code>: The specific command you want help with (e.g., <code>pull</code>, <code>push</code>).</li> </ul>"},{"location":"components/cli.html#examples","title":"Examples","text":"<ul> <li>Pull all transactions:   <pre><code>sufia pull --all\n</code></pre></li> <li>Pull transactions from a specific group:   <pre><code>sufia pull --group &lt;group_name&gt;\n</code></pre></li> <li>Pull a specific transaction:   <pre><code>sufia pull --group &lt;group_name&gt; --code &lt;transaction_code&gt;\n</code></pre></li> <li>Push a transaction to the server:   <pre><code>sufia push --group &lt;group_name&gt; --code &lt;transaction_code&gt;\n</code></pre></li> </ul>"},{"location":"components/database.html","title":"Database","text":"<p>S\u00d8AD Online IDE provides a built-in Database module that allows developers to manage database schema and interact with data directly within the IDE\u2014without needing external tools or installations.</p> <p>This module is useful for inspecting tables, writing SQL queries, and performing schema modifications in real-time while building your S\u00d8AD application.</p>"},{"location":"components/database.html#list-of-tables","title":"List of Tables","text":"<p>To display the list of tables, select the Database menu from the main navigation in the S\u00d8AD Online IDE. This opens the schema browser, where all tables in the current database are listed.</p> <p>A search bar at the top of the panel allows you to quickly locate a specific table by name. Just type part of the table name, and matching results will appear instantly\u2014making navigation efficient even in large schemas.</p> <p>The Action button next to a table type provides several management options, including:</p> <p></p> <ul> <li>View Data - Display the records stored in the selected table.</li> <li>View Table - Show the table structure, including columns and data types.</li> <li>Clone Table - Create a duplicate of the selected table.</li> <li>Generate CRUD - Automatically generate Create, Read, Update, and Delete operations for the table.</li> <li>Drop Table - Permanently delete the table from the database.</li> </ul>"},{"location":"components/database.html#create-new-table","title":"Create New Table","text":"<p>To create a new table, click on the Create New Table button located at the top right of the screen. This opens a modal window where you can define the table structure.</p> <p></p> Field Description Example Table Name Name of the table (max 64 characters) <code>hr_employee</code> Table Comments Useful description for table Employee Personal Record Column Name Column Name (max 64 characters) <code>staff_no</code> Data Type Data Type (Refer below) VARCHAR Length Length of data in integer (only applicable to type VARCHAR and DECIMAL) 20 NULL Column can accept NULL value or not NOT NULL Index Column is either PRIMARY (primary key), UNIQUE (unique index), INDEX (normal index) or NONE (normal column) Auto Inc Column is auto increment or not (only applicable to type NUMBER and key PRIMARY) Comment Useful description of column Staff No <ul> <li> <p>To add more columns, click the {+} button.</p> </li> <li> <p>To delete a column, click the {-} button.</p> </li> <li> <p>To move a column to the top, click the {arrow up} button.</p> </li> <li> <p>To move a column to the bottom, click the {arrow down} button.</p> </li> </ul>"},{"location":"components/database.html#supported-data-types","title":"Supported Data Types","text":"<p>The following data types are available:</p> <ul> <li><code>VARCHAR</code></li> <li><code>TEXT</code></li> <li><code>MEDIUMTEXT</code></li> <li><code>INT</code></li> <li><code>BIGINT</code></li> <li><code>BIT</code></li> <li><code>DECIMAL</code></li> <li><code>DATE</code></li> <li><code>DATETIME</code></li> <li><code>TIME</code></li> <li><code>BLOB</code></li> <li><code>MEDIUMBLOB</code></li> </ul>"},{"location":"components/database.html#sad-conventions","title":"S\u00d8AD Conventions","text":"<p>S\u00d8AD has a special treatment for handling BLOB (Binary Large Object) data types, which are used to store large binary files such as images or documents. When creating a BLOB column, S\u00d8AD automatically generates three related columns:</p> <ul> <li>Column to store the binary data (BLOB)</li> <li>Column to store the file name (VARCHAR)</li> <li>Column to store the file type (VARCHAR)</li> </ul> <p>This convention simplifies file handling in the application, allowing you to easily manage file uploads and retrievals. For example, if you create a column named <code>resume</code>, S\u00d8AD will automatically create three columns: <code>resume</code>, <code>resume_fn</code> (for file name), and <code>resume_ft</code> (for file type).</p> <p>Best Practice</p> <p>Use prefix for table name for easy maintenance. Normally the group name is a good candidate for prefix name e.g. prefix HR Group's table with <code>hr_</code>.</p> <p>S\u00d8AD Convention</p> <p>Every table must have a primary key column named <code>id</code>. A model class representing the table will be generated with class name same with table name (ORM) e.g. table <code>person</code> will have a correspondent class <code>Person</code>. Refer to the Data Type Mapping section below for details on how MySQL data types are mapped to Java types.</p>"},{"location":"components/database.html#data-type-mapping","title":"Data Type Mapping","text":"<p>Below is a reference table mapping common MySQL data types to the Java types used in S\u00d8AD:</p> MySQL Data Type Java Type VARCHAR String TEXT String MEDIUMTEXT String INT Integer BIGINT java.math.BigInteger BIT Boolean DECIMAL java.math.BigDecimal DATE java.sql.Date DATETIME java.time.LocalDateTime TIME java.sql.Time BLOB byte[] MEDIUMBLOB byte[]"},{"location":"components/database.html#alter-table","title":"Alter Table","text":"<p>To edit an existing table, click on the View Table link and click Edit Table button at the bottom. The table structure will be displayed, allowing modifications to the table structure.</p> <p></p> <ul> <li> <p>To add a new column, click the {+} symbol.</p> </li> <li> <p>To delete an unnecessary column, click the {-} symbol.</p> </li> <li> <p>To modify a column, click the pencil icon. This allows editing of the data type, length, nullability, and comments.</p> </li> </ul> <p>After making the necessary changes, click Execute on the right side of the table to apply the modifications.</p>"},{"location":"components/database.html#clone-table","title":"Clone Table","text":"<p>To clone a table, click on the Clone Table link as below:</p> <p></p> <p>The Clone Table feature allows users to duplicate an existing table along with its structure and data. This is useful for creating backups, testing modifications, or setting up similar tables without manually recreating them.</p> <p>When cloning a table, the system will generate a new table with the same columns, data types, and constraints as the original table. Users can modify the cloned table as needed after creation.</p>"},{"location":"components/database.html#generate-crud","title":"Generate CRUD","text":"<p>To Generate CRUD functions, click on the Generate CRUD link as below:</p> <p></p> <p>After filling in the Group, Code, and Name, it will generate a new Transaction with listing, create, update, and delete operations for the table. This feature automates the creation of basic CRUD (Create, Read, Update, Delete) operations for the selected table.</p> <p></p>"},{"location":"components/database.html#drop-table","title":"Drop Table","text":"<p>To drop a table, click on the Drop Table link as below:</p> <p></p> <p>Before dropping a table, ensure it is no longer needed, as this action cannot be undone. Use this feature with caution to avoid accidental data loss.</p>"},{"location":"components/database.html#introspect","title":"Introspect","text":"<p>Click on the Introspect link as below to trigger introspection process:</p> <p></p> <p>The Introspect feature in S\u00d8AD automatically generates Java classes from database tables by reading the table structure. This process runs automatically and ensures that the generated files reflect the latest database scheme. </p> <p>However, if any modifications are made directly to the database outside of S\u00d8AD, it will not detect these changes. Therefore, manual introspection is necessary to synchronize the system with the updated table structure, similar to restarting a server.</p>"},{"location":"components/database.html#open-query","title":"Open Query","text":"<p>Open Query function allows users to interact with the database by retrieving, adding, updating, or deleting data.</p> <p>To open the SQL query editor, click on the Open Query button located at the top right of the Database module. This opens a text area where you can write and execute SQL queries directly against your database.</p> <p></p>"},{"location":"components/database.html#common-sql-operations-supported","title":"Common SQL Operations Supported","text":"<p>1. Retrieving Data - Use the <code>SELECT</code> statement to fetch record form the table. <pre><code>SELECT * FROM table_name;\n</code></pre></p> <p>2. Inserting Data - Use the <code>INSERT INTO</code> statement to add new records. <pre><code>INSERT INTO table_name (column1, column2) VALUES (value1, value2);\n</code></pre></p> <p>3. Updating Data - Modify existing records using the <code>UPDATE</code> statement. <pre><code>UPDATE table_name SET column1 = value1 WHERE condition;\n</code></pre></p> <p>4. Deleting Data - Remove specific records using the <code>DELETE</code> statement. <pre><code>DELETE FROM table_name WHERE condition;\n</code></pre></p> <p>By selecting and executing a query, users can see the results displayed in the table at the bottom of the screen.</p>"},{"location":"components/file-manager.html","title":"File Manager","text":"<p>The File Manager allows developers to manage the file structure of their application directly within the IDE. It provides access to all folders and files located under the <code>/webapp/</code> directory, which includes assets, templates, and static resources used by the application.</p> <p>You can use it for uploading and organizing additional files such as stylesheets, JavaScript scripts, images, and documents\u2014without requiring direct access to the file system or deployment infrastructure.</p> <p></p>"},{"location":"components/file-manager.html#overview-of-features","title":"Overview of Features","text":""},{"location":"components/file-manager.html#1-directory-navigation","title":"1. Directory Navigation","text":"<ul> <li>Browse through the <code>/webapp</code> folder and its subdirectories.</li> <li>Expand folders to view their contents and file structure.</li> <li>Easily locate and manage static resources like HTML, CSS, or JS files.</li> </ul>"},{"location":"components/file-manager.html#2-file-upload","title":"2. File Upload","text":"<ul> <li>Upload new files (e.g., <code>.css</code>, <code>.js</code>, <code>.jpg</code>, <code>.pdf</code>, etc.) to any directory.</li> <li>Supports multiple uploads in one action.</li> <li>Uploaded files are immediately accessible to the application through relative URLs.</li> </ul>"},{"location":"components/file-manager.html#3-file-management","title":"3. File Management","text":"<ul> <li>Rename or delete existing files.</li> <li>Create new folders or move files between directories.</li> <li>View or edit plain text files such as <code>.html</code>, <code>.txt</code>, <code>.json</code>, or <code>.xml</code>.</li> </ul>"},{"location":"components/file-manager.html#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Uploading Assets: Add custom stylesheets, JavaScript libraries, or images used in HTML templates.</li> <li>Serving Static HTML: Store and serve standalone <code>.html</code> files outside the transaction system.</li> <li>Documentation: Upload terms of use, privacy policy, or help documents as downloadable resources.</li> <li>Custom Fonts or Icons: Add font packs or SVG icon files as needed by your design.</li> </ul> <p>Did You Know?</p>"},{"location":"components/file-manager.html#zip-file-upload-extraction","title":"ZIP File Upload &amp; Extraction","text":"<p>When you upload a ZIP archive through the File Manager, it will appear in the file list with an Unzip button next to it. Clicking this button will extract the contents of the ZIP file directly into the current folder.</p> <p>This feature is useful for:</p> <ul> <li>Uploading entire directories of assets (e.g., CSS frameworks, JavaScript plugins).</li> <li>Migrating static sites or bulk resource files.</li> <li>Quickly setting up new asset packs without manually uploading individual files.</li> </ul> <p>After extraction, all files and folders inside the ZIP will be immediately accessible under the current directory in /webapp.</p>"},{"location":"components/overview.html","title":"S\u00d8AD Online IDE","text":"<p>The S\u00d8AD Online IDE is a web-based development environment tailored specifically for building applications using the S\u00d8AD Framework. It simplifies the development process by providing integrated tools that let you work with transactions, models, server logs, and static assets\u2014all from your browser.</p> <p>Whether you're prototyping or maintaining a full-scale enterprise app, the S\u00d8AD Online IDE eliminates the need to set up a local development environment, making development faster and more accessible.</p>"},{"location":"components/overview.html#features","title":"Features","text":""},{"location":"components/overview.html#1-database-editor","title":"1. Database Editor","text":"<p>The Database module acts as an online schema and data editor for your application:</p> <ul> <li>Create, alter, or drop tables using a visual interface or raw SQL queries.</li> <li>Run SQL statements directly to explore or manipulate your data.</li> <li>Any table created or modified here will automatically generate (or update) the corresponding ActiveJDBC Model class, ready for use in your transactions.</li> </ul>"},{"location":"components/overview.html#2-transaction-editor","title":"2. Transaction Editor","text":"<p>The Transaction editor is a central feature of the IDE. It allows you to:</p> <ul> <li>Create new transactions via a guided modal that prompts for group, code, and transaction name.</li> <li>Automatically generate folder and file structures based on S\u00d8AD conventions.</li> <li>Edit existing transaction logic with a built-in editor that supports:</li> <li>Syntax highlighting</li> <li>Code snippets for common patterns</li> <li>Helper functions and simple auto-completion</li> </ul> <p>This ensures that developers can quickly build and modify controllers (transactions) without leaving the browser.</p>"},{"location":"components/overview.html#3-server-log-viewer","title":"3. Server Log Viewer","text":"<p>This feature provides real-time access to the embedded application server's logs:</p> <ul> <li>Trace log statements and logging output from your transaction code.</li> <li>View errors, stack traces, and debugging information.</li> <li>Download logs for offline review or audit purposes.</li> </ul> <p>This tool is essential for diagnosing issues or confirming application behavior without restarting or redeploying.</p>"},{"location":"components/overview.html#4-file-manager","title":"4. File Manager","text":"<p>The built-in file manager lets you manage assets within your project:</p> <ul> <li>Navigate directories and view/download files.</li> <li>Upload files such as images, CSS, JavaScript, or downloadable assets.</li> <li>Organize your static resources as needed for frontend rendering.</li> </ul> <p>The file manager simplifies static asset handling in a server-side rendered environment, keeping everything you need accessible in one place.</p> <p>The S\u00d8AD Online IDE helps you with the framework\u2019s convention-based approach. It streamlines common tasks and gives developers everything they need to build, test, and debug\u2014all from the browser.</p>"},{"location":"components/server_log.html","title":"Server Log Viewer","text":"<p>S\u00d8AD Online IDE includes a built-in Server Log Viewer that allows developers to monitor application behavior, debug issues, and trace transaction flow in real time. It provides a clear view into the internal server activity during application runtime.</p>"},{"location":"components/server_log.html#log-panel-overview","title":"Log Panel Overview","text":"<p>The Server Log Viewer can be accessed from the Server Log tab in the top navigation menu of the S\u00d8AD Online IDE.</p> <p></p>"},{"location":"components/server_log.html#features","title":"Features","text":"<ul> <li>Live Log View: Displays recent logs, including application events, transaction traces, errors, and log output from transaction code.</li> <li>Line Limit: You can specify how many of the latest lines you want to view. By default, the system shows the last 800 lines.</li> <li>Scroll Support: You can scroll through logs to explore older entries in the current range.</li> <li>Download Full Log: A Download button is available to export the entire log for offline analysis, team sharing, or archival purposes.</li> </ul>"},{"location":"components/server_log.html#use-cases","title":"Use Cases","text":"<ul> <li>Debugging: Trace log output or inspect transaction execution.</li> <li>Monitoring: Track server events, startup information, and servlet activity.</li> <li>Error Analysis: Quickly locate stack traces or failure messages.</li> </ul> <p>The Server Log Viewer is a valuable tool during development, testing, and diagnosing issues without needing to access the file system directly.</p>"},{"location":"components/server_log.html#example-usage","title":"Example Usage","text":"<p>When you run a transaction, any <code>print()</code> statements or logging calls will appear in the Server Log Viewer. This allows you to see real-time output from your transaction code, making it easier to debug and understand application behavior.</p> <pre><code>from sufia.util import Log\n\nclass MyTransaction:\n    def view(self, ctx):\n        Log.info(ctx, \"Starting my transaction\")\n        # Your transaction logic here\n        print(\"This will appear in the server log\")\n        Log.print(ctx, \"Transaction completed successfully\") #same as info()\n</code></pre> <p>Note</p> <p><code>print()</code> statements in your transaction will appear in the server log. However, for more structured and consistent logging, it is recommended to use the <code>Log.info()</code>, <code>Log.debug()</code>, or <code>Log.print()</code> methods.</p> <p>If S\u00d8AD is running in a containerized environment, the <code>print()</code> output cannot be captured by the IDE. Therefore, you should use the <code>Log.info()</code>, <code>Log.debug()</code>, or <code>Log.print()</code> methods, as these work well inside containers.</p>"},{"location":"components/transactions/create-transactions.html","title":"Transaction Editor","text":"<p>The Transaction Editor in S\u00d8AD Online IDE is a central feature that allows you to create, edit, and manage transaction files directly in your browser. A transaction consists of Jython code (controller logic) and associated HTML view templates, which are tightly coupled through S\u00d8AD's convention-based routing system.</p> <p>This editor is designed to streamline development by offering an intuitive interface, syntax highlighting, and automatic file management\u2014all without requiring local development setup.</p> <p>This guide provides step-by-step instructions on how to create a new Transaction using the Transaction Editor. It covers the Transaction creation process, available fields, and an overview of the code editor interface.</p>"},{"location":"components/transactions/create-transactions.html#creating-a-new-transaction","title":"Creating a New Transaction","text":"<p>To create a new Transaction, follow these steps:</p> <ol> <li> <p>Navigate to Home &gt; Application &gt; Open &gt; Transaction &gt; Create New Transaction.</p> </li> <li> <p>Click on Create New Transaction to initiate the process.</p> </li> <li> <p>A modal will appear where you can enter the Transaction details.</p> </li> </ol> <p></p> <p>Create New Transaction</p>"},{"location":"components/transactions/create-transactions.html#transaction-details","title":"Transaction Details","text":"<p>Upon initiating the creation of a new Transaction, a modal window will be displayed:</p> <p></p> <p>Create New Transaction Modal</p>"},{"location":"components/transactions/create-transactions.html#transaction-fields","title":"Transaction Fields","text":"<ul> <li> <p>Group Transaction   This field allows you to categorize the Transaction into a specific folder for better organization.</p> </li> <li> <p>Code Transaction   The Code Transaction serves as a unique identifier for the Transaction, facilitating efficient tracking and management.</p> </li> <li> <p>Named Transaction   This field is used to specify the name of the Transaction.</p> </li> </ul> <p>Once the details are filled in, confirm and proceed to create the Transaction.</p>"},{"location":"components/transactions/create-transactions.html#code-editor-and-interface","title":"Code Editor and Interface","text":"<p>After successfully creating the Transaction, the Transaction code will be listed in the Transaction list explorer.</p> <p>Click on the Transaction code to open the Transaction in Code Editor Interface:</p> <p></p> <p>Code Editor Interface</p>"},{"location":"components/transactions/create-transactions.html#code-editor-buttons-and-functions","title":"Code Editor Buttons and Functions","text":""},{"location":"components/transactions/create-transactions.html#primary-functions","title":"Primary Functions","text":"<p>The code editor provides a range of options to manage and develop the Transaction:</p> <ol> <li> <p>Create New Transaction    Initiates the creation of another new Transaction.</p> </li> <li> <p>Save    Saves the Transaction or the current code progress.</p> </li> <li> <p>Add New View    Allows users to add an additional view (HTML) to the Transaction.</p> </li> <li> <p>Fullscreen    Expands the code editor to full-screen mode for an enhanced viewing experience.</p> </li> <li> <p>Run    Executes the Transaction and displays it in a new tab.</p> </li> </ol>"},{"location":"components/transactions/create-transactions.html#additional-options-hamburger-menu","title":"Additional Options - Hamburger Menu","text":"<p>The Hamburger Button provides access to more features:</p> <p></p> <p>Hamburger Button</p> <ul> <li>Clone: Duplicates the Transaction for easier modifications.</li> <li>Close: Closes the currently opened Transaction.</li> <li>Delete: Permanently removes the Transaction.</li> <li>Help: Opens the documentation for guidance on using Transactions.</li> </ul>"},{"location":"components/transactions/create-transactions.html#code-editor-sections","title":"Code Editor Sections","text":"<p>The Code Editor is divided into two main sections:</p>"},{"location":"components/transactions/create-transactions.html#1-transaction-code-editor-backend-no7","title":"1. Transaction Code Editor (Backend) No.7","text":"<p>This section is dedicated to the backend logic of the Transaction.</p> <ul> <li>The backend logic includes data processing, database operations, and business logic.</li> <li>The language used is Jython.</li> <li>Code snippets and templates are available to help developers quickly implement common functionalities (e.g. Model data setter).</li> </ul>"},{"location":"components/transactions/create-transactions.html#2-transaction-code-editor-frontend-no8","title":"2. Transaction Code Editor (Frontend) No.8","text":"<p>This section is dedicated to the frontend logic of the Transaction.</p> <ul> <li>The frontend logic includes HTML, CSS, and JavaScript.</li> </ul>"},{"location":"components/transactions/versioning.html","title":"Versioning in S\u00d8AD","text":"<p>S\u00d8AD includes a built-in versioning system that automatically tracks changes to each transaction. Every time a transaction is modified and saved, a new version is recorded. This mechanism acts as a lightweight backup and change history, making it easy to review past edits or recover from accidental overwrites.</p> <p>In addition to version tracking, S\u00d8AD provides a Diff Mode feature that allows developers to compare different versions of a transaction side by side. This helps during code reviews, debugging, or identifying when and how changes were introduced.</p>"},{"location":"components/transactions/versioning.html#accessing-version-history","title":"Accessing Version History","text":"<p>Version management is integrated into the Transaction Panel within the S\u00d8AD Online IDE. Here\u2019s how it works:</p>"},{"location":"components/transactions/versioning.html#transaction-panel-overview","title":"Transaction Panel Overview","text":"<p>The Transaction Panel shows the current transaction list and provides access to versioning features.</p> <p></p> <p>Transaction Panel</p> <ul> <li>Last Updated: Located at the bottom-left of the panel. Displays the most recent modification timestamp.</li> <li>Version Button: Located at the bottom-right. Clicking this button opens the Versioning Panel, which lists all available versions of the current transaction.</li> </ul>"},{"location":"components/transactions/versioning.html#working-with-the-versioning-panel","title":"Working with the Versioning Panel","text":"<p>The Versioning Panel offers a chronological list of all saved versions of a transaction, including metadata like timestamps and author names.</p> <p></p> <p>Transaction Panel</p>"},{"location":"components/transactions/versioning.html#key-components","title":"Key Components","text":"<ol> <li> <p>Version List</p> <ul> <li>Displays versions with associated date and author.</li> <li>Click a version to preview its contents.</li> </ul> </li> <li> <p>All Versions</p> <ul> <li>Button located at the top-right of the Versioning Panel.</li> <li>Displays a complete list of all stored versions for the current transaction. By default, it shows versions with label only.</li> </ul> </li> <li> <p>Diff Mode</p> <ul> <li>Also accessible via a button at the top-right of the panel.</li> <li>Allows you to select two versions for side-by-side comparison.</li> </ul> </li> </ol>"},{"location":"components/transactions/versioning.html#using-diff-mode","title":"Using Diff Mode","text":"<p>Diff Mode is designed to help developers visually compare two versions of the same transaction.</p> <p></p> <p>Diff Mode</p>"},{"location":"components/transactions/versioning.html#how-diff-mode-works","title":"How Diff Mode Works:","text":"<ul> <li>Displays two versions side by side for direct comparison.</li> <li>Highlights differences in teal color, making it easy to spot changes.</li> <li>The current version is displayed on the left side of the panel.</li> </ul>"},{"location":"framework/api.html","title":"Runtime API","text":""},{"location":"framework/api.html#ctx-the-webcontext-object","title":"<code>ctx</code> \u2014 The WebContext Object","text":"<p>In S\u00d8AD, every transaction method receives a single parameter named <code>ctx</code>, which stands for WebContext. This object encapsulates all information and utility methods relevant to the current request lifecycle.</p> <p>The <code>ctx</code> object gives developers access to:</p> <ul> <li>Session management</li> <li>Input parameters and headers</li> <li>Output data for views (via <code>ctx.output</code>)</li> <li>Redirection, file upload handling, and more</li> </ul> <p>The <code>ctx</code> object is automatically passed into each method of your transaction class (e.g., <code>view(self, ctx)</code>, <code>submit(self, ctx)</code>) and serves as the primary interface for handling request-response logic.</p>"},{"location":"framework/api.html#available-methods-and-properties","title":"Available Methods and Properties","text":"Feature Description <code>ctx.getRequest()</code> Returns the underlying <code>HttpServletRequest</code> object. Use this to get request parameters. <code>ctx.getResponse()</code> Returns the <code>HttpServletResponse</code> object. <code>ctx.output</code> A map used to pass values into the view layer (used by Handlebars templates). <code>ctx.go_to</code> The response object that will be rendered (e.g., <code>render.as_view(...)</code>). <code>ctx.ctxPath</code> The context path of the deployed application (useful for building URLs). <code>ctx.getAppName()</code> Returns the name of the application. <code>ctx.getGroup()</code> Returns the group name of the current transaction. <code>ctx.getCode()</code> Returns the name of the current transaction code. <code>ctx.getMethod()</code> Returns the HTTP method used for the request (GET, POST, etc.)."},{"location":"framework/api.html#example-usage","title":"Example Usage","text":"<pre><code>def view(self, ctx):\n    request = ctx.getRequest()\n    user_id = request.getParameter(\"id\")\n    ctx.output[\"user\"] = User.findById(user_id)\n    ctx.go_to = render.as_view(ctx, \"profile\")\n</code></pre> <pre><code>def login(self, ctx):\n    request = ctx.getRequest()\n    username = request.getParameter(\"username\")\n    password = request.getParameter(\"password\")\n\n    if Auth.validate(username, password):\n        session = ctx.getRequest().getSession(True)\n        session.setAttribute(\"user\", username)\n        ctx.go_to = \"%s/t/dashboard/home\" % ctx.ctxPath\n    else:\n        ctx.output[\"error\"] = \"Invalid credentials\"\n        ctx.go_to = render.as_view(ctx, \"login\")\n</code></pre>"},{"location":"framework/api.html#integration-with-view","title":"Integration with View","text":"<p>The <code>ctx.output</code> map is what feeds data into the Handlebars views.</p> <pre><code>ctx.output[\"user_name\"] = \"Borhan\"\nctx.go_to = render.as_view(ctx, \"welcome\")\n</code></pre> <p>In your HTML:</p> <pre><code>&lt;h1&gt;Welcome, {{user_name}}&lt;/h1&gt;\n</code></pre>"},{"location":"framework/api.html#render-response-output-utilities","title":"<code>render</code> \u2014 Response Output Utilities","text":"<p>The <code>render</code> module defines how a transaction responds to a request. These utilities help return HTML, JSON, string, files, or binary content from the server. Each render method should be assigned to <code>ctx.go_to</code>.</p>"},{"location":"framework/api.html#1-renderas_view","title":"1. <code>render.as_view()</code>","text":"<p>Renders a Handlebars HTML template as the response. This is the most common way to return a page to the browser in S\u00d8AD.</p> <p>This function uses the view name to locate the appropriate <code>.html</code> file within the transaction's corresponding <code>_group</code> folder. If not specified, it defaults to the current transaction's group and code.</p> <p>Function Signature: <pre><code>render.as_view(ctx, view, group=None, code=None, loc=None, file=None, combine_map=None)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>ctx</code>: The transaction context object.</li> <li><code>view</code> (str): The name of the view (HTML template) to render.</li> <li><code>group</code> (str, optional): The group/module name. Defaults to the current transaction\u2019s group.</li> <li><code>code</code> (str, optional): The transaction code. Defaults to the current transaction.</li> <li><code>loc</code> (str, optional): Alternative path location override.</li> <li><code>file</code> (str, optional): Direct path to an HTML file.</li> <li><code>combine_map</code> (Map, optional): Extra data to merge into the Handlebars context.</li> </ul> <p>Basic usage:</p> <pre><code>ctx.output[\"title\"] = \"Welcome\"\nctx.go_to = render.as_view(ctx, \"home\")\n</code></pre> <p>This will render <code>_home/home.html</code> and pass <code>title</code> as a Handlebars variable.</p> <p>Render from another transaction group:</p> <pre><code>ctx.go_to = render.as_view(ctx, \"register\", group=\"auth\", code=\"signup\")\n</code></pre> <p>This will look for <code>_auth/signup/register.html</code>.</p>"},{"location":"framework/api.html#2-renderas_json","title":"2. <code>render.as_json()</code>","text":"<p>Returns a JSON-formatted response to the client. Useful for AJAX or API-style interactions.</p> <p>Function Signature: <pre><code>render.as_json(ctx, obj=None)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>obj</code> (optional): a dictionary or serializable object to return as JSON. If not provided, <code>ctx.output</code> is used.</li> </ul> <p>Basic usage: <pre><code>ctx.output[\"message\"] = \"Operation successful\"\nctx.go_to = render.as_json(ctx)\n</code></pre></p> <pre><code>data = {\"status\": \"success\", \"user\": {\"id\": 1, \"name\": \"Borhan\"}}\nctx.go_to = render.as_json(ctx, data)\n</code></pre> <p>Example with ActiveJDBC model:</p> <pre><code>users = Tb_user.findAll().toMaps()\nctx.go_to = render.as_json(ctx, users)\n</code></pre>"},{"location":"framework/api.html#3-renderas_html","title":"3. <code>render.as_html()</code>","text":"<p>Returns a raw HTML file directly from the filesystem, bypassing the Handlebars rendering engine. Ideal for serving pre-rendered static content.</p> <p>Function Signature: <pre><code>render.as_html(ctx, code=None, loc=None)\n</code></pre> Parameters:</p> <ul> <li><code>code</code> (str, optional): The code of the HTML file to render. If not provided, it defaults to the current transaction code.</li> <li><code>loc</code> (str, optional): Alternative path location override.</li> </ul> <p>Basic usage: <pre><code>ctx.go_to = render.as_html(ctx, \"dashboard\")\n</code></pre></p> <p>Render from a custom folder:</p> <pre><code>ctx.go_to = render.as_html(ctx, code=\"faq\", loc=\"/web/static/pages\")\n</code></pre> <p>This will look for <code>/web/static/pages/&lt;app_name&gt;/&lt;group&gt;/faq.html</code></p>"},{"location":"framework/api.html#4-renderas_string","title":"4. <code>render.as_string()</code>","text":"<p>Returns raw string content (HTML or plain text) directly to the browser. Bypasses any view engine or file lookup.</p> <p>Use case: Error messages, short inline content, quick HTML feedback.</p> <p>Function Signature: <pre><code>render.as_string(ctx, text)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code>: The string content to return. This can be HTML or plain text.</li> </ul> <p>Example: <pre><code>ctx.go_to = render.as_string(ctx, \"Access Denied\")\n</code></pre></p>"},{"location":"framework/api.html#5-renderas_file","title":"5. <code>render.as_file()</code>","text":"<p>Sends a file to the client for download or inline viewing.</p> <p>Function Signature: <pre><code>render.as_file(ctx, file, content_type, filename=None, attachment=True)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>file</code>: a Java <code>File</code> object or file path (string)</li> <li><code>content_type</code>: MIME type (e.g., <code>application/pdf</code>, <code>image/png</code>)</li> <li><code>filename</code> (optional): custom filename for the download</li> <li><code>attachment</code> (bool): if <code>True</code>, forces download; if <code>False</code>, displays inline. Default is <code>True</code>.</li> </ul> <p>Example:</p> <pre><code>ctx.go_to = render.as_file(ctx, reportFile, \"application/pdf\", filename=\"report.pdf\", attachment=True)\n</code></pre> <p>Display an image:</p> <pre><code>ctx.go_to = render.as_file(ctx, \"/path/to/image.png\", \"image/png\")\n</code></pre>"},{"location":"framework/api.html#6-renderas_blob","title":"6. <code>render.as_blob()</code>","text":"<p>Returns raw binary content such as images, audio, or PDF streams.</p> <p>Use case: Useful when file content is stored in memory (e.g., in a database blob).</p> <p>Function Signature: <pre><code>render.as_blob(ctx, data, content_type, filename=None, attachment=True)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code>: binary data (bytes) to return</li> <li><code>content_type</code>: MIME type (e.g., <code>image/png</code>, <code>application/pdf</code>)</li> <li><code>filename</code> (optional): name of the file to suggest for download</li> <li><code>attachment</code> (bool): if <code>True</code>, forces download; if <code>False</code>, displays inline. Default is <code>True</code>.</li> </ul> <p>Example:</p> <pre><code>attachment = Attachment.findById(123)\nfile_content = attachment.get(\"content\")  # Assuming content is stored as blob\nctx.go_to = render.as_blob(ctx, file_content, \"application/pdf\", \"preview.pdf\", attachment=False)\n</code></pre>"},{"location":"framework/api.html#7-renderas_pdf","title":"7. <code>render.as_pdf()</code>","text":"<p>Renders a Handlebars-based HTML template into a PDF document. Can be served inline or as a download. The PDF generation is handled by the Flying Saucer library, which converts well-formed XML (or XHTML) to PDF format.</p> <p>Function Signature: <pre><code>render.as_pdf(ctx, view, group=None, code=None, filename=None, combine_map=None, attachment=False)\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>view</code>: the Handlebars view name (required)</li> <li><code>group</code>: the transaction group name (optional, defaults to current group)</li> <li><code>code</code>: the transaction code (optional, defaults to current code)</li> <li><code>filename</code>: name of the PDF file returned to client</li> <li><code>attachment</code>: if <code>True</code>, triggers download</li> </ul> <p>Example:</p> report.py<pre><code>ctx.output[\"attendance\"] = Attendance.findAll()\nctx.output[\"date\"] = \"2023-10-01\"\nctx.go_to = render.as_pdf(ctx, \"report\")\n</code></pre> report.html<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;PDF Report&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Attendance Report&lt;/h1&gt;\n    &lt;p&gt;Date: {{date}}&lt;/p&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Name&lt;/th&gt;\n            &lt;th&gt;Status&lt;/th&gt;\n        &lt;/tr&gt;\n        {{#each attendance}}\n        &lt;tr&gt;\n            &lt;td&gt;{{name}}&lt;/td&gt;\n            &lt;td&gt;{{status}}&lt;/td&gt;\n        &lt;/tr&gt;\n        {{/each}}\n    &lt;/table&gt;\n    &lt;p&gt;End of Report&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"framework/architecture.html","title":"Architecture","text":""},{"location":"framework/architecture.html#mvc","title":"MVC","text":"<p>S\u00d8AD Framework is based on the well-known Model-View-Controller (MVC) pattern, which helps separate application concerns:</p> <ul> <li>Model: Database interaction is handled using ActiveJDBC, which allows for POJO-style models mapped directly from database tables. These models are automatically generated at startup.</li> <li>View: Presentation logic is written in HTML and rendered using handlebars.java, a powerful templating engine that integrates seamlessly with Java.</li> <li>Controller (Transaction): Instead of the traditional term \"controller,\" S\u00d8AD uses the term Transaction to represent controller logic. Transactions are written in Jython, allowing Pythonic syntax while leveraging the power of Java underneath.</li> </ul>"},{"location":"framework/architecture.html#system-architecture","title":"System Architecture","text":"<p>S\u00d8AD System Architecture</p> <p>The architecture diagram shows the internal structure of the S\u00d8AD Framework. Incoming HTTP requests are routed through a Transaction Manager, which maps the request URL to a corresponding Jython transaction file. The transaction executes business logic, interacts with the Model (via ActiveJDBC), and prepares a response context (<code>ctx.output</code>). This context is then passed to the View layer where Handlebars templates generate the final HTML output.</p> <p>Key components:</p> <ul> <li>Embedded Application Server</li> <li>Java Servlet API</li> <li>Jython Runtime</li> <li>ActiveJDBC for ORM</li> <li>Handlebars.java for templating</li> <li>Pre-bundled static assets (CSS, JS, HTML)</li> </ul>"},{"location":"framework/base.html","title":"S\u00d8AD Base","text":"<p>S\u00d8AD Base provides foundational features to jumpstart enterprise web applications.</p>"},{"location":"framework/base.html#built-in-modules","title":"Built-in Modules","text":"<ul> <li>User Management: Create, update, and manage users.</li> <li>Role Management: Assign roles to users and define their scope.</li> <li>Menu Management: Dynamic menu system with visibility control.</li> <li>Access Control: Permission-based routing and visibility.</li> <li>Login/Logout: Built-in authentication cycle.</li> <li>Dashboard: Default home with placeholders for KPIs and user info.</li> </ul> <p>These modules serve as a starting point and can be extended or replaced based on your application needs.</p>"},{"location":"framework/buildingblocks.html","title":"Building Blocks","text":""},{"location":"framework/buildingblocks.html#jython","title":"Jython","text":"<p>Jython is a Java implementation of Python. It allows developers to write Python code that interacts with Java libraries. In S\u00d8AD, all Transactions (controller logic) are written in Jython.</p>"},{"location":"framework/buildingblocks.html#mysql","title":"MySQL","text":"<p>MySQL is the default database used in S\u00d8AD, chosen for its reliability, performance, and community support. However, S\u00d8AD supports any RDBMS with a JDBC driver.</p>"},{"location":"framework/buildingblocks.html#activejdbc","title":"ActiveJDBC","text":"<p>ActiveJDBC is a Java-based ORM that follows the Active Record pattern. It automatically maps database tables to model classes and includes powerful query methods such as <code>findAll()</code>, <code>where()</code>, <code>first()</code>, and <code>saveIt()</code>.</p> <p>S\u00d8AD will auto-generate a Model class for each table on startup or via the introspection API.</p>"},{"location":"framework/buildingblocks.html#handlebarsjava","title":"handlebars.java","text":"<p>handlebars.java is a Java port of the popular Handlebars templating language. It powers the View layer in S\u00d8AD and uses <code>ctx.output</code> (a Java <code>Map</code>) to populate template variables.</p>"},{"location":"framework/buildingblocks.html#html-css-and-javascript","title":"HTML, CSS, and JavaScript","text":"<p>S\u00d8AD comes bundled with carefully selected front-end libraries so developers can hit the ground running. While defaults are provided, the framework remains flexible enough to integrate with other libraries.</p>"},{"location":"framework/buildingblocks.html#bootstrap","title":"bootstrap","text":"<p>Bootstrap is included for responsive design and prebuilt UI components.</p>"},{"location":"framework/buildingblocks.html#htmx","title":"htmx","text":"<p>htmx is included to enable dynamic HTML updates without needing heavy frontend frameworks.</p> <p>Other integrated JavaScript libraries:</p> <ul> <li>jQuery</li> <li>FullCalendar</li> <li>DataTables</li> </ul>"},{"location":"framework/components.html","title":"S\u00d8AD Framework Components","text":""},{"location":"framework/components.html#transaction-the-controller-layer","title":"Transaction: The Controller Layer","text":"<p>Transactions in S\u00d8AD act as the primary entry point for executing business logic in response to a URL request. Each transaction is mapped to a URL using a structured convention:</p> <pre><code>/t/{group}/{code}/{action}\n</code></pre> <ul> <li>Group: A logical folder that represents a module or feature set, used to organize related transactions (e.g., <code>web</code>, <code>admin</code>, <code>user</code>).</li> <li>Code: The transaction identifier, which corresponds to the <code>.py</code> file and class name (e.g., <code>home</code> maps to <code>home.py</code> and <code>Home</code> class).</li> </ul> <p>For instance, the URL <code>/t/web/home</code> translates to:</p> <ul> <li><code>web</code> as the group (folder)</li> <li><code>home</code> as the code (Python file and class name)</li> <li><code>view()</code> as the default method executed, unless an alternative action is specified</li> </ul> <p>This pattern keeps your codebase modular and consistent, supporting better project organization as your application grows.</p> <p>When a client sends a request such as <code>/t/web/home/view</code>, the framework handles it through the following flow:</p> <p></p> <p>S\u00d8AD Transaction Flow</p> <ol> <li>Start a Database Transaction \u2013 The framework initiates a connection using ActiveJDBC's <code>Base.openTransaction()</code>. This ensures all operations are enclosed in a database transaction.</li> <li>Locate the Transaction Class \u2013 The request is mapped to a specific Jython file and class. For example, <code>/t/web/home/view</code> maps to <code>web/home.py</code>, class <code>Home</code>, method <code>view()</code>.</li> <li>Execute Transaction Logic \u2013 The defined method (<code>view(ctx)</code> or any other action) is executed.</li> <li>Exception Handling \u2013 If any exception is thrown during execution, the framework performs a rollback using <code>Base.rollbackTransaction()</code> to ensure no partial writes corrupt the database.</li> <li>Commit and Close \u2013 If execution completes without exception, changes are committed using <code>Base.commitTransaction()</code> and the connection is closed with <code>Base.close()</code>.</li> </ol> <p>This transactional structure ensures data integrity and reduces boilerplate error-handling code for developers.</p> <p>Finally, the transaction method defines how the response should be returned to the client. This is done by setting <code>ctx.go_to</code> to a render method, which determines the output format\u2014typically an HTML view or JSON response.</p> <p>Example:</p> <p>URL: <code>/t/web/home</code></p> <p>File: <code>web/home.py</code> <pre><code>from utils import render\n\nclass Home(Layout):\n    def __init__(self):\n        pass\n\n    def view(self, ctx):\n        ctx.go_to = render.as_view(ctx, \"home\")\n</code></pre></p> <p>This Transaction maps directly to the folder structure:</p> <ul> <li>Python file: <code>web/home.py</code></li> <li>HTML template: <code>web/_home/home.html</code></li> </ul> <p>Convention:</p> <ul> <li><code>Transaction Class</code>: Class name = code name (capitalized)</li> <li><code>Action Method</code>: Any method in the class (e.g., <code>view</code>, <code>submit</code>, <code>register</code>)</li> <li><code>Default Method</code>: <code>view()</code> is called if no action is specified in URL</li> </ul> <p>View (HTML) example: <pre><code>&lt;form action=\"/t/web/home/register\" method=\"post\"&gt;\n    &lt;input type=\"text\" name=\"email\" /&gt;\n    &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n&lt;/form&gt;\n</code></pre></p> <p>In this example, submit button will invoke <code>register(ctx)</code> method in <code>Home</code> class.</p> <p>In S\u00d8AD, all methods defined inside a Transaction class are treated as actions, which can be invoked directly through corresponding URLs.</p> <p>Each action method must include the <code>ctx</code> parameter. The framework automatically calls the specified method and injects the current WebContext object, allowing your transaction to handle requests with full access to parameters, session, and others.</p>"},{"location":"framework/components.html#transaction-folder-structure","title":"Transaction Folder Structure","text":"<pre><code>web/\n  home.py\n  _home/\n    home.html\n</code></pre> <ul> <li><code>.py</code> file handles logic</li> <li>Folder prefixed with <code>_</code> holds the view templates</li> <li>The main view file must match the transaction name</li> </ul> <p>In addition to the default view, each transaction can define and render multiple views. For example, a Person transaction might have:</p> <pre><code>web/\n  person.py\n  _person/\n    person.html     (default view for `view()`)\n    add.html        (additional view to display new form)\n    edit.html       (additional view to display edit form)\n</code></pre> <p>Each method can explicitly render its corresponding template using:</p> <pre><code>ctx.go_to = render.as_view(ctx, \"add\")\n</code></pre> <p>This approach makes it easy to organize multiple page variations under the same transaction and supports clean separation of logic and presentation.</p>"},{"location":"framework/components.html#url-mapping","title":"URL Mapping","text":"<p>S\u00d8AD routes every request through a clean, convention-based URL structure:</p> <pre><code>/t/{group}/{code}/{action}\n</code></pre> <ul> <li><code>/t</code> \u2014 transaction prefix</li> <li><code>{group}</code> \u2014 folder/module name</li> <li><code>{code}</code> \u2014 transaction file/class</li> <li><code>{action}</code> \u2014 method inside the class; defaults to <code>view</code></li> </ul> <p>Example:</p> <ul> <li><code>/t/base/login</code> \u2192 calls <code>Login.view()</code></li> <li><code>/t/web/home/register</code> \u2192 calls <code>Home.register()</code></li> <li><code>/t/app/user/edit?user_id=5</code> \u2192 calls <code>User.edit()</code> with query param</li> </ul>"},{"location":"framework/components.html#context-path","title":"Context Path","text":"<p>In Java Servlet architecture, the context path refers to the root path of a deployed web application. It is the prefix added to all URLs served by the application.</p> <p>In S\u00d8AD Framework, the context path can be retrieved within a transaction using:</p> <pre><code>ctx.ctxPath\n</code></pre> <p>By default, S\u00d8AD assumes the context path is an empty string (<code>\"\"</code>) when running as a standalone application. However, if the application is deployed with a context (for example, under <code>/myapp</code>), then this value will reflect that path.</p> <p>Example:</p> <p>Given a deployed application URL:</p> <pre><code>https://www.sufia.online/myapp/t/web/welcome\n</code></pre> <ul> <li>Context Path: <code>/myapp</code></li> <li>Transaction URL: <code>/t/web/welcome</code></li> </ul> <p>This context path is useful when constructing links or redirecting within views and templates to ensure consistency across environments.</p>"},{"location":"framework/components.html#view","title":"View","text":""},{"location":"framework/components.html#routing-to-views","title":"Routing to Views","text":"<p>Each transaction ends by setting <code>ctx.go_to</code> to a function that define the response. The most common output is an HTML page rendered using the <code>render.as_view()</code> function:</p> <pre><code>ctx.go_to = render.as_view(ctx, \"home\")\n</code></pre> <p>This will render the home.html view inside the <code>_home</code> folder.</p> <p>Note</p> <p>The <code>ctx.go_to</code> parameter can accept either a string or a function. When a string is provided, it is treated as a URL path, and the framework redirects the user to that URL using <code>response.sendRedirect()</code>. If a function is provided, it is executed, and its output is returned to the user. The function is responsible for processing the response, including setting the content type, status code, and writing the response body to the <code>HttpServletResponse</code> object.</p>"},{"location":"framework/components.html#view-files","title":"View Files","text":"<p>Views in S\u00d8AD are typically HTML files enhanced with Handlebars syntax. Handlebars allows dynamic content rendering by using placeholders and control logic directly within the HTML.</p> <p>You can:</p> <ul> <li>Insert variables: <code>{{user_name}}</code></li> <li>Perform loops: <code>{{#each items}}...{{/each}}</code></li> <li>Add conditions: <code>{{#if isAdmin}}...{{else}}...{{/if}}</code></li> <li>Use helpers: such as <code>select</code>, <code>dateFmt</code>, or <code>ref_lookup</code></li> </ul> <p>This makes the HTML highly flexible and data-driven while remaining clean and readable.</p>"},{"location":"framework/components.html#output-render-methods","title":"Output Render Methods","text":"<p>S\u00d8AD provides multiple output render methods through <code>utils.render</code>:</p> <ul> <li><code>render.as_view(ctx, view)</code> - Render Handlebars HTML</li> <li><code>render.as_json(ctx, obj)</code> - Render JSON</li> <li><code>render.as_html(ctx, code)</code> - Raw HTML</li> <li><code>render.as_string(ctx, text)</code> - Plain string</li> <li><code>render.as_file(ctx, file)</code> - File download</li> <li><code>render.as_blob(ctx, blob)</code> - Binary data</li> <li><code>render.as_pdf(ctx, view)</code> - PDF output</li> </ul> <p>You can find examples of how to use these render functions in the Code Library section of this documentation.</p>"},{"location":"framework/components.html#handlebars-helpers","title":"handlebars helpers","text":"<p>Handlebars supports built-in helpers and custom helpers for advanced functionality. You can use these helpers to manipulate data, format output, and control rendering logic directly within your templates.</p> <p>Built-in helpers:</p> <ul> <li><code>if</code>, <code>else</code>, <code>unless</code>, <code>each</code>, <code>and</code>, <code>or</code>, <code>not</code>, <code>eq</code></li> </ul> <p>Custom helpers:</p> <ul> <li><code>ref_lookup</code></li> <li><code>select</code>, <code>option</code></li> <li><code>dateFmt</code></li> <li><code>in</code></li> <li><code>html</code></li> <li><code>session</code></li> <li><code>get</code></li> </ul> <p>You can find more details about these helpers in the Utilities chapter of this documentation.</p>"},{"location":"framework/components.html#model","title":"Model","text":"<p>In S\u00d8AD Framework, Model classes are automatically generated from the database tables using ActiveJDBC. Once generated, these classes are automatically instrumented.</p> <p>Instrumentation in ActiveJDBC refers to the process of enhancing the compiled Java Model classes so they are ActiveJDBC-aware. This means they gain access to methods such as <code>saveIt()</code>, <code>findAll()</code>, <code>first()</code>, <code>where()</code>, and many others provided by the ActiveJDBC framework.</p> <p>S\u00d8AD handles this behind the scenes. At runtime, after introspecting the database schema and generating the Model classes, the framework runs ActiveJDBC\u2019s instrumentation process to inject the necessary metadata and behaviors. This allows you to interact with your database tables as if they were regular Java classes, making CRUD operations straightforward and intuitive.</p> <p>Given a <code>person</code> table: <pre><code>package models;\n\nimport org.javalite.activejdbc.Model;\n\npublic class Person extends Model {}\n</code></pre></p> <p>Usage in Transaction: <pre><code>from models import Person\n\nclass Home(Layout):\n    def view(self, ctx):\n        persons = Person.findAll()\n        ctx.output[\"all_person\"] = persons\n        ctx.go_to = render.as_view(ctx, \"home\")\n</code></pre></p>"},{"location":"framework/components.html#example-hello-world","title":"Example: Hello World","text":"<p>Folder structure: <pre><code>web/\n  hello.py\n  _hello/\n    hello.html\n</code></pre></p> <p><code>hello.py</code> <pre><code>from utils import render\n\nclass Hello(Layout):\n    def view(self, ctx):\n        ctx.go_to = render.as_view(ctx, \"hello\")\n</code></pre></p> <p><code>_hello/hello.html</code> <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, S\u00d8AD&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"framework/file-upload.html","title":"File Upload","text":"<p>S\u00d8AD makes file uploads easy and straightforward using standard HTML form input and built-in request handling. Uploaded files are automatically processed by the framework and made available through named request parameters.</p>"},{"location":"framework/file-upload.html#1-html-form-setup","title":"1. HTML Form Setup","text":"<p>To enable file upload in a form, two requirements must be met:</p> <ul> <li>The <code>&lt;form&gt;</code> element must have the <code>enctype</code> attribute set to <code>multipart/form-data</code></li> <li>An <code>&lt;input&gt;</code> element of <code>type=\"file\"</code> must be included with a <code>name</code> attribute</li> </ul>"},{"location":"framework/file-upload.html#example-html","title":"Example HTML:","text":"<pre><code>&lt;form action=\"/t/upload/image\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input type=\"file\" name=\"photo\" required&gt;\n    &lt;button type=\"submit\"&gt;Upload&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>In this example:</p> <ul> <li>The input field is named <code>photo</code></li> <li> <p>S\u00d8AD will handle this input and extract the following parameters:</p> <ul> <li><code>photo</code> \u2192 the file content as bytes</li> <li><code>photo_ft</code> \u2192 the MIME type (e.g., <code>image/png</code>)</li> <li><code>photo_fn</code> \u2192 the original filename (e.g., <code>myphoto.jpg</code>)</li> </ul> </li> </ul>"},{"location":"framework/file-upload.html#2-handling-the-upload-in-transaction","title":"2. Handling the Upload in Transaction","text":"<p>The uploaded file content and its metadata can be retrieved from <code>ctx.getRequest()</code>.</p>"},{"location":"framework/file-upload.html#example-transaction","title":"Example Transaction:","text":"<pre><code>from utils import render\n\nfrom java.io import File\nfrom com.google.common.io import Files\n\nclass Image(object):\n    def upload(self, ctx):\n        request = ctx.getRequest()\n        file_content = request.getParameter(\"photo\") # byte[] content\n        file_type = request.getParameter(\"photo_ft\") # MIME type\n        file_name = request.getParameter(\"photo_fn\") # Original filename\n\n        # Check if file has been uploaded\n        if file_content:\n\n            # Validate file type\n            if file_type not in [\"image/png\", \"image/jpeg\"]:\n                ctx.output[\"message\"] = \"Invalid file type. Only PNG and JPEG are allowed.\"\n                ctx.go_to = render.as_view(ctx, \"upload_status\")\n                return\n\n            # Save file to a directory\n            path = \"/tmp/uploads/\" + file_name\n            file = File(path)\n\n            Files.write(file_content, file)\n\n            ctx.output[\"message\"] = \"File uploaded successfully: \" + file_name\n            ctx.go_to = render.as_view(ctx, \"upload_status\")\n</code></pre>"},{"location":"framework/helpers.html","title":"Handlebars.java Helpers","text":"<p>Handlebars.java provides built-in helpers that extend the templating capabilities, making HTML templates dynamic and easier to manage. S\u00d8AD Framework also includes custom helpers to further enhance your templates. This chapter explains the most common helpers and custom S\u00d8AD-specific helpers available.</p>"},{"location":"framework/helpers.html#built-in-handlebars-helpers","title":"Built-in Handlebars Helpers","text":"<p>Below are basic built-in Handlebars helpers commonly used:</p>"},{"location":"framework/helpers.html#1-conditional-helpers","title":"1. Conditional Helpers","text":"<ul> <li>if: Conditionally renders content.</li> </ul> <pre><code>{{#if loggedIn}}\n  &lt;p&gt;Welcome back, {{username}}!&lt;/p&gt;\n{{/if}}\n</code></pre> <ul> <li>unless: Inverse of <code>if</code>.</li> </ul> <pre><code>{{#unless loggedIn}}\n  &lt;p&gt;Please log in.&lt;/p&gt;\n{{/unless}}\n</code></pre>"},{"location":"framework/helpers.html#2-iteration-helper","title":"2. Iteration Helper","text":"<ul> <li>each: Iterates over a collection.</li> </ul> <pre><code>&lt;ul&gt;\n  {{#each items}}\n    &lt;li&gt;{{this}}&lt;/li&gt;\n  {{/each}}\n&lt;/ul&gt;\n</code></pre>"},{"location":"framework/helpers.html#3-logical-helpers","title":"3. Logical Helpers","text":"<ul> <li>eq: Checks equality.</li> </ul> <pre><code>{{#if (eq role \"admin\")}}\n  &lt;p&gt;Admin Panel&lt;/p&gt;\n{{/if}}\n</code></pre> <p>For more information on the Handlebars templating language and available features, visit the official documentation at https://jknack.github.io/handlebars.java/.</p>"},{"location":"framework/helpers.html#sad-custom-helpers","title":"S\u00d8AD Custom Helpers","text":"<p>S\u00d8AD provides additional custom helpers to simplify common tasks:</p>"},{"location":"framework/helpers.html#1-ref_lookup","title":"1. <code>ref_lookup</code>","text":"<p>Lookup a value from a database table using a given key.</p> <pre><code>{{ref_lookup key table=\"tableName\"? refs=\"object\"? label=\"name\"? value=\"id\"?}}\n</code></pre> <p>Parameters:</p> <ul> <li><code>table</code>: The name of the database table to query.</li> <li><code>refs</code>: The object containing the key to look up. If <code>table</code> is not specified, then <code>refs</code> must be provided.</li> <li><code>label</code>: The column to retrieve from the table. Defaults to <code>name</code>. For more than one column, use a pipe-separated list (e.g., <code>label=\"name|email\"</code>).</li> <li><code>value</code>: The column to match against the provided key. Defaults to <code>id</code>. This column is typically the primary key of the table.</li> </ul> <p>Example Usage</p> <pre><code>{{ref_lookup user.id table=\"user\" label=\"login_id\" value=\"id\"}}\n</code></pre> <p>This will look up the <code>login_id</code> for the user with the specified <code>id</code> in the <code>user</code> table.</p> <pre><code>{{#each users}}\n  &lt;p&gt;{{ref_lookup this.id table=\"user_details\" label=\"full_name\" value=\"user_id\"}}&lt;/p&gt;\n{{/each}}\n</code></pre> <p>This iterates over a list of <code>users</code> and retrieves the <code>full_name</code> from the <code>user_details</code> table for each user.</p>"},{"location":"framework/helpers.html#2-select-and-option","title":"2. <code>select</code> and <code>option</code>","text":"<p>Generate dropdown menus (<code>&lt;select&gt;</code>) and their options.</p> <pre><code>{{select table=\"tableName\"? refs=\"object\"? filter=\"\"? id=\"\"? name=\"\"? class=\"\"? label=\"name\" value=\"id\" selected=context? required=\"true\"? readonly? sel_text=\"\"?}}\n</code></pre> <p>Parameters:</p> <ul> <li><code>table</code>: The name of the database table to query.</li> <li><code>refs</code>: The object containing the key to look up. If <code>table</code> is not specified, then <code>refs</code> must be provided.</li> <li><code>filter</code>: Optional filter to apply to the query. e.g., <code>filter=\"active=1\"</code>.</li> <li><code>id</code>: The ID of the <code>&lt;select&gt;</code> element.</li> <li><code>name</code>: The name of the <code>&lt;select&gt;</code> element.</li> <li><code>class</code>: CSS class for the <code>&lt;select&gt;</code> element.</li> <li><code>label</code>: The column to display as the option text. Defaults to <code>name</code>.</li> <li><code>value</code>: The column to match against the provided key. Defaults to <code>id</code>.</li> <li><code>selected</code>: The value to pre-select in the dropdown.</li> <li><code>required</code>: If set to <code>true</code>, the dropdown will be required.</li> <li><code>readonly</code>: If set, the tag will turn to label.</li> <li><code>sel_text</code>: Text to display when no option is selected. Defaults to \"Please Select\".</li> </ul> <p>Generate <code>&lt;option&gt;</code> elements based on the specified table or object.</p> <pre><code>{{option table=\"tableName\"? refs=\"object\"? filter=\"\"? label=\"name\" value=\"id\" selected=context? required=\"true\"? sel_text=\"\"?}}\n</code></pre> <p>Uses the same parameters as <code>select</code>, but generates individual <code>&lt;option&gt;</code> elements instead of a full <code>&lt;select&gt;</code>. This is useful when you need to customize the <code>&lt;select&gt;</code> tag.</p> <p>Example Usage</p> <pre><code>{{select table=\"countries\" selected=selected_country label=\"name\" value=\"code\"}}\n</code></pre> <pre><code>&lt;select id=\"sel_country\" name=\"country_code\" class=\"form-select\" data-live-search=\"true\" required&gt;\n    {{option table=\"countries\" selected=selectedCountry label=\"name\" value=\"code\"}}\n&lt;/select&gt;\n</code></pre>"},{"location":"framework/helpers.html#3-datefmt","title":"3. <code>dateFmt</code>","text":"<p>Format a date object into a human-readable format.</p> <pre><code>{{dateFmt registration_date \"yyyy-MM-dd\"}}\n</code></pre> <p>Formats the <code>registration_date</code> into a day/month/year format. If no format is specified, it defaults to <code>dd/MM/yyyy</code>.</p>"},{"location":"framework/helpers.html#4-in","title":"4. <code>in</code>","text":"<p>Check if a value exists within a list or a string.</p> <pre><code>{{#if (in user_role_id allowed_roles)}}\n  &lt;p&gt;Access Granted&lt;/p&gt;\n{{else}}\n  &lt;p&gt;Access Denied&lt;/p&gt;\n{{/if}}\n</code></pre>"},{"location":"framework/helpers.html#5-html","title":"5. <code>html</code>","text":"<p>Sanitize HTML content, convert newlines to <code>&lt;br&gt;</code> and generate anchor for links.</p> <pre><code>&lt;div&gt;{{html content}}&lt;/div&gt;\n</code></pre>"},{"location":"framework/helpers.html#6-session","title":"6. <code>session</code>","text":"<p>Access session attributes.</p> <pre><code>&lt;p&gt;User ID: {{session \"user_id\"}}&lt;/p&gt;\n</code></pre>"},{"location":"framework/helpers.html#7-get","title":"7. <code>get</code>","text":"<p>Retrieve values from <code>ctx.output</code> by keys containing special characters or spaces.</p> <pre><code>&lt;p&gt;{{get \"complex key-name\"}}&lt;/p&gt;\n</code></pre>"},{"location":"framework/logging.html","title":"Logging","text":"<p>S\u00d8AD uses SLF4J as the logging API, with Log4j 2 as the underlying implementation. This setup provides flexible, high-performance logging for transactions, models, and other framework components.</p> <p>Logging is essential for diagnosing issues, auditing activity, and understanding application behavior\u2014especially in production environments or when running inside containers.</p>"},{"location":"framework/logging.html#using-logging-in-transactions","title":"Using Logging in Transactions","text":"<p>Within your Jython Transactions, you can use the <code>Log</code> class to write log entries. Supported levels include <code>info</code>, <code>debug</code>, <code>warn</code>, and <code>error</code>. These methods integrate seamlessly with SLF4J and Log4j\u2019s configuration.</p>"},{"location":"framework/logging.html#example-using-logging-in-a-transaction","title":"Example: Using Logging in a Transaction","text":"<pre><code>from sufia.util import Log\n\nclass Example(Layout):\n    def view(self, ctx):\n        Log.info(\"Example view called.\")\n        Log.debug(\"Request parameters: %s\" % ctx.getAllParameters())\n\n        try:\n            # Transaction logic\n            Log.info(\"Processing completed successfully.\")\n        except Exception as e:\n            Log.error(\"Error occurred: %s\" % str(e))\n            raise e\n</code></pre> <ul> <li>Log.info(): For general informational messages.</li> <li>Log.debug(): For detailed debugging output (helpful during development).</li> <li>Log.error(): For capturing unexpected exceptions or failures.</li> </ul>"},{"location":"framework/logging.html#logging-in-container-environments","title":"Logging in Container Environments","text":"<p>Did You Know?</p> <p>If S\u00d8AD is running in a containerized environment, the standard <code>print()</code> output may not appear in the IDE. Instead, always use <code>Log.info()</code>, <code>Log.debug()</code>, or <code>Log.print()</code>, which are routed through SLF4J and work reliably inside containers.</p>"},{"location":"framework/logging.html#using-slf4j-logger-directly","title":"Using SLF4J <code>Logger</code> Directly","text":"<p>While S\u00d8AD provides the <code>Log</code> utility for simplicity, you can also create your own SLF4J <code>Logger</code> instances if you need class-specific loggers, advanced features, or consistent Java logging practices.</p>"},{"location":"framework/logging.html#example-slf4j-logger-in-a-transaction","title":"Example: SLF4J Logger in a Transaction","text":"<pre><code>from org.slf4j import LoggerFactory\n\nclass Orders(object):\n    # Create a class-specific logger instance\n    logger = LoggerFactory.getLogger(\"OrdersTransaction\")\n\n    def view(self, ctx):\n        request = ctx.getRequest()\n        Orders.logger.info(\"Orders view accessed.\")\n        Orders.logger.debug(\"Request parameters: %s\" % request.getParameterMap())\n\n        try:\n            # Transaction logic here\n            Orders.logger.info(\"Order listing completed successfully.\")\n        except Exception as e:\n            Orders.logger.error(\"Failed to process orders: %s\" % str(e))\n            raise e\n</code></pre> <p>This pattern is for developers familiar with enterprise Java, or when you need finer control over logging granularity.</p>"},{"location":"framework/logging.html#default-log4j-configuration","title":"Default Log4j Configuration","text":"<p>Below is the default <code>log4j2.properties</code> included with S\u00d8AD. This configuration outputs logs both to the console and to rolling log files saved under <code>${SUFIA_HOME}/logs/</code>.</p> <pre><code># Appenders\nappender.console.type = Console\nappender.console.name = STDOUT\nappender.console.layout.type = PatternLayout\nappender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} [%T] %-5level %c{1} - %msg%n\n\nappender.rolling.type = RollingFile\nappender.rolling.name = LOGFILE\nappender.rolling.fileName = ${env:SUFIA_HOME}/logs/soad.log\nappender.rolling.filePattern = ${env:SUFIA_HOME}/logs/soad-%d{yyyy-MM-dd}.log\nappender.rolling.layout.type = PatternLayout\nappender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} [%T] %-5level %c{1} - %msg%n\nappender.rolling.policies.type = Policies\nappender.rolling.policies.time.type = TimeBasedTriggeringPolicy\nappender.rolling.policies.time.interval = 1\nappender.rolling.policies.time.modulate = true\nappender.rolling.strategy.type = DefaultRolloverStrategy\nappender.rolling.strategy.max = 30\n\n# Root Logger\nrootLogger.level = INFO\nrootLogger.appenderRef.rolling.ref = LOGFILE\nrootLogger.appenderRef.console.ref = STDOUT\n\n# keep activejdbc logs at minimum\nlogger.activejdbc.name = org.javalite.activejdbc\nlogger.activejdbc.level = WARN\n</code></pre>"},{"location":"framework/overview.html","title":"Overview","text":"<p>S\u00d8AD Framework is a lightweight, Java-based<sup>1</sup> web framework designed for rapid application development. It is a successor to the SUFIA Framework, enhanced and refined to better serve modern enterprise application needs.</p> <p>The primary goal of S\u00d8AD Framework is to let developers focus on what truly matters: building the business logic of their application\u2014without getting bogged down by the technical intricacies of integrating multiple frameworks, tools, or libraries.</p> <p>S\u00d8AD is convention-based, action-driven, and sits on top of the Java Servlet specification, working conceptually similar to frameworks like Apache Struts 2 or Spring MVC. It comes bundled with an embedded application server and can run as a standalone server application. It is also container-ready and integrates seamlessly into Kubernetes environments.</p> <p></p> <ol> <li> <p>Oracle and Java are registered trademarks of Oracle and/or its affiliates. Other names may be trademarks of their respective owners\u00a0\u21a9</p> </li> </ol>"},{"location":"framework/page-layout.html","title":"Page Layout","text":"<p>S\u00d8AD supports a layout system similar to SiteMesh, allowing developers to define a common page template that wraps around individual views. This is useful for applying a consistent structure across multiple pages\u2014such as a shared header, navigation menu, and footer.</p> <p>A Page Layout is a standard HTML file that includes special placeholders using Handlebars helpers:</p> <ul> <li><code>{{&amp;title}}</code></li> <li><code>{{&amp;head}}</code></li> <li><code>{{&amp;body}}</code></li> </ul> <p>These placeholders are automatically filled by the framework when rendering a view that uses layout integration.</p> <p></p> <p>Page Layout Concept</p>"},{"location":"framework/page-layout.html#how-it-works","title":"How It Works","text":"<p>To define a layout in a transaction, simply include a method named:</p> <pre><code>def page_layout(self):\ndef page_layout(self, ctx):\n</code></pre> <p>This method name is conventional. Any transaction class with a method by this name will be recognized by the framework as providing layout support.</p> <p>The <code>page_layout</code> method should return a tuple containing:</p> <ul> <li>The group name (e.g., <code>\"web\"</code>)</li> <li>The code name (e.g., <code>\"base\"</code>)</li> <li>(Optional) The layout file name (e.g., <code>\"layout\"</code>) - If not specified, it defaults to the default view of the Transaction.</li> </ul> <p>This tells the framework which layout file to use when rendering the view.</p> <p>The content returned by the view method (e.g., <code>view(self, ctx)</code>) is extracted and injected into the corresponding layout placeholder (e.g. <code>{{&amp;body}}</code>).</p>"},{"location":"framework/page-layout.html#example-transaction-with-layout","title":"Example Transaction with Layout","text":"base.py<pre><code>from utils import render\n\nclass Base(object):\n    def page_layout(self, ctx):\n        return (\"web\", \"base\", \"layout\")\n</code></pre> <p>This method will render <code>_base/layout.html</code> and merge the content of the view into the layout.</p> <p>Example HTML:</p> _base/layout.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;[MyApp] - {{&amp;title}}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;main&gt;\n        {{&amp;body}}\n    &lt;/main&gt;\n\n    &lt;script src=\"...\"&gt;&lt;/script&gt;\n    {{&amp;head}} &lt;!-- Moved the script section to the bottom of the page --&gt;\n&lt;/body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"framework/page-layout.html#sharing-layouts-via-inheritance","title":"Sharing Layouts via Inheritance","text":"<p>To apply a layout to multiple transactions, you can define the layout in a base transaction class and have others inherit from it:</p> dashboard.py<pre><code>from utils import render\nfrom default.web.base import Base\n\nclass Dashboard(Base):\n    def view(self, ctx):\n        ctx.go_to = render.as_view(ctx, \"dashboard\")\n</code></pre> _dashboard/dashboard.html<pre><code>&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Dashboard&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Dashboard&lt;/h1&gt;\n    &lt;p&gt;Welcome to your dashboard!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Final Output:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;[MyApp] - Dashboard&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;main&gt;\n        &lt;h1&gt;Dashboard&lt;/h1&gt;\n        &lt;p&gt;Welcome to your dashboard!&lt;/p&gt;\n    &lt;/main&gt;\n\n    &lt;script src=\"...\"&gt;&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In this example, the <code>Dashboard</code> transaction inherits from <code>Base</code>, which provides the layout functionality. The <code>view</code> method will render <code>_dashboard/dashboard.html</code>, and the content will be injected into the layout defined in <code>_base/layout.html</code>.</p> <p>This promotes consistency and reduces duplication in layout structure across views.</p>"},{"location":"framework/utils.html","title":"Utilities in S\u00d8AD","text":"<p>S\u00d8AD Framework provides several utility functions that help streamline common tasks like sending emails, generating PDFs, and others. </p>"},{"location":"framework/utils.html#1-email","title":"1. Email","text":"<p>S\u00d8AD includes a simple API to send emails using the <code>mailer</code> class.</p>"},{"location":"framework/utils.html#function-signature","title":"Function Signature","text":"<pre><code>send(sender_email, receiver_email, subject, content, cc=[], bcc=[], html=False, attachment=[], reply_to=None)\n</code></pre>"},{"location":"framework/utils.html#parameters","title":"Parameters:","text":"<ul> <li><code>sender_email</code>: The sender's email address.</li> <li><code>receiver_email</code>: The recipient's email address.</li> <li><code>subject</code>: Email subject line.</li> <li><code>content</code>: The body of the email (text or HTML).</li> <li><code>html</code>: Optional flag (<code>True</code> or <code>False</code>). If <code>True</code>, the content will be treated as HTML.</li> <li><code>cc</code>: Optional list of CC email addresses.</li> <li><code>bcc</code>: Optional list of BCC email addresses.</li> <li><code>attachment</code>: Optional list of file paths to attach to the email.</li> <li><code>reply_to</code>: Optional email address for reply-to header.</li> </ul>"},{"location":"framework/utils.html#example","title":"Example:","text":"<pre><code>from utils import mailer\n\nemail_content = \"\"\"\n&lt;h1&gt;Welcome&lt;/h1&gt;\n&lt;p&gt;Your account has been created.&lt;/p&gt;\n\"\"\"\n\nmailer.send(\"noreply@soad.app\", \"user@example.com\", \"Welcome to S\u00d8AD\", email_content, html=True)\n</code></pre> <p>You can also use <code>render.as_view(...)()</code> to generate email content from a view template.</p>"},{"location":"framework/utils.html#2-pdf-generator","title":"2. PDF Generator","text":"<p>You can generate a PDF file from any XHTML-compatible HTML string using the <code>pdf</code> utility.</p>"},{"location":"framework/utils.html#function-signature_1","title":"Function Signature","text":"<pre><code>generate(content, pdf_file=None, outstream=None)\n</code></pre>"},{"location":"framework/utils.html#parameters_1","title":"Parameters:","text":"<ul> <li><code>content</code>: XHTML content as a string (typically generated using <code>render.as_view(...)()</code>)</li> <li><code>pdf_file</code>: Optional File (<code>java.io.File</code> object) where the PDF will be saved.</li> <li><code>outstream</code>: Optional output stream to write the PDF content to. If not provided, it defaults to writing to <code>pdf_file</code>.</li> </ul>"},{"location":"framework/utils.html#example_1","title":"Example:","text":"<pre><code>from utils import pdf, render\n\nhtml = render.as_view(ctx, \"invoice\")()\npdf.generate(html, \"/tmp/invoice.pdf\")\n</code></pre> <p>This generates a PDF file containing the rendered invoice.</p>"},{"location":"framework/utils.html#3-google-guava-library","title":"3. Google Guava Library","text":"<p>S\u00d8AD bundles Google Guava, a powerful set of Java core libraries that offer advanced capabilities for working with collections, IO, caching, and more.</p>"},{"location":"framework/utils.html#common-use-cases","title":"Common Use Cases:","text":""},{"location":"framework/utils.html#a-reading-and-writing-files","title":"a. Reading and Writing Files","text":"<pre><code>from com.google.common.io import Files\nfrom java.io import File\n\nfile = File(\"/tmp/example.txt\")\ncontent = Files.toString(file, \"UTF-8\")\nprint(content)\n\nFiles.write(\"Hello World\".getBytes(), file)\n</code></pre>"},{"location":"framework/utils.html#b-base64-encoding-and-decoding","title":"b. Base64 Encoding and Decoding","text":"<pre><code>from com.google.common.io import BaseEncoding\n\nencoded = BaseEncoding.base64().encode(\"hello world\".getBytes())\nprint(encoded)  # aGVsbG8gd29ybGQ=\n\ndecoded = BaseEncoding.base64().decode(encoded)\nprint(String(decoded))\n</code></pre>"},{"location":"framework/utils.html#c-io-streams","title":"c. IO Streams","text":"<pre><code>from com.google.common.io import ByteStreams\nfrom java.io import FileInputStream, FileOutputStream\n\nin_stream = FileInputStream(\"input.txt\")\nout_stream = FileOutputStream(\"output.txt\")\n\nByteStreams.copy(in_stream, out_stream)\n\nin_stream.close()\nout_stream.close()\n</code></pre> <p>These utilities make working with lower-level Java APIs much easier and more expressive, and they integrate smoothly into your S\u00d8AD transactions and utilities.</p>"},{"location":"framework/utils.html#4-apache-commons-apache-poi-support","title":"4. Apache Commons &amp; Apache POI Support","text":"<p>S\u00d8AD also bundles other powerful libraries to enhance backend functionality:</p>"},{"location":"framework/utils.html#a-apache-commons","title":"a. Apache Commons","text":"<p>S\u00d8AD includes several Apache Commons libraries such as:</p> <ul> <li>commons-lang3 \u2013 string manipulation, object utilities, etc.</li> <li>commons-io \u2013 input/output stream helpers</li> </ul> <p>These can be imported and used directly in your transaction or utility classes to simplify everyday Java operations.</p>"},{"location":"framework/utils.html#b-apache-poi-excel-manipulation","title":"b. Apache POI (Excel Manipulation)","text":"<p>Apache POI enables you to read from and write to Microsoft Excel files (both .xls and .xlsx). It is useful for generating reports or importing/exporting spreadsheet data.</p> <p>Please refer to Cookbook for examples on how to use Apache POI with S\u00d8AD.</p> <p>If you need additional functionality beyond what\u2019s provided out-of-the-box, you can upload custom .jar libraries into the <code>/webapp/WEB-INF/lib/</code> folder. These JAR files will be loaded into the classpath at runtime, allowing you to use external Java libraries in your S\u00d8AD transactions.</p>"},{"location":"framework/whyjython.html","title":"Why Jython?","text":"<p>Jython is a JVM-based implementation of Python. Its goal is to allow seamless integration between Java and Python, offering the simplicity of Python with the full power of Java.</p>"},{"location":"framework/whyjython.html#key-advantages-of-jython","title":"Key Advantages of Jython","text":"<ul> <li>Runs on the JVM</li> <li>Access to Java libraries and ecosystem</li> <li>No compile-redeploy cycle: write and run instantly</li> <li>Python syntax = less boilerplate</li> <li>High performance through Java integration</li> </ul>"},{"location":"framework/whyjython.html#why-jython_1","title":"Why Jython","text":"<p>Java web development often involves long feedback loops due to compile, build, and redeploy cycles. Jython solves this by enabling an interpreted, instant-execution workflow within the Java ecosystem. This is ideal for rapid development and immediate testing.</p>"},{"location":"getting-started/directory-struct.html","title":"S\u00d8AD Directory Structure","text":"<p>This chapter outlines the structure of a typical S\u00d8AD project directory. Understanding this layout helps developers know where to place configuration files, transactions, views, and libraries.</p> <pre><code>app\n\u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 log4j2.properties\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sufia.properties\n\u251c\u2500\u2500 console.log\n\u251c\u2500\u2500 lib\n\u251c\u2500\u2500 logs\n\u251c\u2500\u2500 s0adm\n\u251c\u2500\u2500 server\n\u251c\u2500\u2500 shutdown.sh\n\u251c\u2500\u2500 startup.sh\n\u2514\u2500\u2500 webapp\n    \u251c\u2500\u2500 assets\n    \u251c\u2500\u2500 index.html\n    \u2514\u2500\u2500 WEB-INF\n        \u251c\u2500\u2500 classes\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 models\n        \u251c\u2500\u2500 jython\n        \u2514\u2500\u2500 lib\n</code></pre>"},{"location":"getting-started/directory-struct.html#directory-overview","title":"Directory Overview","text":""},{"location":"getting-started/directory-struct.html#app","title":"<code>/app/</code>","text":"<p>The root directory of the application.</p> <ul> <li>conf/ \u2013 Contains configuration files.<ul> <li><code>log4j2.properties</code> \u2013 Logging configuration.</li> <li><code>sufia.properties</code> \u2013 Core framework properties and application-level settings.</li> </ul> </li> <li>console.log \u2013 Main log file capturing console output from the server.</li> <li>lib/ \u2013 Folder for core libraries.</li> <li>logs/ \u2013 Folder for log archives.</li> <li>s0adm/ \u2013 S\u00d8AD IDE.</li> <li>server/ \u2013 Server runtime files.</li> <li>startup.sh / shutdown.sh \u2013 Scripts to start or stop the application.</li> </ul>"},{"location":"getting-started/directory-struct.html#appwebapp","title":"<code>/app/webapp/</code>","text":"<p>This is the main web application folder (similar to <code>webapps/ROOT</code> in traditional servlet apps).</p> <ul> <li>assets/ \u2013 Static assets like CSS, JS, fonts, images, etc.</li> <li>index.html \u2013 Optional landing page or placeholder HTML.</li> <li>WEB-INF/ \u2013 Protected folder not directly accessible via URL. Contains:<ul> <li>classes/ \u2013 Compiled Java classes and generated model classes.<ul> <li>models/ \u2013 ActiveJDBC model classes automatically generated.</li> </ul> </li> <li>jython/ \u2013 The location for your Jython transaction files and packages.</li> <li>lib/ \u2013 Additional JAR files required by the app (internal classpath).</li> </ul> </li> </ul> <p>This structure allows S\u00d8AD applications to be easily managed, containerized, or deployed with minimal setup. Transactions are typically placed under <code>/webapp/WEB-INF/jython</code>, and views under <code>/webapp/WEB-INF/jython/_group</code> folders.</p>"},{"location":"getting-started/directory-struct.html#transaction-file-structure","title":"Transaction File Structure","text":"<p>The directory structure for transaction files is organized as follows:</p> <ul> <li>The parent directory represents a group, containing transaction files with a .py extension.</li> <li>Each transaction file has a corresponding subdirectory named identically to the transaction file.</li> <li>This subdirectory contains views associated with the transaction, with the default view being an .html file named the same as the transaction file.</li> </ul> Transaction File Structure"},{"location":"getting-started/first-application.html","title":"Build your first application","text":""},{"location":"getting-started/first-application.html#your-first-sad-application-address-book","title":"Your First S\u00d8AD Application: Address Book","text":"<p>This chapter guides you through building a simple web application using the S\u00d8AD Framework. We\u2019ll develop an Address Book where users can:</p> <ul> <li>View a list of contacts</li> <li>Add a new contact</li> <li>Edit an existing contact</li> <li>Delete a contact</li> </ul>"},{"location":"getting-started/first-application.html#step-1-create-the-database-table","title":"Step 1: Create the Database Table","text":"<p>First, create a table to store contact details in your database.</p>"},{"location":"getting-started/first-application.html#table-schema","title":"Table Schema","text":"<p>Create a new table named <code>contact</code> with the following schema:</p> Column Name Data Type Constraints id INT PRIMARY KEY, AUTO_INCREMENT name VARCHAR(100) NOT NULL contact_no VARCHAR(20) email VARCHAR(100) created_at DATETIME updated_at DATETIME <p>Example SQL Script: <pre><code>CREATE TABLE contact (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) NOT NULL,\n    contact_no VARCHAR(20),\n    email VARCHAR(100),\n    created_at DATETIME,\n    updated_at DATETIME\n);\n</code></pre></p> <p>After creating the table, S\u00d8AD automatically generates a corresponding model class named <code>Contact</code>.</p>"},{"location":"getting-started/first-application.html#step-2-create-the-transaction","title":"Step 2: Create the Transaction","text":"<p>Next, create a transaction that manages the contacts. The transaction group is <code>example</code>, and the transaction code is <code>address_book</code>.</p>"},{"location":"getting-started/first-application.html#create-transaction","title":"Create Transaction","text":"<p>In the S\u00d8AD Online IDE, go to the Transaction tab, and create:</p> <ul> <li>Group: <code>example</code></li> <li>Code: <code>address_book</code></li> <li>Transaction Name: <code>Address Book</code></li> </ul> <p>This action generates:</p> <pre><code>example/address_book.py\nexample/_address_book/address_book.html\n</code></pre>"},{"location":"getting-started/first-application.html#jython-code-address_bookpy","title":"Jython Code: <code>address_book.py</code>","text":"<pre><code>from utils import render\nfrom models import Contact\nfrom java.time import LocalDateTime\n\nclass Address_book(object):\n    def view(self, ctx):\n        contacts = Contact.findAll().orderBy(\"name ASC\")\n        ctx.output[\"contacts\"] = contacts\n        ctx.go_to = render.as_view(ctx, \"address_book\")\n\n    def save(self, ctx):\n        \"\"\"POST\"\"\"\n        request = ctx.getRequest()\n        id = request.getParameter(\"id\")\n        name = request.getParameter(\"name\")\n        contact_no = request.getParameter(\"contact_no\")\n        email = request.getParameter(\"email\")\n\n        if id:\n            contact = Contact.findById(id)\n        else:\n            contact = Contact()\n            contact.set(\"created_at\", LocalDateTime.now())\n\n        contact.set(\"name\", name)\n        contact.set(\"contact_no\", contact_no)\n        contact.set(\"email\", email)\n        contact.set(\"updated_at\", LocalDateTime.now())\n        contact.saveIt()\n\n        # Redirect to the view after saving\n        ctx.go_to = \"/t/example/address_book\"  \n\n    def edit(self, ctx):\n        request = ctx.getRequest()\n        id = request.getParameter(\"id\")\n        ctx.output[\"contact\"] = Contact.findById(id)\n        self.view(ctx)\n\n    def delete(self, ctx):\n        \"\"\"POST\"\"\"\n        request = ctx.getRequest()\n        id = request.getParameter(\"id\")\n        contact = Contact.findById(id)\n        if contact:\n            contact.delete()\n\n        # Redirect to the view after deletion\n        ctx.go_to = \"/t/example/address_book\"\n</code></pre> <p>Tip</p> <ol> <li> <p>Use <code>\"\"\"POST\"\"\"</code> at the beginning of methods like <code>save</code> and <code>delete</code> to indicate that they only accept POST requests. This is particularly useful for handling form submissions securely.</p> </li> <li> <p>Implement <code>ctx.go_to = \"/t/example/address_book\"</code> after save or delete actions to redirect users back to the main view. This follows the Post/Redirect/Get (PRG) pattern, preventing unintended form resubmissions when the page is refreshed.</p> </li> </ol>"},{"location":"getting-started/first-application.html#html-view-_exampleaddress_bookhtml","title":"HTML View: <code>_example/address_book.html</code>","text":"<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;Address Book&lt;/title&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=\"container my-4\"&gt;\n    &lt;h1 class=\"mb-4\"&gt;Address Book&lt;/h1&gt;\n\n    &lt;form action=\"{{ctxPath}}/t/example/address_book/save\" method=\"post\" class=\"mb-4\"&gt;\n        &lt;input type=\"hidden\" name=\"id\" value=\"{{contact.id}}\" /&gt;\n\n        &lt;div class=\"mb-3\"&gt;\n            &lt;label class=\"form-label\"&gt;Name&lt;/label&gt;\n            &lt;input type=\"text\" class=\"form-control\" name=\"name\" value=\"{{contact.name}}\" required /&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"mb-3\"&gt;\n            &lt;label class=\"form-label\"&gt;Contact No&lt;/label&gt;\n            &lt;input type=\"text\" class=\"form-control\" name=\"contact_no\" value=\"{{contact.contact_no}}\" /&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"mb-3\"&gt;\n            &lt;label class=\"form-label\"&gt;Email&lt;/label&gt;\n            &lt;input type=\"email\" class=\"form-control\" name=\"email\" value=\"{{contact.email}}\" /&gt;\n        &lt;/div&gt;\n\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Save Contact&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;table class=\"table table-striped\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Contact No&lt;/th&gt;\n                &lt;th&gt;Email&lt;/th&gt;\n                &lt;th&gt;Actions&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {{#each contacts}}\n            &lt;tr&gt;\n                &lt;td&gt;{{name}}&lt;/td&gt;\n                &lt;td&gt;{{contact_no}}&lt;/td&gt;\n                &lt;td&gt;{{email}}&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;a class=\"btn btn-sm btn-warning\" href=\"{{../ctxPath}}/t/example/address_book/edit?id={{id}}\"&gt;Edit&lt;/a&gt;\n                    &lt;form action=\"{{../ctxPath}}/t/example/address_book/delete\" method=\"post\" style=\"display:inline;\"&gt;\n                        &lt;input type=\"hidden\" name=\"id\" value=\"{{id}}\"&gt;\n                        &lt;button type=\"submit\" class=\"btn btn-sm btn-danger\" onclick=\"return confirm('Delete this contact?')\"&gt;Delete&lt;/button&gt;\n                    &lt;/form&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            {{/each}}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n\n&lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This HTML leverages Bootstrap for styling the forms and tables to ensure a clean and responsive user interface.</p> <p>Tip</p> <ul> <li>Use <code>{{ctxPath}}</code> to dynamically generate the correct context path for your application.</li> <li><code>{{../ctxPath}}</code> is used to access the context path from within nested Handlebars templates.</li> </ul>"},{"location":"getting-started/first-application.html#step-3-open-in-browser","title":"Step 3: Open in Browser","text":"<p>After creating the table and transaction, open the following URL:</p> <pre><code>https://&lt;your-domain.com&gt;/t/example/address_book\n</code></pre> <p>You\u2019ll see:</p> <ul> <li>A form to add and edit contacts</li> <li>A responsive table listing contacts</li> <li>Edit and delete buttons</li> </ul> <p>Congratulations \u2014 you\u2019ve created your first web application in S\u00d8AD!</p> <p>Next, explore adding validations or integrating additional frontend enhancements.</p>"},{"location":"getting-started/installation.html","title":"S\u00d8AD Installation Guide","text":"<p>There are two types of packaging for S\u00d8AD, a standalone (default package) and container. Depending on your requirement, you have to choose what suits you best.</p> <p>S\u00d8AD Standalone package includes everything needed to run it as a server application, except the database. You have to manually install your database (default supported database is MySQL).</p> <p>S\u00d8AD can run on any OS that supports JVM, however currently the supported platforms are Linux and Windows only.</p> <p>Prerequisites:</p> <ul> <li>JVM/JDK version 11 or latest</li> <li>nginx</li> </ul>"},{"location":"getting-started/installation.html#instruction-for-standalone-package-installation","title":"Instruction for Standalone package installation","text":"Linux (Ubuntu/Debian)Windows"},{"location":"getting-started/installation.html#install-jvmjdk-11","title":"Install JVM/JDK 11","text":"<ol> <li> <p>Update package index:</p> <pre><code>sudo apt update\n</code></pre> </li> <li> <p>Install JDK 11</p> <pre><code>sudo apt install openjdk-11-jdk\n</code></pre> </li> <li> <p>Verify Installation:</p> <pre><code>java -version\n</code></pre> </li> </ol>"},{"location":"getting-started/installation.html#install-and-setup-mysql","title":"Install and setup MySQL","text":"<ol> <li>Get MySQL repository configuration package     <pre><code>wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb\n</code></pre></li> <li>Install MySQL repository configuration package     <pre><code>sudo dpkg -i mysql-apt-config_0.8.12-1_all.deb\n</code></pre></li> <li>Fetches a public GPG key     <pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B7B3B788A8D3785C\n</code></pre></li> <li>Update package list     <pre><code>sudo apt-get update\n</code></pre></li> <li>Install MySQL     <pre><code>sudo apt install -f mysql-client=5.7* mysql-community-server=5.7* mysql-server=5.7*\n</code></pre></li> <li>For setting MySQL run:     <pre><code>sudo mysql_secure_installation\n</code></pre></li> <li>Verify MySQL is installed     <pre><code>mysql -u root -p\n</code></pre></li> <li>Create database for S\u00d8AD IDE (soadmin) and default application:<ul> <li>Database <code>soadmin</code>:     <pre><code>CREATE DATABASE soadmin CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre></li> <li>Database <code>app</code> (replace with the name of application):     <pre><code>CREATE DATABASE app CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre></li> </ul> </li> <li> <p>Create two users:</p> <ul> <li>User <code>soadmin_user</code>:     <pre><code>CREATE USER 'soadmin_user'@'localhost' IDENTIFIED BY '&lt;password&gt;';\n</code></pre></li> <li>User <code>app_user</code> (replace with the name of application):     <pre><code>CREATE USER 'app_user'@'localhost' IDENTIFIED BY '&lt;password&gt;';\n</code></pre></li> </ul> <p>Tip</p> <p>Change the password to more secured phrase. You can use any name or password that you want, we are going to need these on the configuration file.</p> </li> <li> <p>Grant privileges on a database:</p> <pre><code>```mysql\nGRANT ALL PRIVILEGES ON soadmin.* TO 'soadmin_user'@'localhost';\nGRANT ALL PRIVILEGES ON app.* TO 'app_user'@'localhost';\nFLUSH PRIVILEGES;\n```\n</code></pre> </li> <li> <p>Create the tables for database soadmin using script file provided.     <pre><code>mysql -u root -p soadmin &lt; soadmin-db.sql\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation.html#setup-and-configure-sad","title":"Setup and configure S\u00d8AD","text":"<ol> <li>Install zip utility if not already installed:     <pre><code>sudo apt install zip\n</code></pre></li> <li>Unpack (unzip) S\u00d8AD standalone package in your preferred location. The location of S\u00d8AD package will need to be set as <code>SUFIA_HOME</code> later.:     <pre><code>unzip sufia.app.zip\n</code></pre></li> <li>Set database credential:<ol> <li>Open <code>sufia.app\\web\\WEB-INF\\classes\\sufia.properties</code> file using editor.</li> <li>Change the username and password accordingly:     <pre><code>db.default.url = jdbc:mysql://127.0.0.1:3306/app?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.default.driver_class = com.mysql.cj.jdbc.Driver\ndb.default.username = app_user\ndb.default.password = &lt;password&gt;\n\n#this is for S\u00d8AD IDE\ndb.s0adm.url = jdbc:mysql://127.0.0.1:3306/soadmin?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.s0adm.driver_class = com.mysql.cj.jdbc.Driver\ndb.s0adm.username = soadmin_user\ndb.s0adm.password = &lt;password&gt;\n</code></pre></li> </ol> </li> <li>Update <code>sufia.app\\startup.sh</code> file for <code>SUFIA_HOME</code> location:     <pre><code>set SUFIA_HOME=/home/ubuntu/sufia.app\n</code></pre></li> <li> <p>Test run S\u00d8AD:</p> <ul> <li> <p>Go to /home/ubuntu/sufia.app directory and run:     <pre><code>chmod +x *.sh\n./startup.sh\n</code></pre>     If everything goes well, you should see a console.log file created in the home folder. Check the log file and make sure the server is running successfully without any error.</p> <p>Now the server is running on default port (8080), go to your browser and open: http://localhost:8080. You should see the default S\u00d8AD home page</p> <p> S\u00d8AD IDE Login Page </p> </li> </ul> </li> <li> <p>Install S\u00d8AD as a service</p> <p>Copy the <code>sufia.service</code> file to <code>/etc/systemd/system/</code> directory: <pre><code>sudo cp sufia.service /etc/systemd/system/\n</code></pre> Then enable and start the service: <pre><code>sudo systemctl enable sufia.service\nsudo systemctl start sufia.service\n</code></pre> You can check the status of the service using: <pre><code>sudo systemctl status sufia.service\n</code></pre> You can also view the logs for the service using: <pre><code>journalctl -u sufia.service\n</code></pre></p> </li> <li> <p>Update License Information</p> <p>For first time login, only master user is allowed to login. You will be given a default username and password for S\u00d8AD master user. Use that for first time login.</p> <p>Upon successfully logging into the system, navigate to the Settings page and select the License menu. Retrieve the license key from the email you received, then click the Update License button. Paste the copied key into the designated field and click Verify to complete the activation process.</p> <p> License Page </p> </li> </ol>"},{"location":"getting-started/installation.html#install-jvmjdk-11-for-windows","title":"Install JVM/JDK 11 for Windows","text":"<ol> <li> <p>Before installing JDK 11, check if JDK is already installed on your system by running the following command:</p> <pre><code>java -version\n</code></pre> <p>If the command outputs a version number, JDK is already installed, and you can skip JVM installation step.</p> </li> <li> <p>Download JDK 11:</p> <ul> <li>Go to the official Oracle JDK Downloads or</li> <li>Eclipse Temurin by Adoptium</li> </ul> <p>Download the Windows x64 installer (e.g., <code>OpenJDK11U-jdk_x64_windows_*.msi</code>)  and run the installer to complete the installation process. </p> </li> <li> <p>Verify Installation:</p> <ul> <li>Open Command Prompt and run: <pre><code>java -version\n</code></pre></li> <li>Expected output: <pre><code>java version \"11.0.x\" 202x-xx-xx LTS\n</code></pre></li> </ul> </li> </ol>"},{"location":"getting-started/installation.html#install-and-setup-mysql-for-windows","title":"Install and setup MySQL for Windows","text":"<ol> <li>Download MySQL:<ul> <li>Go to the official MySQL Community Downloads</li> </ul> </li> <li> <p>Install MySQL:</p> <ol> <li> <p>Run the installer and choose the Server Only or Full Installation.</p> </li> <li> <p>Set up the root password when prompted.</p> </li> <li> <p>Complete the installation process.</p> </li> </ol> </li> <li> <p>Verify Installation:</p> <ol> <li>Open Command Prompt and run:     <pre><code>mysql -u root -p\n</code></pre></li> <li>Enter the password to access MySQL.</li> </ol> </li> <li>Create database soadmin and application:<ul> <li>Database <code>soadmin</code>:     <pre><code>CREATE DATABASE soadmin CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre></li> <li>Database <code>app</code> (replace with the name of application):     <pre><code>CREATE DATABASE app CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre></li> </ul> </li> <li> <p>Create two user soadmin and application:</p> <ul> <li>User <code>soadmin_user</code>:     <pre><code>CREATE USER 'soadmin_user'@'localhost' IDENTIFIED BY '&lt;password&gt;';\n</code></pre></li> <li>User <code>app_user</code> (replace with the name of application):     <pre><code>CREATE USER 'app_user'@'localhost' IDENTIFIED BY '&lt;password&gt;';\n</code></pre></li> </ul> <p>Tip</p> <p>Change the password to more secured phrase. You can use any name or password that you want, we are going to need these on the configuration file.</p> </li> <li> <p>Grant privileges on a database:</p> <ol> <li>Grant privileges to these databases using previously created user.     <pre><code>GRANT ALL PRIVILEGES ON soadmin.* TO 'soadmin_user'@'localhost';\nGRANT ALL PRIVILEGES ON app.* TO 'app_user'@'localhost';\nFLUSH PRIVILEGES;\n</code></pre></li> </ol> </li> <li>Create the tables for database soadmin using script file provided.     <pre><code>mysql -u root -p soadmin &lt; soadmin-db.sql\n</code></pre></li> </ol>"},{"location":"getting-started/installation.html#setup-and-configure-sad-for-windows","title":"Setup and configure S\u00d8AD for Windows","text":"<ol> <li>Download and install 7-Zip from 7-Zip official website.</li> <li>Unpack (unzip) S\u00d8AD standalone package in your preferred location. The location of S\u00d8AD package will need to be set as <code>SUFIA_HOME</code> later.<ul> <li>Right-click on the downloaded <code>sufia.app.zip</code> file and select \"Extract Here\" or \"Extract to sufia.app\\\".</li> </ul> </li> <li>Set database credential for S\u00d8AD:<ol> <li>Open <code>sufia.app\\web\\WEB-INF\\classes\\sufia.properties</code> file using editor.</li> <li>Change the username and password accordingly:     <pre><code>db.default.url = jdbc:mysql://127.0.0.1:3306/app?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.default.driver_class = com.mysql.cj.jdbc.Driver\ndb.default.username = app_user\ndb.default.password = &lt;password&gt;\n\n#this is for S\u00d8AD IDE\ndb.s0adm.url = jdbc:mysql://127.0.0.1:3306/soadmin?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.s0adm.driver_class = com.mysql.cj.jdbc.Driver\ndb.s0adm.username = soadmin_user\ndb.s0adm.password = &lt;password&gt;\n</code></pre></li> </ol> </li> <li>Update <code>sufia.app\\startup.cmd</code> file for <code>SUFIA_HOME</code> location:     <pre><code>set SUFIA_HOME=D:\\sufia.app\n</code></pre></li> <li> <p>Test run S\u00d8AD:</p> <ul> <li> <p>Launch Command Prompt in the D:\\sufia.app directory and run:     <pre><code>.\\startup.cmd\n</code></pre>     If everything goes well, you should see a console.log file created in the home folder. Check the log file and make sure the server is running successfully without any error.</p> <p>Now the server is running on default port (8080), go to your browser and open: http://localhost:8080. You should see the default S\u00d8AD home page</p> <p> S\u00d8AD Homepage </p> </li> </ul> </li> <li> <p>Update License Information</p> <p>For first time login, only master user is allowed to login. You will be given a default username and password for S\u00d8AD master user. Use that for first time login.</p> <p>Upon successfully logging into the system, navigate to the Settings page and select the License menu. Retrieve the license key from the email you received, then click the Update License button. Paste the copied key into the designated field and click Verify to complete the activation process.</p> <p> License Page </p> <p>Now your S\u00d8AD application is ready.</p> </li> </ol>"},{"location":"getting-started/installation.html#setup-web-server-as-proxy-to-sad-server","title":"Setup web server as proxy to S\u00d8AD server","text":"<p>You can now setup web server as proxy to SUFIA server (e.g. nginx, apache). You also can setup SSL on the web server.  Refer to these excellent articles:</p> <ol> <li> <p>Install Nginx on UBuntu</p> </li> <li> <p>Secure Nginx with Let's Encrypt</p> </li> <li> <p>Nginx Reverse Proxy</p> </li> </ol>"},{"location":"getting-started/installation.html#container","title":"Container","text":"<p>S\u00d8AD can be run in a container. The container is built using Docker and can be run on any platform that supports Docker.</p> <p>Prerequisites:</p> <ul> <li>Docker installed on your system</li> </ul>"},{"location":"getting-started/installation.html#pulling-the-sad-docker-image","title":"Pulling the S\u00d8AD Docker Image","text":"<p>To pull the S\u00d8AD Docker image, run the following command:</p> <p><pre><code>docker pull registry.gitlab.com/pakcusoft/soad-cloud\n</code></pre> This command will download the latest S\u00d8AD image from the GitLab registry.</p>"},{"location":"getting-started/installation.html#running-sad-in-a-container","title":"Running S\u00d8AD in a Container","text":"<p>Before running the container, ensure that you have a MySQL database set up and accessible. You will need to create a database named <code>soadmin</code> and another for your application (e.g., <code>app</code>), along with the necessary users and permissions as described in the standalone installation section.</p> <p>To setup the configuration for the S\u00d8AD container, you can create a <code>sufia.properties</code> file with the following content:</p> <pre><code>db.default.url=jdbc:mysql://&lt;mysql_host&gt;:3306/app?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.default.driver_class=com.mysql.cj.jdbc.Driver\ndb.default.username=app_user\ndb.default.password=&lt;app_password&gt;\n\ndb.s0adm.url=jdbc:mysql://&lt;mysql_host&gt;:3306/soadmin?autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true\ndb.s0adm.driver_class=com.mysql.cj.jdbc.Driver\ndb.s0adm.username=soadmin_user\ndb.s0adm.password=&lt;soadmin_password&gt;\n</code></pre> <p>Replace <code>&lt;mysql_host&gt;</code>, <code>&lt;app_password&gt;</code>, and <code>&lt;soadmin_password&gt;</code> with your actual MySQL host and credentials. You can mount this configuration file into the container when you run it. To run the S\u00d8AD container with the configuration file, use the following command:</p> <pre><code>docker run -d -p 8080:8080 \\\n    --name sufia \\\n    -v /path/to/sufia.properties:/app/conf/sufia.properties \\\n    -v /path/to/local/webapp:/app/webapp \\\n    registry.gitlab.com/pakcusoft/soad-cloud\n</code></pre> <p>Replace <code>/path/to/sufia.properties</code> with the actual path to your <code>sufia.properties</code> file and <code>/path/to/local/webapp</code> with the path to your local web application folder on your host machine. This command will run the S\u00d8AD container in detached mode, mapping port 8080 of the container to port 8080 on your host machine, mounting the configuration file, and mounting the local web application folder into the container.</p>"},{"location":"getting-started/installation.html#accessing-the-sad-application","title":"Accessing the S\u00d8AD Application","text":"<p>Once the container is running, you can access the S\u00d8AD application by navigating to <code>http://localhost:8080</code> in your web browser. You should see the S\u00d8AD IDE Login Page.</p>"}]}